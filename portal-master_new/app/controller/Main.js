/*
 * File: app/controller/Main.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.2.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.2.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CarePortal.controller.Main', {
    extend: 'Ext.app.Controller',

    models: [
        'Diagnosis',
        'Vitals',
        'Prescriptions',
        'OPAdmissions',
        'ClinicalRooms',
        'WardInfo',
        'ClinicsInfo',
        'Announcements',
        'Clincs',
        'Radiology',
        'Investigations',
        'Notes',
        'MenusModel',
        'SubMenuModels',
        'PatientDetails',
        'AdmissionTypes',
        'EncountersList',
        'County'
    ],
    stores: [
        'VitalsStore',
        'PrescriptionStore',
        'OPAdmissionsStore',
        'ClinicalRoomsStore',
        'ClinicInfoStore',
        'OPAdmissions',
        'Prescriptions',
        'ClinicsStore',
        'AnnouncementStore',
        'RadiologyStore',
        'InvestigationsStore',
        'NotesStore',
        'GridStore',
        'ChartStore',
        'AdmissionTypeStore',
        'DiagnosisStore',
        'PatientDetails',
        'EncountersListStore',
        'CountyStore'
    ],
    views: [
        'Portal',
        'PortalPanel',
        'ChartPortlet',
        'GridPortlet',
        'Message',
        'HeaderPanel',
        'Vitals',
        'DiagnosisPanel',
        'Investigations',
        'DoctorsNotes',
        'Prescriptions',
        'Complains',
        'DoctorsArea',
        'PatientStatus',
        'RoomAllocation',
        'DoctorsWorkload',
        'TriagePanel',
        'Announcements',
        'WardsTable',
        'OpdVisits',
        'OutpatientList',
        'AdmissionData',
        'AdmitInpatient',
        'AdmitOutpatient',
        'MenuDiagram',
        'DontorsNotesEntry',
        'WardOccupancy',
        'VitalsForm',
        'Notes',
        'AssignBeds'
    ],

    refs: {
        msg: {
            autoCreate: true,
            selector: 'message',
            xtype: 'message'
        },
        viewport: {
            selector: 'viewport',
            xtype: 'portal'
        },
        headerpanel: {
            selector: 'headerpanel',
            xtype: 'headerpanel'
        },
        vitals: {
            selector: 'vitals',
            xtype: 'vitals'
        },
        diagnosispanel: {
            selector: 'diagnosispanel',
            xtype: 'diagnosispanel'
        },
        investigations: {
            selector: 'investigations',
            xtype: 'investigations'
        },
        doctorsnotes: {
            selector: 'doctorsnotes',
            xtype: 'doctorsnotes'
        },
        radiology: {
            selector: 'radiology',
            xtype: 'radiology'
        },
        viewport: {
            selector: 'viewport',
            xtype: 'triagepanel'
        },
        announcements: {
            selector: 'announcements',
            xtype: 'announcements'
        },
        vitalsform: {
            selector: 'vitalsform',
            xtype: 'vitalsform'
        },
        patientinfo: {
            selector: 'patientinfo',
            xtype: 'patientinfo'
        },
        patientstatus: {
            selector: 'patientstatus',
            xtype: 'patientstatus'
        },
        admissiondata: {
            selector: 'admissiondata',
            xtype: 'admissiondata'
        },
        admitinpatient: {
            selector: 'admitinpatient',
            xtype: 'admitinpatient'
        },
        admitoutpatient: {
            selector: 'admitoutpatient',
            xtype: 'admitoutpatient'
        },
        doctorsnotesentry: {
            selector: 'doctorsnotesentry',
            xtype: 'dontorsnotesentry'
        },
        wardoccupancy: {
            selector: 'wardoccupancy',
            xtype: 'wardoccupancy'
        },
        notes: {
            selector: 'notes',
            xtype: 'notes'
        },
        assignbeds: {
            selector: 'assignbeds',
            xtype: 'assignbeds'
        }
    },

    control: {
        "panel[isPortlet]": {
            beforeclose: 'onPortletBeforeClose',
            close: 'onPortletClose'
        }
    },

    onPortletBeforeClose: function(panel, eOpts) {
        // Provide a custom fade out effect when a portlet is removed from the portal
        if (!panel.closing) {
            panel.closing = true;
            panel.el.animate({
                opacity: 0,
                callback: panel.doClose,
                scope: panel
            });
        }
        return false;

    },

    onPortletClose: function(panel, eOpts) {
        this.showMsg('"' + panel.title + '" was removed');
    },

    showMsg: function(msg) {
        var msgId = Ext.id(),
            msgCmp = this.getMsg();

        this.msgId = msgId;
        msgCmp.update(msg);
        msgCmp.show();

        Ext.defer(this.clearMsg, 3000, this, [msgId]);
    },

    clearMsg: function(msgId) {
        if (msgId === this.msgId) {
            this.getMsg().hide();
        }
    },

    init: function(application) {
        this.control({
            "#mnuHome":{
                click:this.openHome
            },
            "#mnuDoctorsArea":{
                click:this.openDoctorsArea
            },
            "outpatientlist":{
                itemclick:this.updateHeaderDetails//,
                //itemdblclick:this.getPatientData
            },
            '#OutpatientAdmissions':{
                itemdblclick:this.openAdmissionData
            },
            '#mnuNursingArea':{
                click:this.openTriage
            },
            '#txtOpSearch':{
                change:this.searchPatients
            },
            '#cmdNew':{
                click:this.openEntryForm
            },
            '#cmdSave':{
                click:this.saveForm
            },
            '#menusPanel':{
                render:this.buildMenus
            },
            'menu':{
                click:this.getSelectedMenu
            },
            '#searchBox':{
                specialkey:this.getPressedKey
            },
            '#cmdRegister':{
                click:this.openRegister
            },
            'patientinfo button#viewPatients':{
                click:this.getViewPatient
            },
            '#cmdSearch':{
                click:this.searchPatient
            },
            '#cmdAdmitInpatient':{
                click:this.showAdmissionform
            },
            '#cmdAdmitOutpatient':{
                click:this.showAdmissionform
            },
            '#cancelAdmit':{
                click:this.cancelAdmission
            },
            '#savePatient':{
                click:this.savePatient
            },
            '#saveOpAdmission':{
                click:this.saveOpAdmission
            },
            '#saveIpAdmission':{
                click:this.saveIpAdmission
            },
            '#btnVitals':{
                afterrender:this.createVitals
            },
            'outpatientlist button#viewPatients':{
                click:this.getViewPatient
            },
            '#btnNotes':{
                afterrender:this.createNotes
            },
            '#btnDiagnosis':{
                afterrender:this.createDiagnosis
            },
            '#btnLabtest':{
                afterrender:this.createLabTest
            },
            '#btnRadiology':{
                afterrender:this.createRadiology
            },
            '#btnServices':{
                afterrender:this.createServices
            },
            '#btnPrescriptions':{
                afterrender:this.createPrescription
            },
            '#cmdAddComplaints':{
                click:this.addComplaints
            },
            '#waitingList':{
                afterrender:this.getSelectedPatient
            },
            'assignbeds':{
                itemclick:this.assignBed
            }

        });
    },

    openDoctorsArea: function() {
        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=checkUserRole',
            waitMsg: 'checkin user permissions ...',
            success: function(response){
                var text = response.responseText;
               // Ext.Msg.alert('Dashboard','You are allowed to access Doctors Area');
                headerPanel=Ext.create("CarePortal.view.HeaderPanel",{});

                doctorsArea=Ext.create("CarePortal.view.DoctorsArea",{});
                centerContainer=this.getViewport().down("#PortalDetails");
                centerContainer.removeAll();

                centerContainer.add(headerPanel,doctorsArea);
                //this.openHome();

            },
            failure:function(response){
               // var resp = JSON.parseJSON(response);
                Ext.Msg.alert('Access Denied','Access Denied, contact Systems Administrator');
            },
              scope: this
        });


    },

    openHome: function() {
                homeArea=Ext.create("CarePortal.view.PortalPanel",{});
                centerContainer=this.getViewport().down("#PortalDetails");
                centerContainer.removeAll();

                centerContainer.add(homeArea);

                this.getAnnouncements();
    },

    updateHeaderDetails: function(gridpanel, record, item, index, e, eOpts) {
        // Ext.Msg.alert('Test',record.get('FirstName'));

        // this.getHeaderpanel().down('#PatientName').setValue(record.get('Names'));
        // this.getHeaderpanel().down('#Age').setValue(record.get('Age'));
        // this.getHeaderpanel().down('#Gender').setValue(record.get('Gender'));
        // this.getHeaderpanel().down('#PID').setValue(record.get('Pid'));
        // this.getHeaderpanel().down('#EncounterNo').setValue(record.get('EncounterNo'));

        var encNo=record.get('EncounterNo');

        var presStore=Ext.data.StoreManager.lookup("PrescriptionStore");

        presStore.load({
            params: {
                encNo:encNo
            },
            callback: function(records, operation, success) {
                //this.getVitals(encNo);
            },
            scope: this
        });


        // this.getVitals(record.get('EncounterNo'));
        // this.getDiagnosis(record.get('EncounterNo'));
        // this.getInvestigations(record.get('EncounterNo'));
        // this.getNotes(record.get('EncounterNo'));
        // this.getRadiology(record.get('EncounterNo'));
        // this.getProcedures(record.get('EncounterNo'));
    },

    getPatientData: function(gridpanel, record, item, index, e, eOpts) {
        this.openDoctorsArea();

        var encNo=record.get('EncounterNo');

        var presStore=Ext.data.StoreManager.lookup("PrescriptionStore");

        presStore.load({
            params: {
                encNo:encNo
            },
            callback: function(records, operation, success) {
                this.getVitals(encNo);
                this.getDiagnosis(encNo);
            },
            scope: this
        });


    },

    getVitals: function(encNo) {
        var vitalsStore=Ext.data.StoreManager.lookup("VitalsStore");
        var vitalsPanel=this.getViewport().down("#vitals");

        vitalsStore.load({
            params: {
                encNo:encNo
            },
            callback: function(records, operation, success) {
                var tpl=new Ext.XTemplate(
                    '<Table id=vitals>',
                    '<tr><td class=titles>ID</td><td class=titles>Time</td><td class=titles>Description</td><td class=titles>Values</td></tr>',
                        '<tpl for=".">',
                             '<tr>',
                                '<td>{VitalID}</td>',
                                '<td>{VitalsTime}</td>',
                                '<td>{Description}</td>',
                                "<tpl if='Value &gt;= Lower' && 'Value &lt;= Upper'>",
                                    '<td class=good>{Value}</td>',
                                '<tpl else>',
                                    '<td class=danger>{Value}</td>',
                                '</tpl>',
                             '</tr>',
                        '</tpl>',
                    '</table>'
                );

                var data = [];
                vitalsStore.each(function(record) {
                    data.push(record.getData());
                });

                tpl.overwrite(vitalsPanel.body,data);


            },scope:this

        });

    },

    getDiagnosis: function(encNo) {
        var diagnosisPanel=this.getViewport().down("#diagnosispanel");
        var diagnosisStore=Ext.data.StoreManager.lookup("DiagnosisStore");

         diagnosisStore.load({
             params: {
                 encNo:encNo
             },
             callback: function(records, operation, success) {
                 var tpl=new Ext.XTemplate(
                     '<Table id=diagnosis>',
                     '<tr><td colspan=4 class=titles>DIAGNOSIS</td></tr>',
                     '<tr><td class=titles>Code</td>',
                     '<td class=titles>Description</td>',
                     '<td class=titles>Time</td>',
                     '<td class=titles>Type</td>',
                     '</tr>',
                     '<tpl for=".">',
                     '<tr>',
                     '<td>{Code}</td>',
                     '<td>{Description}</td>',
                     '<td>{Time}</td>',
                     '<td>{Type}</td>',
                     '</tr>',
                     '</tpl>',
                     '</table>'
                 );

                 var data = [];
                 diagnosisStore.each(function(record) {
                     data.push(record.getData());
                 });

                 tpl.overwrite(diagnosisPanel.body,data);


             },scope:this

         });

    },

    getInvestigations: function(encNo) {
        var investigationsPanel=this.getViewport().down("#investigations");
        var investigationsStore=Ext.data.StoreManager.lookup("InvestigationsStore");

        investigationsStore.load({
            params: {
                encNo:encNo
            },
            callback: function(records, operation, success) {
                    var tpl=new Ext.XTemplate(
                        '<Table id=investigations>',
                        '<tr><td colspan=5 class=titles>INVESTIGATIONS</td></tr>',
                                '<tr><td class=titles>Status</td>',
                                    '<td class=titles>Description</td>',
                                    '<td class=titles>TimeRequested</td>',
                                    '<td class=titles>BatchNo</td>',
                                    '<td class=titles>RequestedBy</td>',
                                '</tr>',
                         '<tpl for=".">',

                                '<tr>',
                                    '<tpl if="Status == pending">',
                                        '<td class=status1>{Status}</td>',
                                    '<tpl else>',
                                         '<td class=status1>{Status}</td>',
                                    '</tpl>',
                                    '<td>{Description}</td>',
                                    '<td>{TimeRequested}</td>',
                                    '<td>{BatchNo}</td>',
                                    '<td>{RequestedBy}</td>',
                                '</tr>',
                        '</tpl>',
                        '</table>'
                    );

                var data = [];
                investigationsStore.each(function(record) {
                    data.push(record.getData());
                });

                tpl.overwrite(investigationsPanel.body,data);

            },
            scope: this
        });



    },

    getRadiology: function(encNo) {
        var radiologyPanel=this.getViewport().down("#radiology");
        var radiologyStore=Ext.data.StoreManager.lookup("RadiologyStore");

        radiologyStore.load({
            params: {
                encNo:encNo
            },
            callback: function(records, operation, success) {
                    var tpl=new Ext.XTemplate(
                        '<Table id=investigations>',
                        '<tr><td colspan=5 class=titles>RADIOLOGY TESTS</td></tr>',
                                '<tr><td class=titles>Status</td>',
                                    '<td class=titles>Description</td>',
                                    '<td class=titles>TimeRequested</td>',
                                    '<td class=titles>BatchNo</td>',
                                    '<td class=titles>RequestedBy</td>',
                                '</tr>',
                         '<tpl for=".">',

                                '<tr>',
                                    '<tpl if="Status == pending">',
                                        '<td class=status1>{Status}</td>',
                                    '<tpl else>',
                                         '<td class=status1>{Status}</td>',
                                    '</tpl>',
                                    '<td>{Description}</td>',
                                    '<td>{TimeRequested}</td>',
                                    '<td>{BatchNo}</td>',
                                    '<td>{RequestedBy}</td>',
                                '</tr>',
                        '</tpl>',
                        '</table>'
                    );

                      var data = [];

                        radiologyStore.each(function(record) {
                            data.push(record.getData());
                        });

                        tpl.overwrite(radiologyPanel.body,data);
            },
            scope: this
        });



    },

    getNotes: function(encNo) {
        //vitalsPanel = Ext.create('CarePortal.view.Vitals', {});
        notesPanel=this.getViewport().down("#notes");


        var notesStore=Ext.data.StoreManager.lookup("NotesStore");

        notesStore.load({
            params: {
                encNo:encNo
            },
            callback: function(records, operation, success) {
                    var tpl=new Ext.XTemplate(
                        '<Table id=notes>',
                        '<tr><td colspan=4 class=titles>DOCTORS NOTES & COMPLAINTS</td></tr>',
                                '<tr><td class=titles>Note Type</td>',
                                    '<td class=titles>Note</td>',
                                    '<td class=titles>Time</td>',
                                    '<td class=titles>TreatedBy</td>',
                         '<tpl for=".">',
                                '<tr>',
                                    '<td>{NotesType}</td>',
                                    '<td style="width:400px;"><div class=content>{Notes}</div></td>',
                                    '<td>{CreateTime}</td>',
                                    '<td>{TreatedBy}</td>',
                                '</tr>',
                        '</tpl>',
                        '</table>'
                    );

                var data = [];

                notesStore.each(function(record) {
                    data.push(record.getData());
                });

                 //var data1=notesStore.proxy.reader.rawData;
                tpl.overwrite(notesPanel.body,data);
            },
            scope: this
        });



    },

    getProcedures: function(encNo) {
        var procPanel=this.getViewport().down("#complains");
        var procStore=Ext.data.StoreManager.lookup("ProcedureStore");

        procStore.load({
            params: {
                encNo:encNo
            },
            callback: function(records, operation, success) {
                    var tpl=new Ext.XTemplate(
                        '<Table id=investigations>',
                        '<tr><td colspan=4 class=titles>Services & Procedures Rendered</td></tr>',
                                '<tr><td class=titles>No</td>',
                                    '<td class=titles>PartCode</td>',
                                    '<td class=titles>Description</td>',
                                    '<td class=titles>Qty</td>',
                                    '<td class=titles>Cost</td>',
                                    '<td class=titles>Time</td></tr>',
                         '<tpl for=".">',
                                '<tr>',
                                    '<td>{No}</td>',
                                    '<td>{PartCode}</td>',
                                    '<td style="width:300px;"><div class=content>{Description}</div></td>',
                                    '<td>{Qty}</td>',
                                    '<td>{Price}</td>',
                                    '<td>{RequestTime}</td>',
                                '</tr>',
                        '</tpl>',
                        '</table>'
                    );

                var data = [];

                procStore.each(function(record) {
                    data.push(record.getData());
                });

                tpl.overwrite(procPanel.body,data);
            },
            scope: this
        });



    },

    openAdmissionData: function(gridpanel, record, item, index, e, options) {
        strPid=record.get('Pid');
        //getinfo(strPid)
        url="../modules/registration_admission/aufnahme_pass.php?target=search&fwd_nr="+strPid+"&title=Click to show data";
        //runModul (url);
        window.parent.CONTENTS.location.href=url;

    },

    openTriage: function() {
                //headerPanel=Ext.create("CarePortal.view.HeaderPanel",{});

                triageArea=Ext.create("CarePortal.view.TriagePanel",{});
                centerContainer=this.getViewport().down("#PortalDetails");
                centerContainer.removeAll();

                centerContainer.add(triageArea);
    },

    getAnnouncements: function() {
        //newsWindow = Ext.create('CarePortal.view.Announcements', {});
        newsWindow=this.getViewport().down("#announcements");

        var newsStore=Ext.data.StoreManager.lookup("AnnouncementStore");

        newsStore.load({
            params: {},
            callback: function(records, operation, success) {
                var tpl=new Ext.XTemplate(
                    '<Table id=announcements>',
                    '<tpl for="Announcements">',
                    '<tr>',
                    '<td class=titles>{title}</td></tr>',
                    '<tr><td>{body}</td></tr>',
                    '</tpl>',
                   '</table>'
                );
                var data1=newsStore.proxy.reader.rawData;
                tpl.overwrite(newsWindow.body,data1);
            },
            scope: this
        });

    },

    searchPatients: function(field, newValue, oldValue, eOpts) {

        if(newValue.length>2){
            //Ext.Msg.alert('test',newValue);
            var opStore=Ext.data.StoreManager.lookup("OPAdmissionsStore");

                opStore.load({
                    params: {
                        searchParam:newValue
                    },
                    callback: function(records, operation, success) {
                    },
                    scope: this
                });
        }

    },

    getPortalData: function(store, encNo) {
        store.load({
            params: {
                encNo:encNo
            },
            callback: function(records, operation, success) {

            },scope:this

        });

        var data = [];

        store.each(function(record) {
            data.push(record.getData());
        });

        return data;
    },

    openEntryForm: function(button) {
        var callingPanel=button.up('panel').getItemId();
        //Ext.Msg.alert('Form Name',callingPanel);
        if(callingPanel==='vitals'){
            var entryForm=Ext.create('CarePortal.view.VitalsForm', {});
            var strTitle="Vitals Form";
        }

        var entryWindow=Ext.create('Ext.window.Window', {
            title: strTitle,
            resizable:true,
            minWidth:300,
            minHeight:300
        });

        // this.getHeaderpanel().down('#PatientName').setValue(record.get('Names'));
        // this.getHeaderpanel().down('#Age').setValue(record.get('Age'));
        // this.getHeaderpanel().down('#Gender').setValue(record.get('Gender'));
        // this.getHeaderpanel().down('#PID').setValue(record.get('Pid'));
        // this.getHeaderpanel().down('#EncounterNo').setValue(record.get('EncounterNo'));

        entryWindow.add(entryForm);
        entryWindow.show();

    },

    buildMenus: function(navPanel, eOpts) {
        var accordPanel, menu,menuItem,groupID;

        var strMenusStore=Ext.data.StoreManager.lookup('MenusStore');

        strMenusStore.load(function(records,operation,success){

            Ext.each(records,function(root) {

                menu = Ext.create("Ext.menu.Menu", {
                    floating: false,
                    title:root.get('menuName'),
                    icon:root.get('sImage')
                });
                navPanel.add(menu);

                Ext.each(root, function (rec){
                    Ext.each(rec.get('subMenus'), function (items) {
                        //console.log(items);
                        menuItem = Ext.create("Ext.menu.Item", {
                            text: items.subMenuName,
                            icon:items.sImage,
                            itemId:items.nr,
                            link:items.url,
                            dispType:items.dispType
                        });
                        menu.add(menuItem);
                    });

                });


            });
        });
    },

    getSelectedMenu: function(menu, item, eOpts) {
        //Ext.Msg.alert('test','test '+item.link + '-'+item.dispType);
            centerContainer=this.getViewport().down("#detailsPanel");
        if(item.dispType==1){
            centerDetails=Ext.create("CarePortal.view."+item.link,{});
            centerContainer.removeAll();

            centerContainer.add(centerDetails);
            centerContainer.setTitle(item.text);

            //centerDetails.query('textfield[name="formStatus"]')[0].setValue('insert');

        }else if(item.dispType==2){

            centerDetails=Ext.create("CarePortal.view."+item.link,{});
            centerContainer.removeAll();
            var containterWindows=Ext.create('Ext.window.Window', {
                title: item.text,
                resizable:false,
                closable:true
            });

            containterWindows.add(centerDetails);
            containterWindows.show();

            //centerDetails.query('textfield[name="formStatus"]')[0].setValue('insert');

        }

    },

    getPressedKey: function(field, e, options) {
           if (e.getKey() == e.ENTER) {
                this.searchPatient();
            }
    },

    openRegister: function(button) {
        register=Ext.create("CarePortal.view.Register",{});

        var containterWindows=Ext.create('Ext.window.Window', {
            title: "Patient Registration",
            resizable:false,
            closable:true
        });

        containterWindows.add(register);
        containterWindows.show();
    },

    getViewPatient: function(button) {
        var rec = button.getViewModel().get('record');
        //Ext.Msg.alert("Button clicked", "Hey! " + rec.get("EncounterNo"));
        var sourceForm=button.up('grid').getItemId();

        if(sourceForm==='patientInfo'){
            encounterNo=rec.get('CurrentEncounter');
            var names=rec.get('FirstName')+' '+rec.get('LastName')+ ' '+rec.get('SurName');

        }else if(sourceForm==='OutpatientAdmissions'){
            encounterNo=rec.get('EncounterNo');
            var names=rec.get('Names');

        }

        var encStore =Ext.data.StoreManager.lookup('EncountersListStore');
        encStore.load({
            params: {
                pid: rec.get('Pid')
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });


        admissionDetails=Ext.create("CarePortal.view.AdmissionData",{});
        //centerContainer.removeAll();
        var containterWindows=Ext.create('Ext.window.Window', {
            title:"Admission Data",
            resizable:false,
            closable:true
        });

        containterWindows.add(admissionDetails);
        containterWindows.show();



        this.getAdmissiondata().down('#pid').setValue(rec.get('Pid'));
        this.getAdmissiondata().down('#pid2').setValue(rec.get('Pid'));
        this.getAdmissiondata().down('#pid3').setValue(rec.get('Pid'));
        this.getAdmissiondata().down('#fileNumber').setValue(rec.get('fileNumber'));
        this.getAdmissiondata().down('#names').setValue(names);
        this.getAdmissiondata().down('#dob').setValue(rec.get('DateOfBirth'));
        this.getAdmissiondata().down('#gender').setValue(rec.get('Gender'));
        this.getAdmissiondata().down('#registrationDate').setValue(rec.get('RegistrationDate'));
        this.getAdmissiondata().down('#encounterNr').setValue(encounterNo);
        this.getAdmissiondata().down('#encounterNr2').setValue(encounterNo);
        this.getAdmissiondata().down('#encounterDate').setValue(rec.get('EncounterDate'));
        this.getAdmissiondata().down('#encounterDate2').setValue(rec.get('EncounterDate'));

        if(encounterNo===''){
           this.getAdmissiondata().down('#admissionStatus').setValue('No Admission Data for '+ names);
           this.getAdmissiondata().down('#admissionButtons').setHidden(false);
           this.getAdmissiondata().down('#menuDiagram').setHidden(true);
        }else{
             this.getAdmissiondata().down('#admissionStatus').setValue('The Patient is Currentlly Admited in ');
             this.getAdmissiondata().down('#admissionButtons').setHidden(true);
             this.getAdmissiondata().down('#menuDiagram').setHidden(false);
            if(rec.get('EncounterClass')==1){
                this.getAdmissiondata().down('#inpatientDetails').setHidden(false);
                this.getAdmissiondata().down('#inpatient').setValue(rec.get('Department'));
                this.getAdmissiondata().down('#ward').setValue(rec.get('ConsultationFee'));
                this.getAdmissiondata().down('#financeClass').setValue(rec.get('PaymentMode'));


            }else{
                this.getAdmissiondata().down('#outpatientDetails').setHidden(false);
                this.getAdmissiondata().down('#outpatient').setValue(rec.get('EncounterClass'));
                this.getAdmissiondata().down('#department').setValue(rec.get('Department'));
                this.getAdmissiondata().down('#consultationFee').setValue(rec.get('ConsultationFee'));
                this.getAdmissiondata().down('#financePlan').setValue(rec.get('PaymentMode'));
            }
        }


    },

    searchPatient: function() {
        var searchParam=this.getPatientinfo().down('#searchBox').getValue();
        var patientsStore =Ext.data.StoreManager.lookup('PatientDetails');
        patientsStore.load({
            params: {
                sParam: searchParam
            },
            callback: function(records, operation, success) {

            },
            scope: this

        });
    },

    showAdmissionform: function(button) {
        //Ext.Msg.alert('Test',button.getItemId());
        if(button.getItemId()=='cmdAdmitInpatient'){
            this.getAdmissiondata().down('#admitInpatient').setHidden(false);
            this.getAdmissiondata().down('#admitOutpatient').setHidden(true);
        }else if(button.getItemId()=='cmdAdmitOutpatient'){
             this.getAdmissiondata().down('#admitOutpatient').setHidden(false);
             this.getAdmissiondata().down('#admitInpatient').setHidden(true);
        }

        // var itemsStore =Ext.data.StoreManager.lookup('Consultations');
        //         itemsStore.load({
        //             params: {
        //                 searchParam: 'Yes'
        //             },
        //             callback: function(records, operation, success) {

        //             },
        //             scope: this

        //         });

    },

    cancelAdmission: function(button) {
        //if(button.getItemId('#cmdAdmitInpatient')){
            this.getAdmissiondata().down('#admitInpatient').setHidden(true);
            this.getAdmissiondata().down('#admitOutpatient').setHidden(true);

        // }else if(button.getItemid('#cmdAdmitOutpatient')){
        //     this.getAdmissiondata().down('#admitOutpatient').setHidden(false);
        //     this.getAdmissiondata().down('#admitInpatient').setHidden(true);
        // }
    },

    savePatient: function(button) {
        var form = button.up('panel').getForm(); // get the basic form
        //var entryForm=form.getItemId();
        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function (form, action) {
                    Ext.Msg.alert('Thank you!', 'The Patient has been saved Successfully.');
                    button.up('form').getForm().reset();
                    button.up('window').hide();

                     var patientsStore =Ext.data.StoreManager.lookup('PatientDetails');
                     patientsStore.load({});

                },
                failure: function (form, action) {
                    var jsonResp = Ext.decode(action.response.responseText);

                    Ext.Msg.alert('Failed', 'Could not save Patient. \n Error=' + jsonResp.error);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    saveOpAdmission: function(button) {
        var form = button.up('panel').getForm(); // get the basic form
                //var entryForm=form.getItemId();
                if (form.isValid()) { // make sure the form contains valid data before submitting
                    form.submit({
                        success: function (form, action) {
                            Ext.Msg.alert('Thank you!', 'The Patient has been Admitted Successfully.');
                            button.up('form').getForm().reset();
                            button.up('form').hide();

                                            },
                        failure: function (form, action) {
                            var jsonResp = Ext.decode(action.response.responseText);

                            Ext.Msg.alert('Failed', 'Could not save Patient. \n Error=' + jsonResp.error);
                        }
                    });
                } else { // display error alert if the data is invalid
                    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
                }

        this.getAdmissiondata().down('#admissionButtons').setHidden(true);
        this.getAdmissiondata().down('#outpatientDetails').setHidden(false);
    },

    saveForm: function(button) {
        var form = button.up('panel').getForm(); // get the basic form
        //var entryForm=form.getItemId();
        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function (form, action) {
                    Ext.Msg.alert('Thank you!', 'The Vitals has been saved Successfully.');
                    button.up('form').getForm().reset();
                    button.up('window').hide();

                },
                failure: function (form, action) {
                    var jsonResp = Ext.decode(action.response.responseText);

                    Ext.Msg.alert('Failed', 'Could not save Vitals. \n Error=' + jsonResp.error);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    saveIpAdmission: function(button) {
         var form = button.up('panel').getForm(); // get the basic form
                //var entryForm=form.getItemId();
                if (form.isValid()) { // make sure the form contains valid data before submitting
                    form.submit({
                        success: function (form, action) {
                            Ext.Msg.alert('Thank you!', 'The Admission has been saved Successfully.');
                            button.up('form').getForm().reset();
                            button.up('form').hide();

                        },
                        failure: function (form, action) {
                            var jsonResp = Ext.decode(action.response.responseText);

                            Ext.Msg.alert('Failed', 'Could not save Admission Data. \n Error=' + jsonResp.error);
                        }
                    });
                } else { // display error alert if the data is invalid
                    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
                }

         this.getAdmissiondata().down('#admissionButtons').setHidden(true);
          this.getAdmissiondata().down('#admissionDetails').setHidden(false);

    },

    createVitals: function(component, eOpts) {

        //Ext.Msg.alert('Thank you!',this.getPatientstatus().down('#pid'));
        component.getEl().on('click', function() {
          // Ext.Msg.alert('Thank you!',component.up('panel').up('panel').getItemId());

                var vitals=Ext.create("CarePortal.view.VitalsForm",{});
                //centerContainer.removeAll();
                var containterWindows=Ext.create('Ext.window.Window', {
                    title:"Vitals Entry Form",
                    resizable:false,
                    closable:true
                });

                containterWindows.add(vitals);
                containterWindows.show();

            vitals.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());
            vitals.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());
           vitals.down('#encounterNo').setValue(component.up('panel').up('panel').down('#encounterNr').getValue());
            vitals.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());


        });




    },

    createNotes: function(component, eOpts) {
         component.getEl().on('click', function() {

                        //var icd10Store =Ext.data.StoreManager.lookup('DiseaseCodeStore');
                         //    icd10Store.load({});
                        var notes=Ext.create("CarePortal.view.Notes",{});
                        var containterWindows=Ext.create('Ext.window.Window', {
                            title:"Complaints Entry Form",
                            resizable:false,
                            closable:true
                        });

                        containterWindows.add(notes);
                        containterWindows.show();

                    notes.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());
                    notes.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());
                    notes.down('#encounterNo').setValue(component.up('panel').up('panel').down('#encounterNr').getValue());
                    notes.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());

                });

    },

    createDiagnosis: function(component,eOpts) {
        component.getEl().on('click', function() {

            var diagnosis=Ext.create("CarePortal.view.Diagnosis",{});
            var containterWindows=Ext.create('Ext.window.Window', {
                title:"Diagnosis Entry Form",
                resizable:false,
                closable:true
            });

            containterWindows.add(diagnosis);
            containterWindows.show();

            diagnosis.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());
            diagnosis.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());
            diagnosis.down('#encounterNo').setValue(component.up('panel').up('panel').down('#encounterNr').getValue());
            diagnosis.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());
            });
    },

    createLabTest: function(component, eOpts) {
         component.getEl().on('click', function() {

             var labtest=Ext.create("CarePortal.view.LabTests",{});
             var containterWindows=Ext.create('Ext.window.Window', {
                 title:"lab Tests Entry Form",
                 resizable:false,
                 closable:true
             });

             containterWindows.add(labtest);
             containterWindows.show();

             labtest.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());
             labtest.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());
             labtest.down('#encounterNo').setValue(component.up('panel').up('panel').down('#encounterNr').getValue());
             labtest.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());
         });
    },

    createRadiology: function(component, eOpts) {
         component.getEl().on('click', function() {

             var radiology=Ext.create("CarePortal.view.Radiology",{});
             var containterWindows=Ext.create('Ext.window.Window', {
                 title:"Radiology Entry Form",
                 resizable:false,
                 closable:true
             });

             containterWindows.add(radiology);
             containterWindows.show();

             radiology.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());
             radiology.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());
             radiology.down('#encounterNo').setValue(component.up('panel').up('panel').down('#encounterNr').getValue());
             radiology.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());
         });
    },

    createServices: function(component,eOpts) {
         component.getEl().on('click', function() {

             var services=Ext.create("CarePortal.view.Services",{});
             var containterWindows=Ext.create('Ext.window.Window', {
                 title:"Service and Procedures Entry Form",
                 resizable:false,
                 closable:true
             });

             containterWindows.add(services);
             containterWindows.show();

             services.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());
             services.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());
             services.down('#encounterNo').setValue(component.up('panel').up('panel').down('#encounterNr').getValue());
             services.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());
         });
    },

    createPrescription: function(component, eOpts) {
         component.getEl().on('click', function() {

             var prescription=Ext.create("CarePortal.view.NewPrescriptions",{});
             var containterWindows=Ext.create('Ext.window.Window', {
                 title:"Prescriptions Entry Form",
                 resizable:false,
                 closable:true
             });

             containterWindows.add(prescription);
             containterWindows.show();

             prescription.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());
             prescription.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());
             prescription.down('#encounterNo').setValue(component.up('panel').up('panel').down('#encounterNr').getValue());
             prescription.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());
         });
    },

    addComplaints: function(button) {
        var pid=button.up('form').down('#pid').getValue();
        var encounterNo=button.up('form').down('#encounterNo').getValue();
        var complaint=button.up('form').down('#txtComplaint').getValue();
        var comment=button.up('form').down('#txtComment').getValue();

        var notesPanel=button.up('form').down('#notesPanel');

                Ext.Ajax.request({
                     url: '../data/getDataFunctions.php?task=saveComplaints',
                    params: {
                        pid:pid,
                        encNr:encounterNo,
                        complaint:complaint,
                        comment:comment
                    },
                    success: function(response){
                       var resp = Ext.JSON.decode(response.responseText);
                        Ext.Msg.alert('Error',resp.Error);



                    },
                    scope:this
                });
        this.loadNotes(encounterNo,notesPanel);
    },

    loadNotes: function(encounterNr,component) {
         var notesStore=Ext.data.StoreManager.lookup("NotesStore");
        notesStore.load({
            params:{
                encNr:encounterNr
            }
        });


        var tpl=new Ext.XTemplate(
            '<Table id=notes>',
            '<tr><td class=titles>Complaint</td><td class=titles>Comments</td></tr>',
            '<tpl for=".">',
            '<tr>',
            '<td>{Complaints}</td>',
            '<td>{Notes}</td>',
            '</tr>',
            '</tpl>',
            '</table>'
        );

        var data = [];
        notesStore.each(function(record) {
            data.push(record.getData());
        });

        tpl.overwrite(component.body,data);
    },

    getSelectedPatient: function(component, eOpts) {
        component.getEl().on('click', function(e,t) {
               e.stopEvent();
             // Ext.Msg.alert('Test','Select Pid is '+t.id);
               var assignBeds=Ext.create("CarePortal.view.AssignBeds",{});
               var containterWindows=Ext.create('Ext.window.Window', {
                   title:"Assign Occupant",
                   resizable:true,
                   closable:true,
                   height:600,
                   width:1000,
                   layout : {
                        type: 'vbox',
                        align: 'stretch'
                   }
               });


                var assMsg=assignBeds.down('#assMsg').getValue();
                var ward=component.up('grid').down('#wardTitle').getValue();
                var wardID=component.up('grid').down('#wardID').getValue();
                assignBeds.down('#ward').setValue(ward);
                assignBeds.down('#assMsg').setValue(assMsg +" PID " + t.innerHTML + ".Thank You");
                assignBeds.down('#wardID').setValue(wardID);


                     containterWindows.add(assignBeds);
                     containterWindows.show();






           });
    },

    assignBed: function(gridpanel, record, item, index, e, options) {
        if(record.get('PID')===''){
          //   var columns = grid.getView().headerCt.getGridColumns();
            Ext.Msg.alert('Test','ward No is '+gridpanel.Id);

            var encNo=record.get('EncounterNo');
            var wrdNo=record.get('RoomNo');
            var rm=record.get('RoomNo');
            var bd=record.get('BedNo');

             Ext.Ajax.request({
                    url: 'data/getDataFunctions.php?task=assignBed',
                    waitMsg: 'wait while we assign a bed ...',
                 params:{
                     encNr:encNo,
                     wrdNo:wrdNo
                 },
                    success: function(response){
                        var text = response.responseText;

                        Ext.Msg.alert('Success','Successfully Assigned Bed to '+record.get('PID'));
                    },
                    failure:function(response){
                       // var resp = JSON.parseJSON(response);
                        Ext.Msg.alert('Access Denied','Access Denied, contact Systems Administrator');
                    },
                      scope: this
                });
        }
    }

});
