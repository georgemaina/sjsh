/*
 * File: app/view/OutpatientList.js
 * Date: Mon May 18 2020 11:00:01 GMT+0300 (E. Africa Standard Time)
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CarePortal.view.OutpatientList', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.outpatientlist',

    requires: [
        'CarePortal.view.OutpatientListViewModel',
        'Ext.view.Table',
        'Ext.grid.plugin.DragDrop',
        'Ext.util.Point',
        'Ext.toolbar.Paging',
        'Ext.form.FieldContainer',
        'Ext.form.field.Text',
        'Ext.grid.column.Column'
    ],

    config: {
        isPortlet: true
    },

    viewModel: {
        type: 'outpatientlist'
    },
    cls: 'x-portlet',
    draggable: {
        moveOnDrag: false
    },
    frame: true,
    height: 470,
    itemId: 'OutpatientAdmissions',
    autoDestroy: false,
    closable: true,
    collapsible: true,
    title: 'OutPatients Admissions',
    columnLines: true,
    store: 'OPAdmissionsStore',
    defaultListenerScope: true,

    dockedItems: [
        {
            xtype: 'pagingtoolbar',
            dock: 'bottom',
            width: 360,
            displayInfo: true,
            store: 'OPAdmissionsStore'
        },
        {
            xtype: 'fieldcontainer',
            dock: 'top',
            height: 30,
            width: 100,
            layout: 'absolute',
            items: [
                {
                    xtype: 'textfield',
                    x: 0,
                    y: 5,
                    itemId: 'txtOpSearch',
                    width: 205,
                    emptyText: 'Search by PId, Names'
                }
            ]
        }
    ],
    columns: [
        {
            xtype: 'gridcolumn',
            width: 82,
            dataIndex: 'Status',
            text: 'Status'
        },
        {
            xtype: 'gridcolumn',
            width: 56,
            dataIndex: 'Pid',
            text: 'Pid'
        },
        {
            xtype: 'gridcolumn',
            width: 124,
            dataIndex: 'Names',
            text: 'Names'
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'PaymentMode',
            text: 'Payment Mode'
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'EncounterTime',
            text: 'Encounter Time'
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'EncounterNo',
            text: 'Encounter No'
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'Clinic',
            text: 'Clinic'
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'Gender',
            text: 'Gender'
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'DOB',
            text: 'Dob'
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'Age',
            text: 'Age'
        }
    ],

    initConfig: function(instanceConfig) {
        var me = this,
            config = {
                viewConfig: {
                    listeners: {
                        refresh: 'onViewRefresh'
                    },
                    plugins: [
                        Ext.create('Ext.grid.plugin.DragDrop', {
                            dragGroup: 'mainGroup',
                            dropGroup: 'rooms'
                        })
                    ]
                }
            };
        if (instanceConfig) {
            me.self.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    onViewRefresh: function(dataview, eOpts) {
        // get all grid view nodes
        var nodes = dataview.getNodes();

        for (var i = 0; i < nodes.length; i++) {

            var node = nodes[i];

            // get node record
            var record = dataview.getRecord(node);

            // get color from record data
            var ActiveColor = '#98FB98'; //record.get('StatusColor');
            var dischargedColor = '#DC143C'; //record.get('StatusColor');

            var status=record.get('Status');

            // get all td elements
            var cells = Ext.get(node).query('td');

            // set bacground color to all row td elements
            for(var j = 0; j < cells.length; j++) {
                // Ext.Msg.alert('test', j);

                if(j===0 && status==='Active'){
                    Ext.fly(cells[j]).setStyle('background-color', ActiveColor);
                    Ext.fly(cells[j]).setStyle('font-color', 'black');
                }else if(j===0 && status!='Active'){
                    Ext.fly(cells[j]).setStyle('background-color', dischargedColor);
                    Ext.fly(cells[j]).setStyle('font-color', 'white');
                }

            }
        }
    }

});