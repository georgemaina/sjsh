/*
 * File: app/controller/Main.js
 * Date: Mon Sep 24 2018 16:08:00 GMT+0300 (E. Africa Standard Time)
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.2.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.2.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ProductCatalog.controller.Main', {
    extend: 'Ext.app.Controller',
    alias: 'controller.main',

    models: [
        'Categories',
        'InventoryItems',
        'SubCategories',
        'UnitsMeasure',
        'Locations',
        'GlAccounts',
        'ItemStatus',
        'PricesTypes',
        'Prices',
        'ItemLocations'
    ],
    stores: [
        'InventoryItemStore',
        'CategoryStore',
        'SubCategoryStore',
        'UnitsMeasureStore',
        'LocationsStore',
        'GlAccountsStore',
        'ItemStatusStore',
        'PricesTypeStore',
        'PricesStore',
        'ItemLocationStore'
    ],
    views: [
        'ItemsMaster',
        'ItemRegister',
        'ItemLocations',
        'PriceTypes',
        'PriceTypesCat'
    ],

    refs: {
        itemregister: {
            selector: 'itemregister',
            xtype: 'itemregister'
        },
        itemsmaster: 'itemsmaster',
        pricetypes: {
            selector: 'pricetypes',
            xtype: 'pricetypes'
        },
        itemlocations: {
            selector: 'itemlocations',
            xtype: 'itemlocations'
        },
        pricetypescat: {
            selector: 'pricetypescat',
            xtype: 'pricetypescat'
        }
    },

    init: function(application) {
        this.control({
            '#cmdNew':{
                click:this.openItemRegister
            },
            '#cmdSave':{
                click:this.saveItem
            },
            '#cmdSaveCategory':{
                click:this.saveCategory
            },
            '#cmdSearch':{
                click:this.searchItems
            },
            '#itemsMaster':{
                itemdblclick:this.openItemDetails
            },
            '#cmdClose':{
                click:this.Close
            },
            '#cmbCategory':{
                change:this.filterByCategory
            },
            '#cmdSearchPrices':{
                click:this.SearchPrices
            },
            '#cmdSearchItems':{
                click:this.searchItemsInLocation
            },
            '#cmdNewPrice':{
                click:this.openNewPrices
            },
            '#cmdAddLocationItems':{
                click:this.openAddLocationItems
            },
            '#cmbLocation':{
                change:this.searchByLocation
            },
            '#itemLocationsGrid':{
                itemdblclick:this.loadItemsLocationForm
            },
            '#ItemPrices':{
                itemdblclick:this.loadPriceTypesForm
            },
            '#cmbPriceTypes':{
                change:this.filterPricesByType
            },
            '#subCategory':{
                itemclick:this.loadSubCategory
            },
            '#categories':{
                itemclick:this.loadCategories
            },
            '#locations':{
                itemclick:this.loadLocations
            },
            '#cmdNewItem':{
                click:this.resetForm
            },
            "#storeusers":{
                itemclick:this.loadUsers
            },
            "#cmdRemove":{
                click:this.removeUserFromStore
            },
            '#txtSearchItem':{
                specialkey:this.getPressedKey
            },
            '#cmdDelete':{
                click:this.deleteItem
            },
            '#cmdExportToExcel':{
                click:this.exportToExel
            },
            '#cmdExportPrices':{
                click:this.exportPrices
            },
            '#cmdSavePriceCat':{
                click:this.savePriceCat
            }

        });
    },

    openItemRegister: function(button) {
        //alert("Test Register");
        var itemsRegister=Ext.create('ProductCatalog.view.ItemRegister', {});
        var registerWin=Ext.create('Ext.window.Window',{
                           title: 'Products Catalog',
                            resizable:false

                       });

        this.getItemregister().down('#formStatus').setValue('insert');
        // var theForm = itemsRegister.getForm();
        // var theField = theForm.findField('formStatus');
        // theField.setValue('insert');


        registerWin.add(itemsRegister);
        registerWin.show();


        // categoroyStore.load({
        //     params:{
        //         start:0,
        //         limit:200
        //     }
        // });
    },

    saveItem: function(button) {
        var form = button.up('form'); // get the form panel
        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function(form, action) {
                    Ext.Msg.alert('Success', action.result.msg);

                    var win=button.up('window');
                    win.destroy();

                },
                failure: function(form, action) {
                    Ext.Msg.alert('Failed',  action.result.msg);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    saveCategory: function(button) {
           var form = button.up('form'); // get the form panel
                if (form.isValid()) { // make sure the form contains valid data before submitting
                    form.submit({
                        success: function(form, action) {
                            Ext.Msg.alert('Success', 'item Saved Successfull');
                        },
                        failure: function(form, action) {
                            Ext.Msg.alert('Failed', 'Failed to save Item');
                        }
                    });
                } else { // display error alert if the data is invalid
                    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
                }
    },

    searchItems: function(button) {
         var itemsStore=Ext.data.StoreManager.lookup('InventoryItemStore');
                var searchParam=this.getItemsmaster().down('#txtSearchItem').getValue();
                itemsStore.load({
                    params: {
                        searchParam: searchParam
                    },
                    callback: function(records, operation, success) {
                        //var data1=this.getStore('DebtorDetails').getAt(0);
                        // myform.loadRecord(data1);

                    },
                    scope: this

                });
    },

    openItemDetails: function(gridpanel, record, item, index, e, options) {
               //alert("Test Register");
                var itemsRegister=Ext.create('ProductCatalog.view.ItemRegister', {});
                var registerWin=Ext.create('Ext.window.Window',{
                                   title: 'Products Catalog',
                                    resizable:false

                               });

                this.getItemregister().down('#formStatus').setValue('update');

                registerWin.add(itemsRegister);
                registerWin.show();

                itemsRegister.getForm().loadRecord(record);


    },

    Close: function(button) {
                var win = button.up('window');
                win.close();
    },

    filterByCategory: function(field, newValue, oldValue, eOpts) {
                var invItemStore=Ext.data.StoreManager.lookup('InventoryItemStore');
                invItemStore.load({
                    params: {
                        category: newValue
                    },
                    callback: function(records, operation, success) {
                        //var data1=this.getStore('DebtorDetails').getAt(0);
                        // myform.loadRecord(data1);

                    },
                    scope: this

                });

    },

    SearchPrices: function(button) {
        //   alert("Test Register");
        var pricesParam=this.getItemsmaster().down('#txtSearchPrices').getValue();

        var itemPrices=Ext.data.StoreManager.lookup('PricesStore');
        itemPrices.load({
            params: {
                searchParam:pricesParam
            },
            callback: function(records, operation, success) {
                //company="records[1].data.CompanyName";
            },
            scope: this

        });
    },

    searchItemsInLocation: function(button) {
        var itemsParam=this.getItemsmaster().down('#txtSearchItemlocs').getValue();
        var itemStore=Ext.data.StoreManager.lookup('ItemLocationStore');
        itemStore.load({
            params: {
                searchParam:itemsParam
            },
            callback: function(records, operation, success) {
                //company="records[1].data.CompanyName";
            },
            scope: this

        });
    },

    openNewPrices: function(button) {
        var priceTypes=Ext.create('ProductCatalog.view.PriceTypes', {});
        var priceTypesWin=Ext.create('Ext.window.Window',{
            title: 'Price Management Settings',
            resizable:false

        });

        this.getPricetypes().down('#formStatus').setValue('insert');

        priceTypesWin.add(priceTypes);
        priceTypesWin.show();


    },

    openAddLocationItems: function(button) {
                var itemsLoc=Ext.create('ProductCatalog.view.ItemLocations', {});
                var itemsLocWin=Ext.create('Ext.window.Window',{
                    title: 'Item Locations',
                    resizable:false

                });

                this.getItemlocations().down('#formStatus').setValue('insert');

                itemsLocWin.add(itemsLoc);
                itemsLocWin.show();
    },

    searchByLocation: function(field, newValue, oldValue, eOpts) {
        var invItemStore=Ext.data.StoreManager.lookup('ItemLocationStore');
        invItemStore.load({
            params: {
                location: newValue
            },
            callback: function(records, operation, success) {
                //var data1=this.getStore('DebtorDetails').getAt(0);
                // myform.loadRecord(data1);

            },
            scope: this

        });
    },

    loadItemsLocationForm: function(gridpanel, record, item, index, e, eOpts) {
        var itemsLoc=Ext.create('ProductCatalog.view.ItemLocations', {});
        var itemsLocWin=Ext.create('Ext.window.Window',{
            title: 'Item Locations',
            resizable:false

        });

        this.getItemlocations().down('#formStatus').setValue('update');

        itemsLocWin.add(itemsLoc);
        itemsLocWin.show();

        itemsLoc.getForm().loadRecord(record);
    },

    loadPriceTypesForm: function(gridpanel, record, item, index, e, eOpts) {
        var priceTypes=Ext.create('ProductCatalog.view.PriceTypes', {});
        var priceTypesWin=Ext.create('Ext.window.Window',{
            title: 'Price Management Settings',
            resizable:false

        });

        this.getPricetypes().down('#formStatus').setValue('update');

        priceTypesWin.add(priceTypes);
        priceTypesWin.show();

        priceTypes.getForm().loadRecord(record);
    },

    filterPricesByType: function(field, newValue, oldValue, eOpts) {
        var pricesStore=Ext.data.StoreManager.lookup('PricesStore');
        pricesStore.load({
            params: {
                priceType: newValue
            },
            callback: function(records, operation, success) {
                //var data1=this.getStore('DebtorDetails').getAt(0);
                // myform.loadRecord(data1);

            },
            scope: this

        });
    },

    loadSubCategory: function(gridpanel, record, item, index, e, options) {
        this.getItemsmaster().down('#CatID').setValue(record.get('CatID'));
        this.getItemsmaster().down('#itemCat').setValue(record.get('ItemCat'));
        this.getItemsmaster().down('#ParentID').setValue(record.get('ParentID'));
    },

    loadCategories: function(gridpanel, record, item, index, e, options) {
        this.getItemsmaster().down('#category').setValue(record.get('CatName'));
    },

    loadLocations: function(gridpanel, record, item, index, e, options) {
        this.getItemsmaster().down('#ID').setValue(record.get('ID'));
        this.getItemsmaster().down('#Description').setValue(record.get('Description'));
        this.getItemsmaster().down('#subStore').setValue(record.get('Store'));
        this.getItemsmaster().down('#mainStore').setValue(record.get('MainStore'));
        this.getItemsmaster().down('#dispensStore').setValue(record.get('DispensStore'));
    },

    resetForm: function(button) {
        button.up('form').reset();
    },

    loadUsers: function(gridpanel, record, item, index, e, options) {
        this.getItemsmaster().down('#UserName').setValue(record.get('UserName'));
        this.getItemsmaster().down('#StoreID').setValue(record.get('StoreID'));
    },

    removeUserFromStore: function(button) {
        var UserName=this.getItemsmaster().down('#UserName').getValue();
        var StoreID=this.getItemsmaster().down('#StoreID').getValue();
        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=removeUser',
            params:{
                UserName:UserName,
                StoreID:StoreID
            },
             success: function(response, opts) {
                 var obj = Ext.decode(response.responseText);
                 Ext.Msg.alert("Remove","User removed successfully"+obj);
                 console.dir(obj);
             },

             failure: function(response, opts) {
                 console.log('server-side failure with status code ' + response.status);
             }
         });
    },

    getPressedKey: function(field, e, options) {
        if (e.getKey() == e.ENTER) {
           this.searchItems();
        }
    },

    deleteItem: function(button) {
        var partcode=this.getPricetypes().down('#partcode').getValue();
        var pricetype=this.getPricetypes().down('#pricetype').getValue();

        Ext.Msg.show({
            title:'Delete Rates?',
            msg: 'Are you sure you want to delete Price',
            buttons: Ext.Msg.YESNOCANCEL,
            icon: Ext.Msg.QUESTION,
            fn: function(rec) {
                if (rec === "yes") {
                    Ext.Ajax.request({
                        url: 'data/getDataFunctions.php?task=deletePrices',
                        params: {
                            partcode:partcode,
                            pricetype:pricetype
                        },
                        waitMsg: 'Deleting Rates ...',
                        success: function(response){
                            var text = response.responseText;
                            Ext.Msg.alert('Delete','Price Successfully deleted');
                            var pricestore=Ext.data.StoreManager.lookup('PricesStore');
                            pricestore.load({});

                           var win = button.up('window');
                            win.close();

                        },
                        failure:function(response){
                            var resp = JSON.parseJSON(response);
                            Ext.Msg.alert('Error','There was a problem deleting the Prices, Contact System Administrator');
                        }
                    });

                }
            }
        });
    },

    exportToExel: function() {
        var searchParam=this.getItemsmaster().down('#txtSearchItem').getValue();
        var category=this.getItemsmaster().down('#cmbCategory').getValue();

        if(!category){
            var cat="";
        }else{
            var cat=category;
        }

        window.open('data/exportItems.php?searchParam='+searchParam+'&category='+cat,
                    "Items List","menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,scrollbars=yes,status=yes");

    },

    exportPrices: function() {
        var searchParam=this.getItemsmaster().down('#txtSearchPrices').getValue();
        var priceType=this.getItemsmaster().down('#cmbPriceTypes').getValue();

        if(!priceType){
            var ptype="";
        }else{
            var ptype=priceType;
        }


        window.open('data/exportPrices.php?searchParam='+searchParam+'&priceType='+ptype,
                    "Items List","menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,scrollbars=yes,status=yes");

    },

    savePriceCat: function(button) {
        var form = button.up('form'); // get the form panel
        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function(form, action) {
                    Ext.Msg.alert('Success', action.result.msg);

                    var win=button.up('window');
                    win.destroy();

                },
                failure: function(form, action) {
                    Ext.Msg.alert('Failed',  action.result.msg);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    }

});
