/*
 * File: app/controller/Main.js
 * Date: Wed Aug 26 2020 13:23:32 GMT+0300 (E. Africa Standard Time)
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Pharmacy.controller.Main', {
    extend: 'Ext.app.Controller',
    alias: 'controller.main',

    models: [
        'OrderStocksModel',
        'IssueDrugsModel',
        'ServiceOrdersModel',
        'ReturnOrdersModel',
        'StockLevelsModel',
        'StockCountsModel',
        'ItemsList',
        'TransactionNos',
        'Locations',
        'PendingPrescription',
        'PrescriptionItems',
        'PatientDetails',
        'InternalOrders',
        'StockAdjustments',
        'ValuationModel',
        'StockCategories',
        'OrderDetails'
    ],
    stores: [
        'OrderStocksStore',
        'ServiceOrderStore',
        'ReturnOrdersStore',
        'StockLevelsStore',
        'StockCountsStore',
        'DepartmentStore',
        'LocationsStore',
        'TransNoStore',
        'ItemslistStore',
        'PendingPrescriptions',
        'PrescriptionItemStore',
        'PatientDetailStore',
        'IssuedPrescriptions',
        'OrderDetailStore',
        'ValuationStore',
        'StockAdjustmentsStore'
    ],
    views: [
        'IssueDrugs',
        'StockCount',
        'MainView',
        'OrdersForm',
        'StockLevels',
        'ItemsList',
        'Prescriptions',
        'PendingPrescriptions',
        'PrescripionForm',
        'Dosage',
        'ReturnOrders',
        'DrugIssuesReports',
        'InternalOrdersReport',
        'ValuationsReport',
        'StockMovementsReport',
        'StockAdjustmentsReport'
    ],

    refs: {
        mainview: {
            selector: 'mainview',
            xtype: 'mainview'
        },
        orderstocks: {
            selector: 'orderstocks',
            xtype: 'orderstocks'
        },
        ordersform: 'ordersform',
        serviceorders: {
            selector: 'serviceorders',
            xtype: 'serviceorders'
        },
        stocklevels: {
            selector: 'stocklevels',
            xtype: 'stocklevels'
        },
        itemslist: {
            selector: 'itemslist',
            xtype: 'itemslist'
        },
        prescriptions: {
            selector: 'prescriptions',
            xtype: 'prescriptions'
        },
        prescripionform: {
            selector: 'prescripionform',
            xtype: 'prescripionform'
        },
        dosage: {
            selector: 'dosage',
            xtype: 'dosage'
        },
        issuedrugs: {
            selector: 'issuedrugs',
            xtype: 'issuedrugs'
        },
        returnorders: {
            selector: 'returnorders',
            xtype: 'returnorders'
        },
        drugissuesreports: {
            selector: 'drugsissuereports',
            xtype: 'drugissuesreports'
        },
        internalordersreport: {
            selector: 'internalordersreport',
            xtype: 'internalordersreport'
        },
        stockadjustmentsreport: {
            selector: 'stockadjustmentsreport',
            xtype: 'stockadjustmentsreport'
        },
        valuationsreport: {
            selector: 'valuationsreport',
            xtype: 'valuationsreport'
        },
        stockmovementsreport: {
            selector: 'stockmovementsreport',
            xtype: 'stockmovementsreport'
        }
    },

    init: function(application) {
        this.control({
            '#openItemsList':{
                click:this.opeItemsList
            },
            '#mnuOrders':{
                click:this.openOrdersForm
            },
            '#mnuServiceOrders':{
                click:this.openServiceOrders
            },
            '#mnuStockLevels':{
                click:this.openStockLevels
            },
            '#cmdGetItems':{
                click:this.openItemsList
            },
            '#txtSearchItems':{
                change:this.filterItems
            },
            '#orderType':{
                change:this.setOrderNo
            },
            '#itemsList':{
                itemdblclick:this.addSelectedItems
            },
            '#cmdSaveOrder':{
                click:this.saveOrder
            },
            '#department':{
                select:this.setDeptName
            },
            '#suppStore':{
                select:this.setSuppName
            },
            '#serviceStore':{
                select:this.selectPendingOrders
            },
            '#pendingOrders':{
                itemclick:this.loadDetailedOrder
            },
            '#serviceOrders':{
                click:this.serviceOrders
            },
            '#levelsGrid':{
                itemclick:this.loadLevelsForm
            },
            '#saveStockAdjustments':{
                click:this.saveStockAdjustments
            },
            '#mnuPrescriptions':{
                click:this.openPrescriptions
            },
            '#pendingPrescGrid':{
                itemclick:this.showPrescriptions
            },
            '#cmdDispensDrugs':{
                click:this.openDispensWindow
            },
            '#mnuIssue':{
                click:this.displayIssueForm
            },
            '#drugsList':{
                click:this.loadSelectedDrugs
            },
            '#cmdNewPrescription':{
                click:this.createPrescription
            },
            '#cmdRemoveDose':{
                click:this.removeDose
            },
            '#cmdPrescribe':{
                click:this.prescribe
            },
            '#days':{
                change:this.getTotalDosage
            },
            '#Pid':{
                blur:this.loadPatientDetails
            },
            '#store':{
                select:this.loadPrescriptionOrder
            },
            '#issueDrugs':{
                click:this.issueDrugs
            },
            '#mnuPatientReturns':{
                click:this.openReturnOrders
            },
            '#cmdReturnDrugs':{
                click:this.returnDrugs
            },
            '#prescGrid':{
                itemclick:this.loadDrugsToIssue
            },
            '#cmdPreviewPrescriptions':{
                click:this.previewDrugsToReturn
            },
            '#mnuIssuedDrugs':{
                click:this.previewIssuedDrugs
            },
            '#mnuInternalOrders':{
                click:this.previewInteralOrders
            },
            '#mnuStockAdjustments':{
                click:this.previewStockAdjustments
            },
            '#mnuStockMovements':{
                click:this.previewMovements
            },
            '#mnuStockValuation':{
                click:this.previewValuations
            },
            '#cmdPreviewValuation':{
                click:this.loadValuation
            },
            '#cancelOrder':{
                click:this.cancelOrder
            },
            '#issueType':{
                change:this.setIssueNo
            },
            '#prescParams':{
              //  specialkey:this.getPressedKey,
                change:this.filterPrescriptions
            }

        });
    },

    openOrdersForm: function() {
        var formsContainer=Ext.create("Pharmacy.view.FormsContainer",{});
        var ordersform = Ext.create('Pharmacy.view.OrdersForm', {});
        var centerContainer=this.getMainview().down("container[region=center]");
        centerContainer.removeAll();
        centerContainer.add(ordersform);
        //Ext.Msg.alert('Test',centerContainer.getItemId());


        // var ordersWindow=Ext.create('Ext.window.Window', {
        //     title: 'Internal Orders',
        //     resizable:false
        // });

        // ordersWindow.add(ordersform);
        // ordersWindow.show();

    },

    openServiceOrders: function() {
        var formsContainer=Ext.create("Pharmacy.view.ServiceOrders",{});
        var centerContainer=this.getMainview().down("container[region=center]");
        centerContainer.removeAll();
        centerContainer.add(formsContainer);
                //Ext.Msg.alert('Test',centerContainer.getItemId());
    },

    openStockLevels: function() {
        var stockLevels=Ext.create("Pharmacy.view.StockLevels",{});
        centerContainer=this.getMainview().down("container[region=center]");
        centerContainer.removeAll();
        centerContainer.add(stockLevels);
        //Ext.Msg.alert('Test',centerContainer.getItemId());
    },

    openItemsList: function(button) {
        var storeLoc=button.up("panel").down('#suppStore').getValue();
        var itemsList=Ext.create("Pharmacy.view.ItemsList",{});
        var ordersWindow=Ext.create('Ext.window.Window', {
            title: 'Items List',
            resizable:false
        });

        var itesmStore=Ext.data.StoreManager.lookup("ItemslistStore");
        itesmStore.load({
            params: {
                storeLoc:storeLoc
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });


        ordersWindow.add(itemsList);
        ordersWindow.show();
        itemsList.down('#sourceID').setValue('Orders');

    },

    filterItems: function(field, newValue, oldValue, eOpts) {
        var grid = field.up('grid');
        grid.store.clearFilter();
        if (newValue) {
            var matcher = new RegExp(Ext.String.escapeRegex(newValue), "i");
            grid.store.filter({
                filterFn: function(item) {
                    return matcher.test(item.get('item_description')) ||
                        matcher.test(item.get('partcode'));
                }
            });
        }
    },

    setOrderNo: function(field, newValue, oldValue, eOpts) {
        var orderNo=this.getOrderNo('4');

        this.getOrdersform().down('#orderDate').setValue(new Date());
    },

    getOrderNo: function(typeID) {
        var transNo=0;
        Ext.Ajax.request({
            url: '../../data/getDataFunctions.php?task=getTransNos',
            params: {
                typeID:typeID
            },
            success: function(response){
                var resp = Ext.JSON.decode(response.responseText);
                transNo=resp[0].transNo;
               if(typeID==4){
                   this.getOrdersform().down('#orderNo').setValue(transNo);
               }else if(typeID==3){
                   //Ext.Msg.alert('Test',transNo);
                   this.getIssuedrugs().down('#issuenumber').setValue(transNo);
               }

            },
            failure:function(response){
                var resp = JSON.parse(response);
                Ext.Msg.alert('Error',resp.Error);
             },
            scope: this
        });


        return transNo;
    },

    addSelectedItems: function(gridpanel, record, item, index, e, options) {
        var sourceID=this.getItemslist().down('#sourceID').getValue();
        if(sourceID=='Orders'){
            var store =Ext.data.StoreManager.lookup('ItemslistStore');
            var store1 =Ext.data.StoreManager.lookup('OrderStocksStore');
            store.remove(record);
            store1.add(record);
        }else{
            var counter=this.getPrescripionform().down("#counter").getValue();
            var dosage=Ext.create("Pharmacy.view.Dosage",{});
            dosage.itemId=record.get('partcode');


            dosage.down('#partCode').setValue(record.get('partcode'));
            dosage.down('#description').setValue(record.get('item_description'));
            dosage.down('#qty').setValue(record.get('qty'));
            dosage.down('#unitCost').setValue(record.get('unit_price'));
            dosage.down('#dose').setValue(1);
            dosage.down('#itemNumber').setValue(counter);

            var i=counter;
            dosage.down('#partCode').name='partCode'+ i;
            dosage.down('#description').name='description'+ i;
            dosage.down('#dose').name='dose'+ i ;
            dosage.down('#timesperday').name='timesperday'+ i;
            dosage.down('#days').name='days'+ i ;
            dosage.down('#total').name='total'+ i ;
            dosage.down('#comment').name='comment'+ i;


            newVar=parseInt(counter)+1;

            this.getPrescripionform().down('#dosageList').add(dosage);
            this.getPrescripionform().down("#counter").setValue(newVar);
        }

    },

    saveOrder: function(button) {
        var form = button.up('form').getForm(); // get the basic form
        var orderStore =Ext.data.StoreManager.lookup('OrderStocksStore');
        var ordersRecord = orderStore.getRange();

        var gridData = Array();

        Ext.each(ordersRecord, function (record) {
            gridData.push(record.data);
        });

        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                    gridData: Ext.util.JSON.encode(gridData)
                },
                success: function(form, action) {
                    Ext.Msg.alert("Orders","Internal Order Saved Successfully");
                    form.reset();
                    //orderStore.load({});
                    orderStore.removeAll();
                    orderStore.sync();

                },
                failure: function(form, action) {
                    Ext.Msg.alert('Failed', 'Could not save Order. Error='+action.result.errors.clientNo);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    setDeptName: function(field, record) {
        // Ext.Msg.alert('test',record.get('Description'));
        field.up('form').down('#deptName').setValue(record.get('Description'));
    },

    setSuppName: function(field, record) {
        field.up('form').down('#suppName').setValue(record.get('Description'));
    },

    selectPendingOrders: function(field, record) {
        var pendingOrders =Ext.data.StoreManager.lookup('ServiceOrderStore');
        pendingOrders.load({
            params:{
                store:record.get('ID')
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });
    },

    loadDetailedOrder: function(gridpanel, record, item, index, e, eOpts) {
        var pendingOrders =Ext.data.StoreManager.lookup('OrderDetailStore');
        pendingOrders.load({
            params:{
                store:record.get('sup_storeid'),
                req_no:record.get('req_no')
            },
            callback: function(records, operation, success) {
                gridpanel.up('form').loadRecord(record);
            },
            scope: this
        });



    },

    serviceOrders: function(button) {
        var form = button.up('form').getForm(); // get the basic form
        var orderStore =Ext.data.StoreManager.lookup('OrderDetailStore');
        var ordersRecord = orderStore.getRange();

        var gridData = Array();

        Ext.each(ordersRecord, function (record) {
            gridData.push(record.data);
        });

        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                    gridData: Ext.util.JSON.encode(gridData)
                },
                success: function(form, action) {
                    Ext.Msg.alert("Orders","Order Serviced Successfully");
                    form.reset();
                    orderStore.load({});

                },
                failure: function(form, action) {
                    Ext.Msg.alert('Failed', 'Could not Service Order. Error='+action.result.errors.clientNo);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    loadLevelsForm: function(gridpanel, record, item, index, e, eOpts) {
        gridpanel.up('form').loadRecord(record);
    },

    saveStockAdjustments: function(button) {
        var form = button.up('form').getForm(); // get the basic form
        var levelsStore =Ext.data.StoreManager.lookup('StockLevelsStore');

        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function(form, action) {
                    Ext.Msg.alert("Orders","Stock level Updated Successfully");
                    form.reset();
                    levelsStore.load({});

                },
                failure: function(form, action) {
                    Ext.Msg.alert('Failed', 'Could not Stock levels. Error='+action.result.errors.clientNo);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    openPrescriptions: function() {
        //Ext.Msg.alert('Test','Test');
        var presc=Ext.create("Pharmacy.view.Prescriptions",{});
        var centerContainer=this.getMainview().down("container[region=center]");
        centerContainer.removeAll();
        centerContainer.add(presc);

        var pendingPresc =Ext.data.StoreManager.lookup('PendingPrescriptions');
        pendingPresc.load({});
    },

    showPrescriptions: function(gridpanel, record, item, index, e, eOpts) {
        // Ext.Msg.alert('Selections','You selected '+ record.get('Names'));
        gridpanel.up('panel').up('panel').down('#Pid').setValue(record.get('Pid'));
        gridpanel.up('panel').up('panel').down('#Names').setValue(record.get('Names'));
        gridpanel.up('panel').up('panel').down('#EncounterNo').setValue(record.get('EncounterNo'));
        gridpanel.up('panel').up('panel').down('#PrescribeDate').setValue(record.get('PrescribeDate'));
        var prescDetails=gridpanel.up('panel').up('panel').down('#prescDetails');

        //**************************************************************************
        //Populate the prescription items
        //**************************************************************************

         var precStore=Ext.data.StoreManager.lookup("PrescriptionItemStore");

                var billSum=0;
                var data = [];
                precStore.load({
                    params: {
                        pid:record.get('Pid'),
                        encNr:record.get('EncounterNo'),
                        prescSource:"Prescription"
                    },
                    callback: function(records, operation, success) {
                        var tpl=new Ext.XTemplate(
                            '<Table id=pharmDetails>',
                            '<tr><td id=titles colspan=6>Prescriptions</td></tr>',
                            '<tr><th>Prescription No</th><th>Date</th><th>Description</th>',
                            ' <th>Dosage</th><th>Times Per Day</th><th>Days</th></tr>',
                            '<tpl for=".">',
                            '<tr><td>{Nr}</td><td>{PrescribeDate}</td><td>{Description}</td>',
                            '<td>{Dosage}</td><td>{TimesPerDay}</td><td>{Days}</td></tr>',
                            '<tr><td id=notes>Notes</td><td colspan=3 id=notes>{Notes}</td><td>Prescribed By:{Prescriber}</td><td><button id=edit>Edit</button><button id=delete>Delete</button></td></tr>',
                            '</tpl>',
                            '</table>'
                          );

                            precStore.each(function(record) {
                                data.push(record.getData());
                                //billSum += record.get('Total');
                            });

                            tpl.overwrite(prescDetails.body,data);
                    },
                    scope: this
                });

    },

    openDispensWindow: function(button) {
        var issueform = Ext.create('Pharmacy.view.IssueDrugs', {});
        var prescWindow=Ext.create('Ext.window.Window', {
             title: 'Prescribe Drugs'
         });

        prescWindow.add(issueform);
        prescWindow.show();


    },

    displayIssueForm: function() {
        var issueform = Ext.create('Pharmacy.view.IssueDrugs', {});
        var centerContainer=this.getMainview().down("container[region=center]");
        centerContainer.removeAll();
        centerContainer.add(issueform);
    },

    loadSelectedDrugs: function(gridpanel, record, item, index, e, eOpts) {
        Ext.Msg.alert('Test',record.get('Pid'));
    },

    createPrescription: function(button) {

        //Ext.Msg.alert('Test',button.up('panel').getItemId());

        var prescForm=Ext.create("Pharmacy.view.PrescripionForm",{});
        var prescWindow=Ext.create('Ext.window.Window', {
            title: 'Prescribe Drugs',
            resizable:false
        });

        prescWindow.add(prescForm);
        prescWindow.show();
        prescForm.down('#sourceID').setValue('Prescription');
        prescForm.down('#Pid').setValue(button.up('fieldset').down('#Pid').getValue());
        prescForm.down('#Names').setValue(button.up('fieldset').down('#Names').getValue());
        prescForm.down('#EncounterNo').setValue(button.up('fieldset').down('#EncounterNo').getValue());
        prescForm.down('#PrescribeDate').setValue(button.up('fieldset').down('#PrescribeDate').getValue());
    },

    removeDose: function(button) {
        button.up('fieldset').destroy();
    },

    prescribe: function(button) {
        var form = button.up('panel').getForm(); // get the basic form
        var encNr= this.getPrescriptions().down('#EncounterNo').getValue();

        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                    encNr:encNr
                },
                success: function (form, action) {
                    Ext.Msg.alert('Thank you!', 'Saved Prescription Successfully.');
                    button.up('form').getForm().reset();
                    button.up('window').close();



                },
                failure: function (form, action) {
                    var jsonResp = Ext.decode(action.response.responseText);

                    Ext.Msg.alert('Failed', 'There was a problem with the Prescription. \n Error=' + jsonResp.error);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    getTotalDosage: function(field, newValue, oldValue, eOpts) {
        var dose=field.up('fieldset').down('#dose').getValue();
        var timesperday=field.up('fieldset').down('#timesperday').getValue();
        var days=field.up('fieldset').down('#days').getValue();
        var total=parseInt(dose)*parseInt(timesperday)*parseInt(days);

        field.up('fieldset').down('#total').setValue(total);

    },

    loadPatientDetails: function(field, e, eOpts) {
        var patientStore=Ext.data.StoreManager.lookup("PatientDetailStore");

        patientStore.load({
            params: {
                pid:field.getValue()
            },
            callback: function(records, operation, success) {
               // var resp = Ext.JSON.decode(response.responseText);
                names= records[0].data.Names;
                prescriber=records[0].data.Prescriber;
                prescdate=records[0].data.PrescribeDate;
                age=records[0].data.Age;
                payMode=records[0].data.Payment;
                encNr=records[0].data.EncounterNo;

                this.getIssuedrugs().down('#Names').setValue(names);
                this.getIssuedrugs().down('#doctor').setValue(prescriber);
                this.getIssuedrugs().down('#prescribeDate').setValue(prescdate);
                this.getIssuedrugs().down('#age').setValue(age);
                this.getIssuedrugs().down('#payMode').setValue(payMode);
                this.getIssuedrugs().down('#encNr').setValue(encNr);

            },
            scope: this
        });

    },

    loadPrescriptionOrder: function(combo, record, eOpts) {
        //Ext.Msg.alert('Test',record.get('ID'));
        var prescStore=Ext.data.StoreManager.lookup("PrescriptionItemStore");
        var encNr=this.getIssuedrugs().down('#encNr').getValue();

        prescStore.load({
            params: {
                encNr:encNr,
                store:record.get('ID'),
                prescSource:'Prescription'
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });
    },

    issueDrugs: function(button) {
        var form = button.up('form').getForm(); // get the basic form
        var orderStore =Ext.data.StoreManager.lookup('PrescriptionItemStore');
        var ordersRecord = orderStore.getRange();

        var gridData = Array();

        Ext.each(ordersRecord, function (record) {
            gridData.push(record.data);
        });

        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                    gridData: Ext.util.JSON.encode(gridData)
                },
                success: function(form, action) {
                    Ext.Msg.alert("Prescription Order","Drugs Issued Successfully");
                    form.reset();
                    orderStore.removeAll();
                    orderStore.sync();

                    var peddingPrescStore=Ext.data.StoreManager.lookup("PendingPrescriptions");
                    peddingPrescStore.load({});


                },
                failure: function(form, action) {
                    Ext.Msg.alert('Failed', 'Could not save Order. Error='+action.result.errors.clientNo);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    openReturnOrders: function() {
        var returnform = Ext.create('Pharmacy.view.ReturnOrders', {});
        var centerContainer=this.getMainview().down("container[region=center]");
        centerContainer.removeAll();
        centerContainer.add(returnform);
    },

    returnDrugs: function(button) {
        //Ext.Msg.alert('test','test');
        var returnsStore=Ext.data.StoreManager.lookup('ReturnOrdersStore');
        //var ordersRecord = returnsStore.getRange();
        var requestparam=this.getReturnorders().down('#returnsparam').getValue();
        var sourcePresc=this.getReturnorders().down('#prescSource').getValue();
        var gridData = Array();

        var updatedRecords = this.getReturnorders().getStore().getUpdatedRecords();
        params=[];
        Ext.each(updatedRecords,function(record){
         params.push(record.data);
        });


        returnsStore.proxy.extraParams = {
            selectedCount:params.length,
            pid:this.getReturnorders().down('#returnsparam').getValue()

        };

        returnsStore.sync({
            success: function(response){
                var resp = Ext.JSON.decode(response.responseText);
                Ext.Msg.alert('Update','Successfully returned drugs');
               // var returnsStore=Ext.data.StoreManager.lookup('BillStore');
                returnsStore.load({});

            },
            failure:function(response){
                var resp = JSON.parse(response.responseText);
                Ext.Msg.alert('Error','Error Updating Bill');

            }
        });

    },

    loadDrugsToIssue: function(gridpanel, record, item, index, e, options) {
        this.getIssuedrugs().down('#Pid').setValue(record.get('Pid'));
        var patientStore=Ext.data.StoreManager.lookup("PatientDetailStore");

        patientStore.load({
            params: {
                pid:record.get('Pid'),
                encNr:record.get('EncounterNo'),
                nr:record.get('Nr')
            },
            callback: function(records, operation, success) {
               // var resp = Ext.JSON.decode(response.responseText);
                names= records[0].data.Names;
                prescriber=records[0].data.Prescriber;
                prescdate=records[0].data.PrescribeDate;
                age=records[0].data.Age;
                payMode=records[0].data.Payment;
                encNr=records[0].data.EncounterNo;
                receiptNo=records[0].data.ReceiptNo;
                receiptAmount=records[0].data.ReceiptAmount;

                this.getIssuedrugs().down('#Names').setValue(names);
                this.getIssuedrugs().down('#doctor').setValue(prescriber);
                this.getIssuedrugs().down('#prescribeDate').setValue(prescdate);
                this.getIssuedrugs().down('#age').setValue(age);
                this.getIssuedrugs().down('#payMode').setValue(payMode);
                this.getIssuedrugs().down('#encNr').setValue(encNr);
                this.getIssuedrugs().down('#receiptNo').setValue(receiptNo);
                this.getIssuedrugs().down('#receiptAmount').setValue(receiptAmount);

            },
            scope: this
        });

        var prescStore=Ext.data.StoreManager.lookup("PrescriptionItemStore");
        prescStore.load({
            params: {
                encNr:record.get('EncounterNo'),
                store:'Dispens',
                prescSource:'Prescription'
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });
    },

    previewDrugsToReturn: function(button) {
        var returnsStore =Ext.data.StoreManager.lookup('ReturnOrdersStore');
        var requestparam=this.getReturnorders().down('#returnsparam').getValue();
        var sourcePresc=this.getReturnorders().down('#prescSource').getValue();
        var storeLoc=this.getReturnorders().down('#storeLoc').getValue();
        returnsStore.load({
            params: {
                requestparam:requestparam,
                sourcePresc:sourcePresc,
                storeLoc:storeLoc
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });
    },

    previewIssuedDrugs: function() {
        var formsContainer=Ext.create("Pharmacy.view.DrugIssuesReports",{});
        var centerContainer=this.getMainview().down("container[region=center]");
        centerContainer.removeAll();
        centerContainer.add(formsContainer);
    },

    previewInteralOrders: function() {
                var formsContainer=Ext.create("Pharmacy.view.InternalOrdersReport",{});
                var centerContainer=this.getMainview().down("container[region=center]");
                centerContainer.removeAll();
                centerContainer.add(formsContainer);
    },

    previewStockAdjustments: function() {
        var formsContainer=Ext.create("Pharmacy.view.StockAdjustmentsReport",{});
        var centerContainer=this.getMainview().down("container[region=center]");
        centerContainer.removeAll();
        centerContainer.add(formsContainer);
    },

    onLaunch: function(application) {

    },

    previewMovements: function() {
        var formsContainer=Ext.create("Pharmacy.view.StockMovementsReport",{});
        var centerContainer=this.getMainview().down("container[region=center]");
        centerContainer.removeAll();
        centerContainer.add(formsContainer);
    },

    previewValuations: function() {
        var formsContainer=Ext.create("Pharmacy.view.ValuationsReport",{});
        var centerContainer=this.getMainview().down("container[region=center]");
        centerContainer.removeAll();
        centerContainer.add(formsContainer);
    },

    loadValuation: function(button) {
        Ext.Msg.alert('Test','test');
        var valuationStore =Ext.data.StoreManager.lookup('ValuationStore');
        var category=this.getDrugissuesreports().down('#itemCategory').getValue();

        valuationStore.load({
            params: {
                category:category
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });
    },

    cancelOrder: function(button) {
               var reqno=button.up('panel').down('#requisionnumber').getValue();
                Ext.Ajax.request({
                    url: '../../data/getDataFunctions.php?task=cancelOrder',
                    params: {
                        reqno:reqno
                    },
                    success: function(response){
                        var resp = Ext.JSON.decode(response.responseText);
                        Ext.Msg.alert('Order','Order No '+reqno+' Cancelled successfully');
                    },
                    failure:function(response){
                        var resp = JSON.parse(response);
                        Ext.Msg.alert('Error',resp.Error);
                     },
                    scope: this
                });

    },

    setIssueNo: function(field, newValue, oldValue, eOpts) {
         var orderNo=this.getOrderNo('3');

         this.getIssuedrugs().down('#issuenumber').setValue(orderNo);
    },

    getPressedKey: function(field, e, options) {
            if (e.getKey() == e.ENTER && field.getItemId()==='prescParams') {
             //   Ext.Msg.alert('Test',field.getItemId());
               this.searchPrescription();
            }else  if (e.getKey() == e.ENTER && field.getItemId()==='searchParam') {
             //   Ext.Msg.alert('Test',field.getItemId());
                this.searchItems();
            }else  if (e.getKey() == e.ENTER && field.getItemId()==='txtSearchReceipt') {
             //   Ext.Msg.alert('Test',field.getItemId());
                this.searchReceipt();
            }
    },

    searchPrescription: function() {
        var searchParam=this.getBills().down('#prescParams').getValue();
        var admSource=this.getBills().down('#admSource').getValue();
        var prescStore =Ext.data.StoreManager.lookup('PendingPrescriptions');

        if(admSource=='1'){
            encounterClass=1;
        }else{
            encounterClass=2;
        }


        prescStore.load({
            params: {
                prescParams: prescParams,
                encounterClass:encounterClass
            },
            callback: function(records, operation, success) {

            },
            scope: this

        });

    },

    filterPrescriptions: function(field, newValue, oldValue, eOpts) {
        var grid = field.up('grid');
        grid.store.clearFilter();
        if (newValue) {
            var matcher = new RegExp(Ext.String.escapeRegex(newValue), "i");
            grid.store.filter({
                filterFn: function(item) {
                    return matcher.test(item.get('Names')) ||
                        matcher.test(item.get('Pid'));
                }
            });
        }
    }

});
