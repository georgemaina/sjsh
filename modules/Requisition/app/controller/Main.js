/*
 * File: app/controller/Main.js
 *
 * This file was generated by Sencha Architect version 4.1.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.2.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.2.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Requisition.controller.Main', {
    extend: 'Ext.app.Controller',
    alias: 'controller.main',

    models: [
        'OrdersTemplate',
        'RequisitionModel',
        'ItemsListModel',
        'RequisitionsModel',
        'OrdersModel',
        'Suppliers'
    ],
    stores: [
        'OrdersTemplateStore',
        'ItemsListStore',
        'RequisitionStore',
        'RequisitionsStore',
        'OrdersStore',
        'SupplierStore'
    ],
    views: [
        'OrdersTemplate',
        'MainView',
        'ItemsList',
        'PendingRequisitions',
        'RequisitionForm',
        'OrdersList',
        'ProcessOrder'
    ],

    refs: {
        orderstemplate: {
            selector: 'orderstemplate',
            xtype: 'orderstemplate'
        },
        itemslist: {
            selector: 'itemslist',
            xtype: 'itemslist'
        },
        requisitionform: {
            selector: 'requisitionform',
            xtype: 'requisitionform'
        },
        pendingrequisitions: {
            selector: 'pendingrequisitions',
            xtype: 'pendingrequisitions'
        },
        orderslist: {
            selector: 'orderslist',
            xtype: 'orderslist'
        },
        processorder: {
            selector: 'processorder',
            xtype: 'processorder'
        }
    },

    init: function(application) {
        this.control({
            '#cmdSearchItems':{
                click:this.searchItems
            },
            '#cmdUpdateUsage':{
                click:this.updateUsage
            },
            '#cmdUpdateLevels':{
                click:this.updateLevels
            },
            '#cmdCompleteOrder':{
                click:this.completeOrders
            },
            '#cmdGetproductslist':{
                click:this.openItemsList
            },
            '#itemList':{
                itemdblclick:this.sendSelectedItem
            },
            '#cmdSaveOrder':{
                click:this.saveOrder
            },
            '#printOrder':{
                click:this.printOrder
            },
            '#cmdApprove':{
                click:this.approveOrder
            },
            '#completeOrder':{
                click:this.completeOrder
            },
            '#cmdUpdateOrder':{
                click:this.updateQtyOrder
            },
            '#cmdExport':{
                click:this.exportOrderTemp
            },
            '#cmdCompleteOrders':{
                click:this.openCompleteOrderForm
            },
            '#cmdClose':{
                click:this.closeWindow
            },
            '#cmdGenerateLPO':{
                click:this.generateLPO
            },
            '#requisitionform':{
                click:this.loadRequisition
            }//,
            //'#totals':{
            //    blur:this.getTotals
            //}
        });
    },

    searchItems: function(button) {
        var stparams=this.getOrderstemplate().down('#txtSearchParams').getValue();

        var stOrders=Ext.data.StoreManager.lookup('OrdersTemplateStore');

        stOrders.load({
            params:{
                stparams:stparams
            }
        });
    },

    updateUsage: function(button) {
        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=updateUsage',
            success: function(response){
                 var stOrders=Ext.data.StoreManager.lookup('OrdersTemplateStore');
                 stOrders.load({});

            }
        });

    },

    updateLevels: function(button) {
                Ext.Ajax.request({
                     url: 'data/getDataFunctions.php?task=updateLevels',
                    success: function(response){
                          var stOrders=Ext.data.StoreManager.lookup('OrdersTemplateStore');
                          stOrders.load({});
                    },
                    failure: function(response, opts) {
                        console.log('server-side failure with status code ' + response.status);
                        Ext.Msg.alert("Error:","Uable to update Levels");
                    }
                });

    },

    completeOrders: function(button) {
        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=completeOrders',
            success: function(response){
                var stOrders=Ext.data.StoreManager.lookup('OrdersTemplateStore');
                stOrders.load({});
            },
            failure: function(response, opts) {
                console.log('server-side failure with status code ' + response.status);
                Ext.Msg.alert("Error:","Uable to make Order Completion");
            }
        });

    },

    openItemsList: function(button) {
        var itemsList= Ext.create('Requisition.view.ItemsList', {});
        var itemsWin=Ext.create('Ext.window.Window', {
            title: 'Items List',
            resizable:true,
            animCollapse: true,
            collapsible: true,
            tools: [
            {
                xtype: 'tool',
                type: 'minimize'
            },
            {
                xtype: 'tool',
                type: 'maximize'
            }
            ]
        });

        itemsWin.add(itemsList);
        itemsWin.show();
    },

    sendSelectedItem: function(gridpanel, record, item, index, e, eOpts) {
        //Ext.Msg.alert('Test',record.get('StockID'));

        var store =Ext.data.StoreManager.lookup('ItemsListStore');
        var store1 =Ext.data.StoreManager.lookup('RequisitionStore');
        store.remove(record);
        store1.add(record);
    },

    saveOrder: function(button) {
        var reqStore =Ext.data.StoreManager.lookup('RequisitionStore');
        var orderRecord = reqStore.getRange();

        var reqNo=this.getRequisitionform().down('#requisitionNo').getValue();
        var reqDate=this.getRequisitionform().down('#requisitionDate').getValue();

        var gridData = Array();

        Ext.each(orderRecord, function (record) {
            gridData.push(record.data);
        });

        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=saveOrders',
            params: {
                reqDate:reqDate,
                reqNo:reqNo,
                gridData: Ext.util.JSON.encode(gridData)
            },
            success: function(response, opts) {
                 var obj = Ext.decode(response.responseText);
                 console.dir(obj);
                 Ext.Msg.alert("Success:","Successfully saved requisition");
                 reqStore.removeAll();
                button.up('form').getForm().reset();
             },

             failure: function(response, opts) {
                 console.log('server-side failure with status code ' + response.status);
                 Ext.Msg.alert("Error:","Uable to save the Requisition");
             }

        });
    },

    printOrder: function(button) {
        var grid = button.up('grid');
        if (grid.getSelectionModel().hasSelection()) {
            var row = grid.getSelectionModel().getSelection()[0];

            //         Ext.Msg.alert("Button clicked", "Hey! " + row.get('RequisitionNo'));

            reqNo=row.get('RequisitionNo');

            window.open('reports/Requisition.php?reqNo='+reqNo,"Requisition Order",
                        "menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,scrollbars=yes,status=yes");
        }

    },

    approveOrder: function(button) {
        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=approveOrder',
            params: {
            reqNo:reqNo
            },
            success: function(response, opts) {
               Ext.Msg.alert("Success:","Approved Requisition Successfully");
            },

            failure: function(response, opts) {
                console.log('server-side failure with status code ' + response.status);
                Ext.Msg.alert("Error:","Uable to Approve the Requisition");
            }
        });
    },

    completeOrder: function(button) {
        var grid = button.up('grid');
        if (grid.getSelectionModel().hasSelection()) {
            var row = grid.getSelectionModel().getSelection()[0];
            reqNo=row.get('RequisitionNo');

            var processOrder=Ext.create('Requisition.view.ProcessOrder', {});
            var processWin=Ext.create('Ext.window.Window', {
                title: 'Precess Requisition and Create LPO',
                resizable:false
            });

            processWin.add(processOrder);
            processWin.show();
        }
    },

    updateOrder: function(button) {
        var ordersTempStore =Ext.data.StoreManager.lookup('OrdersTemplateStore');
        var orderRecord = ordersTempStore.getRange();


        var gridData = Array();

        Ext.each(orderRecord, function (record) {
            gridData.push(record.data);
        });

        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=updateOrdersTemp',
            params: {
                gridData: Ext.util.JSON.encode(gridData)
            },
            success: function(response, opts) {
                 var obj = Ext.decode(response.responseText);
                 console.dir(obj);
                 reqStore.removeAll();
                 button.up('form').getForm().reset();
             },

             failure: function(response, opts) {
                 console.log('server-side failure with status code ' + response.status);
                 Ext.Msg.alert("Error:","Uable to save the Requisition");
             }
        });
    },

    updateQtyOrder: function(button) {
        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=updateQtyToOrder',
                success: function(response, opts) {
                Ext.Msg.alert("Success","Successfully updated Quantities");
            },

            failure: function(response, opts) {
                console.log('server-side failure with status code ' + response.status);
                Ext.Msg.alert("Error:","Uable to save the Requisition");
            }
        });
    },

    exportOrderTemp: function(button) {

                window.open('reports/OrdersTemplate.php',"Orders Template","menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,\n\
                scrollbars=yes,status=yes");
    },

    openCompleteOrderForm: function(button) {
        var completeOrder=Ext.create('Requisition.view.CompleteRequisition', {});
        var processWin=Ext.create('Ext.window.Window', {
            title: 'Complete Order and Generate LPO',
            resizable:false
        });

        processWin.add(completeOrder);
        processWin.show();
    },

    closeWindow: function(button) {
              var win=button.up('window');
              win.destroy();
    },

    generateLPO: function(button) {
        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=generateLPO',
            success: function(response, opts) {
                Ext.Msg.alert("Success","Successfully generated the LPO, Go to accounting and Print the LPO");
            },

            failure: function(response, opts) {
                console.log('server-side failure with status code ' + response.status);
                Ext.Msg.alert("Error:","Uable to generate LPO");
            }
        });
    },

    loadRequisition: function(id,cb) {
        var transNo,transDate;

        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=GetTransNos',
            params:{
                transType:"7"
            },
            success: function(response, opts) {
                var obj = Ext.decode(response.responseText);
                transNo=obj.transNo;
                transDate='24-04-2017';
                Ext.getCmp('requisitionNo').setValue(transNo);
                Ext.getCmp('requisitionDate').setValue(new Date());
            },
            failure: function(response, opts) {
                console.log('server-side failure with status code ' + response.status);
                Ext.Msg.alert("Error:","Uable to generate LPO");
            },
            scope : this

        });
        //this.getRequisitionform().down('#requisitionNo').setValue("transNo "+transNo);
    },

    getTotals: function(field, e , eOpts) {
        var grid=this.getRequisitionform().down('#itemslist');
        //var totals=this.getColumnTotal(grid,6);

        var total=0;
        // grid.getStore().each(function(record) {
        //    total+=record.get('Price');
        // });

        for (var i = 0; i < grid.getStore().data.length; i++) {
            var record = grid.getStore().getAt(i);
                total+=record.data.Total;
        }


        this.getRequisitionform().down('#totals').setValue(total);
    },

    getColumnTotal: function(grid, columnIndex) {
                var total = 0,
                    col,
                    colArray = grid.view.getColumnData();

                for (var rowIndex = 0, rowCount = grid.store.getCount(); rowIndex < rowCount; rowIndex++) {
                    var row = grid.store.getAt(rowIndex);
                    col = colArray[columnIndex];
                    total += row.get(col.name);
                }
                return total;
    }

});
