/*
 * File: app/controller/Main.js
 * Date: Mon Aug 16 2021 14:09:45 GMT+0300 (E. Africa Standard Time)
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Debtors.controller.Main', {
    extend: 'Ext.app.Controller',

    models: [
        'customerInfo',
        'customerJobs',
        'ReceiptsAllocate',
        'debtorsList',
        'debtorDetails',
        'invoices',
        'customerBill',
        'allocations',
        'receipts',
        'billNumbers',
        'customersList',
        'CustomerType',
        'debtorTransactions',
        'DebtorJobs',
        'Memberslist',
        'DebtorBalances'
    ],
    stores: [
        'CustomerInfo',
        'CustomerJobs',
        'ReceiptsAllocateSt',
        'DebtorsList',
        'DebtorDetails',
        'CustomerBill',
        'InvoicesList',
        'Allocations',
        'ReceiptsList',
        'BillNumbers',
        'CustomersList',
        'CustomerType',
        'DebtorTransactions',
        'CustomerTrans',
        'InvoiceAllocateSt',
        'MembersListStore',
        'DebtorBalancesStore'
    ],
    views: [
        'CustomersList',
        'DebtorsList',
        'CustomerBill',
        'CustomerInformation',
        'BillingCustInfo',
        'CustomerBillList',
        'InvoicesList',
        'Allocations',
        'ReceiptsList',
        'NewMembersForm',
        'MyViewport',
        'DebtorRegisterForm',
        'DebtorRegisterWindow',
        'CustomerInfo',
        'AllocateReceipts',
        'DebtorMembers',
        'DebtorsWindow',
        'DebtorBalances',
        'RemoveMembersForm',
        'GuarantorsForm',
        'InsuranceCredits',
        'InsuranceDebits'
    ],

    refs: {
        viewport: 'viewport',
        customerbill: {
            selector: 'customerbill',
            xtype: 'customerbill'
        },
        customerslist: {
            selector: 'customerslist',
            xtype: 'customerslist'
        },
        allocatereceipts: {
            selector: 'allocatereceipts',
            xtype: 'allocatereceipts'
        },
        customerslist: {
            selector: 'customerslist',
            xtype: 'customerslist'
        },
        debtorslist: {
            selector: 'debtorslist',
            xtype: 'debtorslist'
        },
        debtorDetails: {
            selector: 'debtorDetails',
            xtype: 'debtorDetails'
        },
        customerinfo: {
            selector: 'customerinfo',
            xtype: 'customerinfo'
        },
        invoiceslist: {
            selector: 'invoiceslist',
            xtype: 'invoiceslist'
        },
        allocatereceipts: {
            selector: 'allocatereceipts',
            xtype: 'allocatereceipts'
        },
        receiptslist: {
            selector: 'receiptslist',
            xtype: 'receiptslist'
        },
        debtorregisterform: {
            selector: 'debtorregisterform',
            xtype: 'debtorregisterform'
        },
        newmembersform: {
            selector: 'newmembersform',
            xtype: 'newmembersform'
        },
        debtormembers: {
            selector: 'debtormembers',
            xtype: 'debtormembers'
        },
        debtorswindow: {
            selector: 'debtorswindow',
            xtype: 'debtorswindow'
        },
        debtorbalances: {
            selector: 'debtorbalances',
            xtype: 'debtorbalances'
        },
        addmembersform: 'addmembersform',
        removemembersform: {
            selector: 'removemembersform',
            xtype: 'removemembersform'
        },
        guarantorsform: {
            selector: 'guarantorsform',
            xtype: 'guarantorsform'
        },
        customerinfo: {
            selector: 'customerinfo',
            xtype: 'customerinfo'
        },
        insurancecredits: {
            selector: 'insurancecredits',
            xtype: 'insurancecredits'
        },
        insurancedebits: {
            selector: 'insurancedebits',
            xtype: 'insurancedebits'
        }
    },

    init: function(application) {
        this.control({
            'debtorDetails button[id=refresh]': {
                click: this.refreshCustomerTrans
            },
            '#cmdSaveDebtor': {
                click: this.onRegisterSave
            },
            "debtorDetails menuitem[id=debtorslist]": {
                click: this.opendebtorslist
            },
            "#mnuAllocateReceipts": {
                click: this.openAllocateReceipts
            },
            "debtorDetails menuitem[id=invoices]": {
                click: this.openInvoicesList
            },
            "debtorDetails menuitem[id=receipts]": {
                click: this.openReceiptsList
            },
            "debtordetailsgrid button[id=cmdPreview]": {
                click: this.loadDebtorTrans
            },
            "#cmdSaveMembers": {
                click: this.onMembersSave
            },
            "debtorDetails menuitem[id=customers]": {
                click: this.openCustomersList
            },
            "customerslist button[id=custFind]": {
                click: this.findCustomer
            },
            "#cmdNewCustomer1": {
                click: this.createNewCustomer
            },
            "#editCustomer": {
                click: this.openNewCustomer2
            },
            "#mnuDebtorsRegister": {
                click: this.createNewCustomer
            },
            "#mnuDebtorsList":{
                click: this.opendebtorslist
            },
            "#mnuDebtorMembers":{
                click: this.openDebtorMembers
            },
            "#mnuInvoices":{
                click: this.openInvoicesList
            },
            "#mnuReceipts":{
                click: this.openReceiptsList
            },
            "#mnuTransactions":{
                click: this.openTransactions
            },
            "#debtorslist":{
                itemdblclick: this.openNewCustomer2
            },
            "#debtorBalances":{
                itemclick: this.getDebtorsInfo
            },
            "customerinfo button[id=cmdNewCustomer]":{
                click: this.createNewCustomer
            },
            "customerinfo button[id=cmdEditCustomer]":{
                click: this.getDebtorDetails
            },
            '#mnuStatement':{
                click: this.openStatement
            },
            '#printInvoices':{
                click: this.printInvoices
            },
            '#cmdNewCustomer':{
                click:this.createNewCustomer
            },
            '#cmdAddMembers':{
                click:this.addMembers
            },
            '#cmdPreviewTrans':{
                click:this.previewTransactions
            },
            '#cmdPreviewInvoices':{
                click:this.previewInvoices
            },
            '#cmdPreviewReceipts':{
                click:this.previewReceipts
            },
            '#allocateReceiptsGrid':{
                itemclick:this.getIndividualInvoices
            },
            '#allocateInvoicesGrid':{
                selectionchange:this.getInvoiceTotals
            },
            '#cmdAllocateReceipt':{
                click:this.allocateReceipts
            },
            '#cmdClose':{
                click:this.closeWindow
            },
            '#cmdAddMembers2':{
                click:this.addMembers
            },
            '#cmdCloseMembersform':{
                click:this.closeMembersForm
            },
            '#mdebtorslist':{
                itemclick:this.loadMembersList
            },
            '#cmdSearchDebtors':{
                click:this.searchDebtors
            },
            '#debtorCategory':{
                select:this.searchDebtors
            },
            '#cmdDebtorsSearch':{
                click:this.searchDebtorsList
            },
            '#mnuDebtorBalances':{
                click:this.openDebtorBalances
            },
            '#cmdSearchDebtorBalances':{
                click:this.searchDebtorBalances
            },
            '#debtorBalanceCategory':{
                select:this.searchDebtorBalances
            },
            '#cmdPrint':{
                click:this.printRegister
            },
            '#cmdNewCustomer2':{
                click:this.openNewCustomer3
            },
            '#cbCategory':{
                select:this.onComboboxChange
            },
            '#txtSearchParam':{
                change:this.searchDebtorTrans
            },
            '#mnuExportToExcel':{
                click:this.exportStatementToExcel
            },
            '#cmdDiagnosisReport':{
                click:this.openDiagnosisReport
            },
            '#cmdRemoveMember':{
                click:this.openRemoveMember
            },
            '#cmdRemoveMember2':{
                click:this.openRemoveMember
            },
            '#cmdRemoveMembers':{
                click:this.removeMembers
            },
            '#mnuGuarantorsForm':{
                click:this.openGuarantorsForm
            },
            '#cmdPrintGuarantors':{
                click:this.printGarantorsForm
            },
            '#cmdSaveGuarantors':{
                click:this.saveGuarantor
            },
            '#txtDebtorsParams':{
                 specialkey:this.getPressedKey
            },
            '#txtDebtorsParams2':{
                specialkey:this.getPressedKey2
            },
            '#cmdSearch':{
                click:this.searchDebtorslist
            },
            '#mnuCredits':{
                click:this.openCredits
            },
            '#cmdSaveCredit':{
                click:this.saveCredits
            },
            '#mnuDebits':{
                click:this.openDebits
            },
            '#mnuAllocations':{
                click:this.openDebtorAllocations
            },
            '#cmdSearchInvoices':{
                click:this.searchInvoices
            }

        });
    },

    showMain: function() {
        mainGrid=Ext.create("Debtors.view.DebtorDetails",{});
        westContainer=this.getViewport().down("container[region=west]");
        westContainer.add(mainGrid);

        customerInfo=Ext.create("Debtors.view.CustomerInfo",{});
        centerContainer=this.getViewport().down("container[region=center]");
        centerContainer.add(customerInfo);


        //westContainer=this.getViewport().down("container[region=center]");
        //westContainer.add(infoGrid);


    },

    onDebtorDetailsLoad: function() {
        var debtorDetails=Ext.data.StoreManager.lookup('DebtorTransactions');
        debtorDetails.load({
        });
    },

    loadDebtorInfo: function(gridpanel, record, item, index, e, options) {

        var debtorDetails=Ext.data.StoreManager.lookup('DebtorDetails');
        debtorDetails.load({
            params: {
                accno: record.get('accno')
            },
            callback: function(records, operation, success) {
                var data1=this.getStore('DebtorDetails').getAt(0);
                customerinfo.loadRecord(record);

            },
            scope: this

        });

        var DebtorTransactions=Ext.data.StoreManager.lookup('DebtorTransactions');
        DebtorTransactions.load({
            params: {
                accno: record.get('accno')
            },
            callback: function(records, operation, success) {


            },
            scope: this

        });

    },

    onRegisterSave: function(button, e, options) {
        //alert('test');
        var form = button.up('panel').getForm(); // get the basic form
        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function(form, action) {
                    Ext.Msg.alert('Success', 'Saved new debtor successfully.');

                    var win = button.up('debtorregister');
                    win.destroy();

                    var debtorsList=Ext.data.StoreManager.lookup('DebtorsList');
                    debtorsList.load({});

                },
                failure: function(form, action) {
                    Ext.Msg.alert('Failed', 'Could not save debtor. Error='+action.result.errors.clientNo);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }

    },

    opendebtorslist: function(button, e, option) {
        //alert('test');


        debtorsList = Ext.create('Debtors.view.DebtorsList', {});
        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll(); //removing existing views.
        center_container.add(debtorsList);


        var debtorsListStore=Ext.data.StoreManager.lookup('DebtorsList');
        debtorsListStore.load({});
    },

    refreshCustomerTrans: function() {
        var customerTransStore=Ext.data.StoreManager.lookup('CustomerTrans');
        customerTransStore.load({
        });
    },

    openInvoicesList: function() {

        //alert('test');

        invoicesList = Ext.create('Debtors.view.InvoicesList', {});
        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll(); //removing existing views.
        center_container.add(invoicesList);

        var strParam=this.getInvoiceslist().down('#txtInvoices').getValue();
        var startDate=this.getInvoiceslist().down('#startDate').getValue();
        var endDate=this.getInvoiceslist().down('#endDate').getValue();
        var accno=this.getInvoiceslist().down('#accNo').getValue();

        var invoicesStore=Ext.data.StoreManager.lookup('InvoicesList');
        invoicesStore.load({
            params: {
                rptType: 'invoices',
                accno:accno,
                irParam:strParam,
                startDate:startDate,
                endDate:endDate

            },
            callback: function(records, operation, success) {


            },
            scope: this
        });
    },

    openReceiptsList: function() {
        //alert('test 2');

        receiptsList = Ext.create('Debtors.view.ReceiptsList', {});
        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll(); //removing existing views.
        center_container.add(receiptsList);


        var receiptsStore=Ext.data.StoreManager.lookup('ReceiptsList');

        var strParam=this.getReceiptslist().down('#txtReceipts').getValue();
        var startDate=this.getReceiptslist().down('#startDate').getValue();
        var endDate=this.getReceiptslist().down('#endDate').getValue();
        var accno=this.getReceiptslist().down('#accNo').getValue();

        receiptsStore.load({
            params: {
                rptType: 'receipts',
                accno:accno,
                irParam:strParam,
                startDate:startDate,
                endDate:endDate
            },
            callback: function(records, operation, success) {


            },
            scope: this
        });
    },

    loadDebtorTrans: function(tabpanel, record, item, index, e, options) {
        var accountNo=Ext.getCmp('accountNo').getValue();
        //alert('Test'+accountNo);


        var strDate1=Ext.Date.format(new Date(Ext.getCmp('startDate').getValue()), 'Y-m-d');
        var strDate2=Ext.Date.format(new Date(Ext.getCmp('endDate').getValue()), 'Y-m-d');

        var debtorTrans=Ext.data.StoreManager.lookup('DebtorTransactions');
        debtorTrans.load({
            params: {
                accno: accountNo,//record.get('accno'),
                startDate:strDate1,
                endDate:strDate2
            },
            callback: function(records, operation, success) {
                // var data1=this.getStore('DebtorTransactions').getAt(0);
                //myform.loadRecord(data1);

            },
            scope: this

        });
    },

    onMembersSave: function(button, e, options) {

        var form = button.up('form').getForm(); // get the basic form
        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function(form, action) {
                    Ext.Msg.alert('Success', 'Saved new Member successfully.');

                    var win = button.up('window');
                    win.removeAll();
                    win.destroy();
                },
                failure: function(form, action) {
                    Ext.Msg.alert('Failed', 'Could not save Member. Error='+action.result.errors.clientNo);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }

    },

    openCustomersList: function() {

        //alert('test');

        customersList = Ext.create('Debtors.view.CustomersList', {});
        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll(); //removing existing views.
        center_container.add(customersList);


        var customersList=Ext.data.StoreManager.lookup('CustomersList');
        customersList.load({
            param:{
                start:0,
                limit:100
            }
        });
    },

    openAllocations: function() {

        allocations = Ext.create('Debtors.view.Allocations', {});
        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll(); //removing existing views.
        center_container.add(allocations);


        var allocationsStore=Ext.data.StoreManager.lookup('Allocations');
        allocationsStore.load({
            param:{
                start:0,
                limit:100
            }
        });
    },

    findCustomer: function(field,options) {
        //alert('Test');
        var pid=Ext.getCmp('txtParam').getValue();
        var cutomerslist=Ext.data.StoreManager.lookup('CustomersList');
        cutomerslist.load({
            params: {
                param1: pid
            },
            callback: function(records, operation, success) {


            },
            scope: this
        });
    },

    openAllocateReceipts: function() {
        //var frmAllocaterctWindow=Ext.create('Ext.window.Window', {
        // title: 'Allocate Receipts',
        // resizable:false
        //});

        var allocWindow=Ext.create('Ext.window.Window',{
            title: 'Allocate Receipts',
            resizable:false
        });
        var frmAllocaterct = Ext.create('Debtors.view.AllocateReceipts', {});

        allocWindow.add(frmAllocaterct);
        allocWindow.show();

        var allocatedReceipts=Ext.data.StoreManager.lookup('ReceiptsAllocateSt');
        allocatedReceipts.load({});

    },

    createNewCustomer: function() {
        registerform = Ext.create('Debtors.view.DebtorRegisterForm', {});
                var registerformWindow=Ext.create('Ext.window.Window', {
                    title: 'Debtors Register',
                    resizable:false
                });

                registerformWindow.add(registerform);
                registerformWindow.show();

        registerform.getForm().findField("formStatus").setValue('insert');
    },

    openNewCustomer2: function(gridpanel, record, item, index, e, options) {

        //var registerform=Ext.create('Debtors.view.DebtorRegisterForm', {});

        //center_container = this.getViewport().down('container[region=center]');
        //center_container.removeAll(); //removing existing views.
        //center_container.add(registerform);


        //registerform.getForm().loadRecord(record);

        //registerform.query('textfield[name="formStatus"]')[0].setValue('update');

        var registerform = Ext.create('Debtors.view.DebtorRegisterForm', {});
        var registerformWindow=Ext.create('Ext.window.Window', {
                    title: 'Debtors Register',
                    resizable:false
                });

                registerformWindow.add(registerform);
                registerformWindow.show();
        registerform.getForm().loadRecord(record);

        registerform.getForm().findField("formStatus").setValue('update');

    },

    openTransactions: function() {
        customerinfo=Ext.create("Debtors.view.CustomerInfo",{});
        //infoGrid=Ext.create("Debtors.view.DebtorDetailsGrid",{});
        centerContainer=this.getViewport().down("container[region=center]");

        centerContainer.removeAll(); //removing existing views.

        centerContainer.add(customerinfo);
    },

    getDebtorsInfo: function(gridpanel, record, item, index, e, options) {

        if(!Ext.ClassManager.isCreated('Debtors.View.MyForm') && !Ext.ClassManager.isCreated('Debtors.View.DebtorDetailsGrid')){
            this.openTransactions();
        }


        var debtorDetails=Ext.data.StoreManager.lookup('DebtorDetails');
        debtorDetails.load({
            params: {
                accno: record.get('accno')
            },
            callback: function(records, operation, success) {
                var data1=this.getStore('DebtorDetails').getAt(0);
                customerinfo.loadRecord(data1);

            },
            scope: this

        });

        var accountNo=record.get('accno'); //Ext.getCmp('accountNo').getValue();



        //var strDate1=Ext.Date.format(new Date(this.getDebtordetailsgrid.down('#startDate').getValue()), 'Y-m-d');
        //var strDate2=Ext.Date.format(new Date(this.getDebtordetailsgrid.down('#endDate').getValue()), 'Y-m-d');

              //  alert('Test '+accountNo);

        var debtorTrans=Ext.data.StoreManager.lookup('DebtorTransactions');
        debtorTrans.load({
            params: {
                accno:record.get('accno')//,
                //startDate:strDate1,
                //endDate:strDate2
            },
            callback: function(records, operation, success) {

                // var data1=this.getStore('DebtorTransactions').getAt(0);
                //myform.loadRecord(data1);

            },
            scope: this

        });
    },

    getDebtorDetails: function(record) {
        var debtorDetails=Ext.data.StoreManager.lookup('DebtorsList');


        var accountNo=this.getCustomerinfo().down('#Accno').getValue();
        //alert(accountNo);
        debtorDetails.load({
            params: {
                accno:accountNo
            },
            callback: function(records, operation, success) {
                var data1=this.getStore('DebtorsList').getAt(0);
                //  myform.loadRecord(data1);

                var registerform=Ext.create('Debtors.view.DebtorRegisterForm', {});

                center_container = this.getViewport().down('container[region=center]');
                center_container.removeAll(); //removing existing views.
                center_container.add(registerform);


                registerform.getForm().loadRecord(data1);

                registerform.query('textfield[name="formStatus"]')[0].setValue('update');

            },
            scope: this

        });

        //alert('Test'+accountNo);

    },

    openStatement: function() {
            var accountNo = this.getCustomerinfo().down("#Accno").value;

            var strDate1=Ext.Date.format(new Date(this.getCustomerinfo().down('#startDate').getValue()), 'Y-m-d');
            var strDate2=Ext.Date.format(new Date(this.getCustomerinfo().down('#endDate').getValue()), 'Y-m-d');


            //Ext.Msg.alert('Test '+strDate1);
            window.open('reports/statement_pdf.php?acc1='+accountNo+'&strDate1='+strDate1+'&strDate2='+strDate2+'&rptType=statement',"Reports",
            "menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,scrollbars=yes,status=yes");

    },

    printInvoices: function() {
            var accountNo = this.getCustomerinfo().down("#Accno").value;

            var strDate1=Ext.Date.format(new Date(this.getCustomerinfo().down('#startDate').getValue()), 'Y-m-d');
            var strDate2=Ext.Date.format(new Date(this.getCustomerinfo().down('#endDate').getValue()), 'Y-m-d');

           // alert(accountNo);
            window.open('reports/detailedInvoices.php?accNo='+accountNo+'&strDate1='+strDate1+'&strDate2='+strDate2+'&single=true',"Reports",
            "menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,scrollbars=yes,status=yes");


    },

    addMembers: function(button) {

        //Ext.Msg.alert('test',button.getItemId());

        var membersWin=Ext.create('Ext.window.Window', {
            title: 'New Members Form',
            resizable:false
        });

        var membersForm = Ext.create('Debtors.view.NewMembersForm', {});

        membersWin.add(membersForm);

        if(button.getItemId()==='cmdAddMembers'){
            var accountNo = this.getCustomerinfo().down("#Accno").value;
            membersForm.getForm().findField("txtAccno").setValue(accountNo);

        }else if(button.getItemId()==='cmdAddMembers2'){
            var grid=this.getDebtorslist();
            var srecord=grid.getSelectionModel().getSelection();
            Ext.iterate(srecord,function(record,index){
                // selectedRowIndexes.push(grid.getStore().indexOf(record));
                if(grid.getSelectionModel().hasSelection()){
                    var accountNo=record.get('accno');
                    membersForm.getForm().findField("txtAccno").setValue(accountNo);
                }else{
                    Ext.Msg.alert('Error','Please Select a debtor in the list');
                }
            });
        }


        //Ext.getCmp("txtAccno").setValue(accountNo);

        membersWin.show();
    },

    previewTransactions: function(button) {

        var showAllocated=this.getCustomerinfo().down('#showAllocated').getValue();
        var accountNo=this.getCustomerinfo().down('#Accno').getValue();

        var strDate1=Ext.Date.format(new Date(this.getCustomerinfo().down('#startDate').getValue()), 'Y-m-d');
        var strDate2=Ext.Date.format(new Date(this.getCustomerinfo().down('#endDate').getValue()), 'Y-m-d');

        //alert('Test '+strDate1);

        var debtorTrans=Ext.data.StoreManager.lookup('DebtorTransactions');
        debtorTrans.load({
            params: {
                accno:accountNo,
                startDate:strDate1,
                endDate:strDate2,
                showAllocated:showAllocated
            },
            callback: function(records, operation, success) {

                // var data1=this.getStore('DebtorTransactions').getAt(0);
                //myform.loadRecord(data1);

            },
            scope: this

        });
    },

    previewInvoices: function(button) {

        var strParam=this.getInvoiceslist().down('#txtInvoices').getValue();
        var startDate=this.getInvoiceslist().down('#startDate').getValue();
        var endDate=this.getInvoiceslist().down('#endDate').getValue();
        var accno=this.getInvoiceslist().down('#accNo').getValue();
        //var rptType="invoices";

        var invoicesStore=Ext.data.StoreManager.lookup('InvoicesList');
        invoicesStore.load({
            params: {
                rptType: 'invoices',
                accno:accno,
                irParam:strParam,
                startDate:startDate,
                endDate:endDate

            },
            callback: function(records, operation, success) {


            },
            scope: this
        });
    },

    previewReceipts: function(button) {
        var strParam=this.getReceiptslist().down('#txtReceipts').getValue();
        var startDate=this.getReceiptslist().down('#startDate').getValue();
        var endDate=this.getReceiptslist().down('#endDate').getValue();
        var accno=this.getReceiptslist().down('#accNo').getValue();
        //var rptType="receipts";

        //alert('test test');
        var receiptsStore=Ext.data.StoreManager.lookup('ReceiptsList');
        receiptsStore.load({
            params: {
                rptType: 'receipts',
                accno:accno,
                irParam:strParam,
                startDate:startDate,
                endDate:endDate

            },
            callback: function(records, operation, success) {


            },
            scope: this
        });
    },

    getIndividualInvoices: function(gridpanel, record, item, index, e, options) {
        var allocateInvStore=Ext.data.StoreManager.lookup('InvoiceAllocateSt');
        allocateInvStore.load({
            params: {
                accno: record.get('accno')
            }
        });

        this.getAllocatereceipts().down('#totalReceipt').setValue(record.get('InvoiceAmount'));
        this.getAllocatereceipts().down('#accno').setValue(record.get('accno'));


    },

    getInvoiceTotals: function(gridpanel, record, index, eOpts) {
        this.getAllocatereceipts().down('#totals').setValue('0');
        var grid=this.getAllocatereceipts().down('#allocateInvoicesGrid');

        var srecords=grid.getSelectionModel().getSelection();
        var receipt=this.getAllocatereceipts().down('#totalReceipt').getValue();
        var receipt=this.getAllocatereceipts().down('#totalReceipt').getValue();

        var selectedRowIndexes = [];
        var total=0;
        Ext.iterate(srecords,function(record,index){

             selectedRowIndexes.push(grid.getStore().indexOf(record));
            if(grid.getSelectionModel().hasSelection()){
                var amount=parseInt(record.get('InvoiceAmount'),10);
                //record.set("AllocatedAmount",amount);
                var  alAmount=parseInt(record.get('AllocatedAmount'),10);
                if(alAmount>0 && alAmount!==''){
                    allocAmount=alAmount;
                }else{
                    allocAmount=amount;
                }
                total=parseInt(total,10)+allocAmount;
            }else{
                total=parseInt(total,10)+0;
            }



        });

        this.getAllocatereceipts().down('#totals').setValue(total);

        if(total>receipt){
                  Ext.Msg.alert("Allocate Error","The Value Allocated cannot be greater than the Receipt value");
            }



    },

    allocateReceipts: function(button) {
        var invoiceTotals=this.getAllocatereceipts().down('#totals').getValue();
        var receipt=this.getAllocatereceipts().down('#totalReceipt').getValue();

        if(parseInt(invoiceTotals,10)>parseInt(receipt)){
            Ext.Msg.alert("Allocate Error","The Value Allocated cannot be greater than the Receipt value<br> Please Select Invoices with lesser Amounts "+invoiceTotals+'>'+receipt);
        }else{
            var grid=this.getAllocatereceipts().down('#allocateInvoicesGrid');

            var srecords=grid.getSelectionModel().getSelection();



            var selectedRowIndexes = [];
            var transNos=[];
            Ext.iterate(srecords,function(record,index){
                selectedRowIndexes.push(grid.getStore().indexOf(record));
                invoiceAmount=record.get('InvoiceAmount');
                allocAmount=record.get('AllocatedAmount');
                receiptTransNo=record.get('transno');
                billNumber=record.get('bill_number');
                pid=record.get('pid');

                if(allocAmount>0 && allocAmount!==''){
                    allocatedAmount=allocAmount;
                }else{
                    allocatedAmount=invoiceAmount;
                }

                transNos.push(record.get('transno')+'-'+invoiceAmount+'-'+allocatedAmount+'-'+billNumber);
                //transNos.push=parseInt(record.get('transNo'),10);

            });


            var grid2=this.getAllocatereceipts().down('#allocateReceiptsGrid');

            var srecords2=grid2.getSelectionModel().getSelection();

            var receiptTransNo;
            var invoiceAmount;
            Ext.iterate(srecords2,function(record,index){
                receiptTransNo=record.get('transno');
                receiptAmount=record.get('InvoiceAmount');
                // pid=record.get('pid');
                // billNumber=record.get('bill_number');
            });


            Ext.Msg.show({
                title:"Allocate Receipts",
                msg:"Are you sure you want to allocate receipts to the above invoices "+transNos,
                buttons:Ext.Msg.YESNO,
                icon:Ext.Msg.QUESTION,
                fn:function(rec){
                    if(rec==='yes'){
                        //Ext.Msg.alert('test','Test test test test');
                        Ext.Ajax.request({
                            url:"data/getDataFunctions.php?task=allocateReceipts&transNos="+transNos,
                            params:{
                                receiptTransNo:receiptTransNo,
                                receiptAmount:receiptAmount,
                                billNumber:billNumber,
                                pid:pid
                            }
                        });
                    }
                }
            });

            // Ext.Msg.alert("Success","The Values have been Allocated Successfully");
        }
    },

    closeWindow: function(button) {
        var win = button.up('window');
        win.close();
    },

    closeMembersForm: function(button) {
        var win2 = button.up('newmemberswindow');
        win2.close();
    },

    openDebtorMembers: function() {

        debtorMembers = Ext.create('Debtors.view.DebtorMembers', {});
        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll(); //removing existing views.
        center_container.add(debtorMembers);


        var debtorsListStore=Ext.data.StoreManager.lookup('DebtorsList');
        debtorsListStore.load({});
    },

    loadMembersList: function(gridpanel, record, item, index, e, options) {
        var stmemberslist=Ext.data.StoreManager.lookup('MembersListStore');
        stmemberslist.load({
            params: {
                accno: record.get('accno')
            },
            callback: function(records, operation, success) {

            },
            scope: this

        });
    },

    searchDebtors: function(button) {
        var stparams=this.getDebtormembers().down('#txtDebtorsParams').getValue();
        var stCategory=this.getDebtormembers().down('#debtorCategory').getValue();
        //Ext.Msg.alert('test',stparams);

        var stDebtorsList=Ext.data.StoreManager.lookup('DebtorsList');

        stDebtorsList.load({
            params:{
                accno:stparams,
                category:stCategory
            }
        });
    },

    searchDebtorsList: function(button) {
        var stparams=this.getDebtorslist().down('#txtDebtorsParams').getValue();
        var stCategory=this.getDebtorslist().down('#debtorCategory').getValue();
        //Ext.Msg.alert('test',stparams);

        var stDebtorsList=Ext.data.StoreManager.lookup('DebtorsList');

        stDebtorsList.load({
            params:{
                accno:stparams,
                category:stCategory
            }
        });
    },

    openDebtorBalances: function() {

        //alert('test');

        debtorBalances = Ext.create('Debtors.view.DebtorBalances', {});
        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll(); //removing existing views.
        center_container.add(debtorBalances);


        var debtorBalancesList=Ext.data.StoreManager.lookup('DebtorBalancesStore');
        debtorBalancesList.load({
            param:{
                start:0,
                limit:100
            }
        });
    },

    searchDebtorBalances: function(button) {
        //Ext.Msg.alert('test',stparams);

        var stparams=this.getDebtorbalances().down('#txtDebtorsParams').getValue();
        var stCategory=this.getDebtorbalances().down('#debtorBalanceCategory').getValue();

        var stDebtorBalances=Ext.data.StoreManager.lookup('DebtorBalancesStore');

        stDebtorBalances.load({
            params:{
                searchParam:stparams,
                category:stCategory
            }
        });
    },

    printRegister: function(button) {

            var accountNo = this.getDebtorregisterform().down("#accno").value;
            // Ext.Msg.alert('test','Test '+accountNo);
            //var strDate1=Ext.Date.format(new Date(this.getCustomerinfo().down('#startDate').getValue()), 'Y-m-d');
            //var strDate2=Ext.Date.format(new Date(this.getCustomerinfo().down('#endDate').getValue()), 'Y-m-d');


            //Ext.Msg.alert('Test '+strDate1);
            window.open('reports/register_pdf.php?acc1='+accountNo+'&rptType=statement',"Reports",
            "menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,scrollbars=yes,status=yes");

    },

    openNewCustomer3: function(button) {
        var custWin=Ext.create('Ext.window.Window',{
            title:"test",
            width:100,
            height:100

        });
        custWin.show();
    },

    onComboboxChange: function(field, newValue, oldValue, eOpts) {
          var debtorjobs=Ext.data.StoreManager.lookup('CustomerTrans');
                debtorjobs.load({
                    params: {
                        category: field.value
                    },
                    callback: function(records, operation, success) {


                    },
                    scope: this

                });
    },

    searchDebtorTrans: function(component, newValue, oldValue, eOpts) {
                  var debtorjobs=Ext.data.StoreManager.lookup('CustomerTrans');
                        debtorjobs.load({
                            params: {
                                category: component.value
                            },
                            callback: function(records, operation, success) {


                            },
                            scope: this

                        });
    },

    exportStatementToExcel: function(button) {
        var accountNo=this.getCustomerinfo().down('#Accno').getValue();
        var strDate1=Ext.Date.format(new Date(this.getCustomerinfo().down('#startDate').getValue()), 'Y-m-d');
        var strDate2=Ext.Date.format(new Date(this.getCustomerinfo().down('#endDate').getValue()), 'Y-m-d');

        window.open('reports/exportDebtorStatement.php?accNo='+accountNo+'&strDate1='+strDate1+'&strDate2='+strDate2+'&single=false',"Reports",
                    "menubar=yes,toolbar=yes,width=500,height=300,location=yes,resizable=no,scrollbars=yes,status=yes");

    },

    openDiagnosisReport: function(button) {
        var accountNo=this.getCustomerinfo().down('#Accno').getValue();
        var strDate1=Ext.Date.format(new Date(this.getCustomerinfo().down('#startDate').getValue()), 'Y-m-d');
        var strDate2=Ext.Date.format(new Date(this.getCustomerinfo().down('#endDate').getValue()), 'Y-m-d');

        window.open('reports/diagnosisReportPDF.php?accNo='+accountNo+'&strDate1='+strDate1+'&strDate2='+strDate2+'&single=false',"Reports",
                    "menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,scrollbars=yes,status=yes");

    },

    openRemoveMember: function(button) {
        // Ext.Msg.alert('Error','Please Select a debtor in the list');

        var membersWin=Ext.create('Ext.window.Window', {
            title: 'Remove Members Form',
            resizable:false
        });

        var membersForm = Ext.create('Debtors.view.RemoveMembersForm', {});

        membersWin.add(membersForm);

        if(button.getItemId()==='cmdRemoveMember'){
            var accountNo = this.getCustomerinfo().down("#Accno").value;
            membersForm.getForm().findField("txtAccno").setValue(accountNo);

        }else if(button.getItemId()==='cmdRemoveMember2'){
            var grid=this.getDebtorslist();
            var srecord=grid.getSelectionModel().getSelection();
            Ext.iterate(srecord,function(record,index){

                // selectedRowIndexes.push(grid.getStore().indexOf(record));
                if(grid.getSelectionModel().hasSelection()){
                    var accountNo=record.get('accno');
                    membersForm.getForm().findField("txtAccno").setValue(accountNo);
                }else{
                    Ext.Msg.alert('Error','Please Select a debtor in the list');
                }



            });
        }

        membersWin.show();
    },

    removeMembers: function(button) {
        var form = button.up('form').getForm(); // get the basic form
        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function(form, action) {
                    Ext.Msg.alert('Success', 'Saved new Member successfully.');

                    var win = button.up('membersWin');
                    win.removeAll();
                    win.destroy();
                },
                failure: function(form, action) {
                    Ext.Msg.alert('Failed', 'Could not Remove Member. Error='+action.result.errors.clientNo);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }

    },

    openGuarantorsForm: function() {
        var guarantorsform = Ext.create('Debtors.view.GuarantorsForm', {});
        var guarantorsWindow=Ext.create('Ext.window.Window', {
            title: 'DEBTORS GUARANTORS FORM',
            resizable:false
        });

        guarantorsWindow.add(guarantorsform);
        guarantorsWindow.show();
        //registerform.getForm().loadRecord(record);

        var accName=this.getCustomerinfo().down('#accName').getValue();
        guarantorsform.getForm().findField('accName').setValue(accName);

        var address=this.getCustomerinfo().down('#accAddress').getValue();
        guarantorsform.getForm().findField('address').setValue(address);

        var phone=this.getCustomerinfo().down('#accPhone').getValue();
        guarantorsform.getForm().findField('phone').setValue(phone);

        var grid=this.getCustomerinfo().down('#customerTransactions');

        var srecords=grid.getSelectionModel().getSelection();

        var selectedRowIndexes = [];
        var transNos=[];
        Ext.iterate(srecords,function(record,index){
            guarantorsform.getForm().findField('pid').setValue(record.get('pid'));
            guarantorsform.getForm().findField('pnames').setValue(record.get('pnames'));
            guarantorsform.getForm().findField('amount').setValue(record.get('amount'));
            guarantorsform.getForm().findField('billNumber').setValue(record.get('billNumber'));

            guarantorsform.getForm().findField('accNo').setValue(record.get('accno'));




        });

    },

    printGarantorsForm: function(button) {
        var accountNo=this.getCustomerinfo().down('#Accno').getValue();
        var pid=this.getGuarantorsform().down('#pid').getValue();

        window.open('reports/guarantorsFormPDF.php?accNo='+accountNo+'&pid='+pid+'&single=false',"Reports",
                    "menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,scrollbars=yes,status=yes");

    },

    saveGuarantor: function(button) {
        var form = button.up('form').getForm(); // get the basic form
        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function(form, action) {
                    Ext.Msg.alert('Success', 'Saved new Guarantor successfully.');

                    //var win = button.up('newmemberswindow');
                    //win.removeAll();
                    //win.destroy();
                },
                failure: function(form, action) {
                    Ext.Msg.alert('Failed', 'Could not save Guarantor. Error='+action.result.errors.clientNo);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }

    },

    getPressedKey: function(field, e, options) {
        this.searchDebtors();
    },

    getPressedKey2: function(field, e, options) {
        this.searchDebtorsList2();
    },

    searchDebtorsList2: function() {
        var stparams=this.getDebtorslist().down('#txtDebtorsParams2').getValue();
        var stCategory=this.getDebtorslist().down('#debtorCategory2').getValue();
        //Ext.Msg.alert('test',stparams);

        var stDebtorsList=Ext.data.StoreManager.lookup('DebtorsList');

        stDebtorsList.load({
            params:{
                accno:stparams,
                category:stCategory
            }
        });
    },

    searchDebtorslist: function(button) {
        var stparams=this.getDebtorslist().down('#txtDebtorsParams2').getValue();
        var stCategory=this.getDebtorslist().down('#debtorCategory2').getValue();
        //Ext.Msg.alert('test',stparams);

        var stDebtorsList=Ext.data.StoreManager.lookup('DebtorsList');

        stDebtorsList.load({
            params:{
                accno:stparams,
                category:stCategory
            }
        });
    },

    openCredits: function() {
        //Ext.Msg.alert('Test','Test Test');

        var creditsWin=Ext.create('Ext.window.Window', {
            title: 'Miscellaneous Credits',
            resizable:false
        });

        var insuranceCredits = Ext.create('Debtors.view.InsuranceCredits', {});

        creditsWin.add(insuranceCredits);

        var grid=this.getDebtorslist();
            var srecord=grid.getSelectionModel().getSelection();
            Ext.iterate(srecord,function(record,index){
                if(grid.getSelectionModel().hasSelection()){
                    var accountNo=record.get('accno');
                    var pid=record.get('pid');
                    var pnames=record.get('pnames');
                    insuranceCredits.getForm().findField("accno").setValue(accountNo);
                    insuranceCredits.getForm().findField("pid").setValue(pid);
                    insuranceCredits.getForm().findField("pnames").setValue(pnames);
                }else{
                    Ext.Msg.alert('Error','Please Select a debtor in the list');
                }
            });

        creditsWin.show();
    },

    saveCredits: function(button) {
        Ext.Msg.alert('Test','Test Test');
        var form = button.up('form').getForm(); // get the basic form
        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function(form, action) {
                    Ext.Msg.alert('Success', 'Saved new Credit successfully.');

                    var win = button.up('window');
                    win.close();
                },
                failure: function(form, action) {
                    Ext.Msg.alert('Failed', 'Could not save Credit. Error='+action.result.errors.clientNo);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    openDebits: function() {
              var debitsWin=Ext.create('Ext.window.Window', {
                    title: 'Miscellaneous Debits',
                    resizable:false
                });

                var insuranceDebits= Ext.create('Debtors.view.InsuranceDebits', {});

                debitsWin.add(insuranceDebits);

                debitsWin.show();
    },

    openDebtorAllocations: function() {
        debtorAllocations = Ext.create('Debtors.view.Allocations', {});
        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll(); //removing existing views.
        center_container.add(debtorAllocations);
    },

    searchInvoices: function(button) {
        var stparams=this.getAllocatereceipts().down('#txtInvoiceSearch').getValue();
        var startDate=this.getAllocatereceipts().down('#startDate').getValue();
        var endDate=this.getAllocatereceipts().down('#endDate').getValue();
        var accno=this.getAllocatereceipts().down('#accno').getValue();

        var invoicesStore=Ext.data.StoreManager.lookup('InvoiceAllocateSt');

        invoicesStore.load({
            params:{
                searchParam:stparams,
                startDate:startDate,
                accno:accno,
                endDate:endDate
            }
        });
    }

});
