/*
 * File: app/view/CustomersList.js
 * Date: Mon Aug 16 2021 14:09:43 GMT+0300 (E. Africa Standard Time)
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Debtors.view.CustomersList', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.customerslist',

    requires: [
        'Debtors.view.CustomersListViewModel',
        'Ext.view.Table',
        'Ext.toolbar.Paging',
        'Ext.toolbar.Spacer',
        'Ext.button.Button',
        'Ext.form.field.TextArea',
        'Ext.form.field.ComboBox',
        'Ext.form.field.Date',
        'Ext.grid.column.Column'
    ],

    viewModel: {
        type: 'customerslist'
    },
    height: 670,
    minWidth: 800,
    scrollable: true,
    animCollapse: true,
    closable: true,
    collapsible: true,
    title: 'List of Customers in Debtors',
    columnLines: true,
    store: 'CustomersList',
    defaultListenerScope: true,

    viewConfig: {
        listeners: {
            itemdblclick: 'onGridviewItemDblClick'
        }
    },
    dockedItems: [
        {
            xtype: 'pagingtoolbar',
            dock: 'bottom',
            width: 360,
            displayInfo: true,
            store: 'CustomersList'
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            frame: true,
            height: 40,
            items: [
                {
                    xtype: 'tbspacer',
                    height: 10,
                    width: 70
                },
                {
                    xtype: 'button',
                    height: 31,
                    width: 106,
                    text: 'Export List'
                },
                {
                    xtype: 'tbspacer',
                    height: 10,
                    width: 36
                },
                {
                    xtype: 'button',
                    itemId: 'cmdNewCustomer2',
                    text: 'New Customer'
                },
                {
                    xtype: 'tbspacer',
                    height: 10,
                    width: 37
                },
                {
                    xtype: 'button',
                    text: 'Edit Customer'
                }
            ]
        },
        {
            xtype: 'toolbar',
            dock: 'top',
            height: 55,
            ui: 'footer',
            width: 278,
            items: [
                {
                    xtype: 'textareafield',
                    height: 18,
                    id: 'txtParam',
                    width: 166,
                    name: 'txtParam'
                },
                {
                    xtype: 'button',
                    id: 'custFind',
                    text: 'Find Customer'
                },
                {
                    xtype: 'combobox',
                    fieldLabel: 'Filter by Category',
                    displayField: 'custNames',
                    store: 'CustomerType',
                    valueField: 'ID',
                    listeners: {
                        change: 'onComboboxChange'
                    }
                },
                {
                    xtype: 'datefield',
                    fieldLabel: 'Start Date',
                    labelWidth: 60
                },
                {
                    xtype: 'datefield',
                    fieldLabel: 'End Date',
                    labelWidth: 60
                }
            ]
        }
    ],
    columns: [
        {
            xtype: 'gridcolumn',
            width: 71,
            dataIndex: 'pid',
            text: 'Pid'
        },
        {
            xtype: 'gridcolumn',
            width: 71,
            dataIndex: 'fileNo',
            text: 'File No'
        },
        {
            xtype: 'gridcolumn',
            width: 180,
            dataIndex: 'pnames',
            text: 'Patient Names'
        },
        {
            xtype: 'gridcolumn',
            width: 124,
            dataIndex: 'regDate',
            text: 'Encounter Date'
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'address',
            text: 'Address'
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'residence',
            text: 'Residence'
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'dob',
            text: 'Date of Birth'
        },
        {
            xtype: 'gridcolumn',
            width: 65,
            dataIndex: 'gender',
            text: 'Gender'
        },
        {
            xtype: 'gridcolumn',
            width: 69,
            dataIndex: 'phone1',
            text: 'Phone1'
        },
        {
            xtype: 'gridcolumn',
            width: 60,
            dataIndex: 'phone2',
            text: 'Phone2'
        }
    ],

    onGridviewItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var customerBill=Ext.create('Debtors.view.CustomerBill', {});
        var customerbilllist = Ext.create('Debtors.view.CustomerBillList', {});
        var billcustinfos = Ext.create('Debtors.view.BillingCustInfo', {});
        customerBill.remove(billcustinfos,customerbilllist);

        customerBill.add(billcustinfos,customerbilllist);

        billcustinfos.getForm().findField("pid").setValue(record.get('pid'));

        //alert('test '+field.value);
        var billnumbers=Ext.data.StoreManager.lookup('BillNumbers');
        billnumbers.load({
            params: {
                pid:record.get('pid')

            },
            callback: function(records, operation, success) {


            },
            scope: this

        });

        customerBill.show();
    },

    onComboboxChange: function(field, newValue, oldValue, eOpts) {
        //alert('test '+field.value);
        var debtorsListStore=Ext.data.StoreManager.lookup('DebtorsList');
        debtorsListStore.load({
            params: {
                param1: field.value

            },
            callback: function(records, operation, success) {


            },
            scope: this

        });
    }

});