{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "inpatient",
        "designer|userClassName": "Inpatient",
        "models": [
            "BillModel",
            "DebitDetails",
            "ItemsList",
            "EncounterNumbers",
            "EncounterDetails",
            "BillNumbers",
            "ReceiptModel",
            "InsuranceCompanies",
            "NhifRates",
            "Wards",
            "OccupancyList",
            "NotesModel",
            "NhifCredits",
            "PendingBills"
        ],
        "stores": [
            "BillStore",
            "ItemsListStore",
            "DebitStore",
            "EncounterDetailStore",
            "EncounterNosStore",
            "BillNumbersStore",
            "Invoices",
            "ReceiptStore",
            "InsuranceCompaniesStore",
            "NhifRateStore",
            "OccupancyStore",
            "NotesStore",
            "WardsListStore",
            "ServiceListStore",
            "NhifCreditStore",
            "PendingBills"
        ],
        "views": [
            "Bills",
            "Debit",
            "NhifCredit",
            "ChargeBeds",
            "FinaliseInvoice",
            "InterimInvoice",
            "Receipts",
            "InsuranceCredit",
            "WardOccupancy",
            "Vitals",
            "Discharge",
            "InvoicePanel",
            "PatientDetails",
            "AssignBeds",
            "IPNotes",
            "MainPanel",
            "PrescriptionForm",
            "ItemsList",
            "Dosage",
            "PatientTransfer",
            "ServicesList",
            "Credit",
            "NhifCredits",
            "InvoicesList"
        ]
    },
    "configAlternates": {
        "designer|userAlias": "string",
        "designer|userClassName": "string",
        "models": "typedarray",
        "stores": "typedarray",
        "views": "typedarray"
    },
    "name": "MyController",
    "designerId": "e247b38d-8224-417a-9632-6dd1bdce432f",
    "cn": [
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "application"
                ],
                "fn": "init",
                "implHandler": [
                    "this.control({",
                    "    '#cmdItemsList':{",
                    "        click:this.getItemsList",
                    "    },",
                    "    '#itemsList':{",
                    "        itemdblclick:this.addSelectedItem",
                    "    },",
                    "    '#serviceList':{",
                    "        itemdblclick:this.addSelectedService",
                    "    },",
                    "    '#cmdAddRow':{",
                    "        click:this.addRow",
                    "    },",
                    "    '#cmdSaveDebits':{",
                    "        click:this.saveDebits",
                    "    },",
                    "    '#txtPid':{",
                    "        blur:this.getEncounter",
                    "    },",
                    "    '#cmdSearchBills':{",
                    "        click:this.searchBills",
                    "    },",
                    "    '#cmdCombineBills':{",
                    "        click:this.combineBills",
                    "    },",
                    "    '#txtSearch':{",
                    "        specialkey:this.getPressedKey",
                    "    },",
                    "    '#cmdUpdateBill':{",
                    "        click:this.updateBillChanges",
                    "    },",
                    "    '#deleteItem':{",
                    "        click:this.deleteBillItem",
                    "    },",
                    "    'bills actioncolumn[id=deletebill2]':{",
                    "        click:this.deleteBillItem",
                    "    },",
                    "    '#cmdPreviewInterim':{",
                    "        click:this.previewInterimInvoice",
                    "    },",
                    "    '#txtSearchInterim':{",
                    "        blur:this.getBillNumbers",
                    "    },",
                    "    '#cmdDeleteSelected':{",
                    "        click:this.removeSelectedItems",
                    "    },",
                    "    '#cmdDeleteReceipts':{",
                    "        click:this.removeSelectedReceipts",
                    "    },",
                    "    '#cmdUpdateReceipts':{",
                    "        click:this.updateReceipts",
                    "    },",
                    "    '#txtPid2':{",
                    "        blur:this.getEncounterDetails",
                    "    },",
                    "    '#creditAmount':{",
                    "        blur:this.getBalance",
                    "    },",
                    "    '#cmdSave':{",
                    "        click:this.saveInsuranceCredit",
                    "    },",
                    "    '#cmdSearchReceipt':{",
                    "        click:this.searchReceipt",
                    "    },",
                    "    '#txtNhifPid':{",
                    "        blur:this.getEncounterDetails2",
                    "    },",
                    "    '#nhifClientType':{",
                    "        change:this.getNhifRates",
                    "    },",
                    "    '#cmdSaveNhif':{",
                    "        click:this.saveNifCredit",
                    "    },",
                    "    '#cmdDeleteRow':{",
                    "        click:this.deleteRow",
                    "    },",
                    "    '#SaveVitals':{",
                    "        click:this.saveVitals",
                    "    },",
                    "    'wardoccupancy actioncolumn[id=openVitals]':{",
                    "        click:this.openVitals",
                    "    },",
                    "    '#cmdSearchItems':{",
                    "        click:this.searchItems",
                    "    },",
                    "    '#searchParam':{",
                    "       specialkey:this.getPressedKey",
                    "    },",
                    "    '#cmdClose':{",
                    "        click:this.closewindow",
                    "    },",
                    "    'wardoccupancy actioncolumn[id=discharge]':{",
                    "        click:this.openDischargeForm",
                    "    },",
                    "    'wardoccupancy actioncolumn[id=prescribe]':{",
                    "        click:this.openPrescription",
                    "    },",
                    "    'wardoccupancy actioncolumn[id=transferPatient]':{",
                    "        click:this.openTransferWindow",
                    "    },",
                    "    '#saveDischarge':{",
                    "        click:this.discharge",
                    "    },",
                    "    '#waitingList':{",
                    "        itemdblclick:this.openAssignWindow",
                    "    },",
                    "    '#cmdAssign':{",
                    "        click:this.assignBed",
                    "    },",
                    "    'assignbeds actioncolumn[id=assignToBed]':{",
                    "        click:this.assignBed",
                    "    },",
                    "    '#cmdPreviewInvoice':{",
                    "        click:this.previewInvoice",
                    "    },",
                    "    '#txtInvoicePid':{",
                    "        blur:this.getPatientName",
                    "    },",
                    "    '#txtSearchReceipt':{",
                    "        specialkey:this.getPressedKey",
                    "    },",
                    "    'wardoccupancy actioncolumn[id=notes]':{",
                    "        click:this.openNotes",
                    "    },",
                    "    '#cmdSaveNotes':{",
                    "        click:this.saveNotes",
                    "    },",
                    "    '#cmdDoctorsNotes':{",
                    "        click:this.openDoctorsNotes",
                    "    },",
                    "    '#cmdNursesNotes':{",
                    "        click:this.openNursesNotes",
                    "    },",
                    "    '#cmdPrintInvoice':{",
                    "        click:this.printInvoices",
                    "    },",
                    "    '#DashBoard':{",
                    "        click:this.openPanel",
                    "    },",
                    "    '#WardOccupancy':{",
                    "        click:this.openPanel",
                    "    },",
                    "    '#Bills':{",
                    "        click:this.openPanel",
                    "    },",
                    "    '#Debit':{",
                    "        click:this.openPanel",
                    "    },",
                    "    '#Credit':{",
                    "        click:this.openPanel",
                    "    },",
                    "    '#NhifCredit':{",
                    "        click:this.openPanel",
                    "    },",
                    "    '#InsuranceCredit':{",
                    "        click:this.openPanel",
                    "    },",
                    "    '#FinaliseInvoice':{",
                    "        click:this.openPanel",
                    "    },",
                    "    '#InvoicePanel':{",
                    "        click:this.openPanel",
                    "    },",
                    "    '#InvoicesList':{",
                    "        click:this.openPanel",
                    "    },",
                    "    '#NhifCredits':{",
                    "        click:this.openPanel",
                    "    },",
                    "    '#OccupancyList':{",
                    "        click:this.openPanel",
                    "    },",
                    "    '#AdmDis':{",
                    "        click:this.openPanel",
                    "    },",
                    "    '#treansferWard':{",
                    "        change:this.activateWardsList",
                    "    },",
                    "    '#treansferBed':{",
                    "        change:this.activateBedList",
                    "    },",
                    "    '#txtSearchItems':{",
                    "        specialkey:this.getPressedKey,",
                    "        change:this.filterItems",
                    "    },",
                    "    '#cmdServiceList':{",
                    "        click:this.getServiceList",
                    "    },",
                    "    '#cmdPreviewNhif':{",
                    "        click:this.previewNhifList",
                    "    },",
                    "    '#cmdExport':{",
                    "        click:this.exportToExcel",
                    "    },",
                    "    'cmdPrint':{",
                    "        click:this.printPdf",
                    "    }",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "init",
            "designerId": "1c22536a-ec93-472d-a098-d966ef371328"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "debit",
                "selector": "debit",
                "xtype": "debit"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "debit",
            "designerId": "1c5fa767-a25f-48cf-bc11-8d6f464b22be"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "credit",
                "selector": "credit",
                "xtype": "credit"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "credit",
            "designerId": "bec7bca3-c00a-48c1-b54c-f7184cb9c064"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "bills",
                "selector": "bills",
                "xtype": "bills"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "bills",
            "designerId": "f57190c9-18d0-4a1e-84aa-5df54856e57b"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "chargebeds",
                "selector": "chargebeds",
                "xtype": "chargebeds"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "chargebeds",
            "designerId": "58934934-1003-4610-8059-02563e158c90"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "itemslist",
                "selector": "itemslist",
                "xtype": "itemslist"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "itemslist",
            "designerId": "c38ce1b0-d041-406c-a9fd-b5cf2bbb3d22"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "nhifcredit",
                "selector": "nhifcredit",
                "xtype": "nhifcredit"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "nhifcredit",
            "designerId": "188cd1e4-05cc-44de-89f0-b54fc6e91bfc"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "finaliseinvoice",
                "selector": "finaliseinvoice",
                "xtype": "finaliseinvoice"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "finaliseinvoice",
            "designerId": "2b46b4bf-ac7d-4a31-85dd-874c542e3cd6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "getItemsList",
                "implHandler": [
                    "var itemsList=Ext.create('Inpatient.view.ItemsList', {});",
                    "var itemsListWindow=Ext.create('Ext.window.Window', {",
                    "            title: 'Items List',",
                    "            resizable:true,",
                    "            minWidth:300,",
                    "            minHeight:300",
                    "        });",
                    "",
                    "itemsListWindow.add(itemsList);",
                    "itemsListWindow.show();",
                    "itemsList.down('#sourceID').setValue('Orders');"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getItemsList",
            "designerId": "5da90556-5713-4cea-a5ed-332e6f957c11"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "gridpanel",
                    "record",
                    "item",
                    "index",
                    "e",
                    "options"
                ],
                "fn": "addSelectedItem",
                "implHandler": [
                    "var sourceID=this.getItemslist().down('#sourceID').getValue();",
                    "if(sourceID=='Orders'){",
                    "    var store =Ext.data.StoreManager.lookup('ItemslistStore');",
                    "    var store1 =Ext.data.StoreManager.lookup('OrderStocksStore');",
                    "    store.remove(record);",
                    "    store1.add(record);",
                    "}else{",
                    "    var counter=this.getPrescripionform().down(\"#counter\").getValue();",
                    "    var dosage=Ext.create(\"Inpatient.view.Dosage\",{});",
                    "    dosage.itemId=record.get('partcode');",
                    "",
                    "",
                    "    dosage.down('#partCode').setValue(record.get('partcode'));",
                    "    dosage.down('#description').setValue(record.get('item_description'));",
                    "    dosage.down('#qty').setValue(record.get('qty'));",
                    "    dosage.down('#unitCost').setValue(record.get('unit_price'));",
                    "    dosage.down('#dose').setValue(1);",
                    "    dosage.down('#itemNumber').setValue(counter);",
                    "",
                    "    var i=counter;",
                    "    dosage.down('#partCode').name='partCode'+ i;",
                    "    dosage.down('#description').name='description'+ i;",
                    "    dosage.down('#dose').name='dose'+ i ;",
                    "    dosage.down('#timesperday').name='timesperday'+ i;",
                    "    dosage.down('#days').name='days'+ i ;",
                    "    dosage.down('#total').name='total'+ i ;",
                    "    dosage.down('#comment').name='comment'+ i;",
                    "",
                    "",
                    "    newVar=parseInt(counter)+1;",
                    "",
                    "    this.getPrescripionform().down('#dosageList').add(dosage);",
                    "    this.getPrescripionform().down(\"#counter\").setValue(newVar);",
                    "}",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "addSelectedItem",
            "designerId": "78d75008-37a0-420b-9f74-9a355f77f6e8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "addRow",
                "implHandler": [
                    " var invoice_item = new Inpatient.model.ItemsList({",
                    "     PartCode: 'wes',",
                    "     Description: 'sds',",
                    "     Category: 'sds',",
                    "     Price:'12'",
                    " });"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "addRow",
            "designerId": "f260ac87-cb5e-4fd6-8515-6e6d63c97e95"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveDebits",
                "implHandler": [
                    "var form = button.up('form').getForm(); // get the basic form",
                    "",
                    "var debitStore =Ext.data.StoreManager.lookup('DebitStore');",
                    "var debitRecord = debitStore.getRange();",
                    "",
                    "var pid=this.getDebit().down('#txtPid').getValue();",
                    "var debitDate=this.getDebit().down('#debitDate').getValue();",
                    "var debitno=this.getDebit().down('#debitNo').getValue();",
                    "var billNumber=this.getDebit().down('#billNumber').getValue();",
                    "var encounterNo=this.getDebit().down('#encounterNo').getValue();",
                    "",
                    "",
                    "var gridData = Array();",
                    "",
                    "Ext.each(debitRecord, function (record) {",
                    "    gridData.push(record.data);",
                    "});",
                    "",
                    "       if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "            form.submit({",
                    "                params:{",
                    "                    pid:pid,",
                    "                    debitDate:debitDate,",
                    "                    debitNo:debitno,",
                    "                    billNumber:billNumber,",
                    "                    encounterNo:encounterNo,",
                    "                    gridData: Ext.util.JSON.encode(gridData)",
                    "                },",
                    "                success: function(form, action) {",
                    "                      Ext.Msg.alert(\"Debits\",\"Debit Saved Successfully\");",
                    "                      form.reset();",
                    "                      debitStore.load({});",
                    "",
                    "                },",
                    "                failure: function(form, action) {",
                    "                    Ext.Msg.alert('Failed', 'Could not save debtor. Error='+action.result.errors.clientNo);",
                    "                }",
                    "            });",
                    "        } else { // display error alert if the data is invalid",
                    "            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "        }"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveDebits",
            "designerId": "0eacdc0e-6e42-4c39-878e-60d2021d0dbc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "textfield, The, eOpts"
                ],
                "fn": "getEncounter",
                "implHandler": [
                    "// Ext.Msg.alert('Test',textfield.up('panel').down('#txtSource').getValue());",
                    "var strSource=textfield.up('panel').down('#txtSource').getValue();",
                    "var pid=textfield.up('panel').down('#txtPid').getValue();",
                    "",
                    "Ext.Ajax.request({",
                    "    url: '../../data/getDataFunctions.php?task=getEncounter',",
                    "    params: {",
                    "        pid: pid",
                    "    },",
                    "    success: function(response){",
                    "",
                    "        var encDetails= Ext.util.JSON.decode(response.responseText);",
                    "",
                    "        pnames=encDetails.encounterNr[0].FirstName+\" \"+encDetails.encounterNr[0].LastName+\" \"+encDetails.encounterNr[0].SurName;",
                    "        //  Ext.ComponentQuery.query(\"#pname\")[0].setValue(pnames);",
                    "        textfield.up('panel').down('#pname').setValue(pnames);",
                    "        textfield.up('panel').down('#billNumber').setValue(encDetails.encounterNr[0].BillNumber);",
                    "        textfield.up('panel').down('#encounterNo').setValue(encDetails.encounterNr[0].EncounterNr);",
                    "",
                    "        if(strSource==='debit'){",
                    "             textfield.up('panel').down('#debitDate').setValue(encDetails.encounterNr[0].CurrDate);",
                    "             this.getDebitNo();",
                    "        }else if(strSource==='credit'){",
                    "            textfield.up('panel').down('#creditDate').setValue(encDetails.encounterNr[0].CurrDate);",
                    "            this.getCreditNo();",
                    "        }",
                    "",
                    "    },",
                    "    scope:this",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getEncounter",
            "designerId": "9ce3578a-35e3-4e2e-b11e-7de636decb5c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "searchBills",
                "implHandler": [
                    "var searchParam=this.getBills().down('#txtSearch').getValue();",
                    "var billNo=this.getBills().down('#cmbBill1').getValue();",
                    "var billStore =Ext.data.StoreManager.lookup('BillStore');",
                    "billStore.load({",
                    "    params: {",
                    "        pid: searchParam,",
                    "        bill_number:billNo",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "",
                    "    },",
                    "    scope: this",
                    "",
                    "});",
                    "",
                    "var billStore2 =Ext.data.StoreManager.lookup('BillNumbersStore');",
                    "            billStore2.load({",
                    "                params: {",
                    "                    pid: searchParam",
                    "                },",
                    "                callback: function(records, operation, success) {",
                    "",
                    "                },",
                    "                scope: this",
                    "",
                    "            });",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "searchBills",
            "designerId": "ac497185-91f7-4440-a185-f51047a9a9e9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "combineBills",
                "implHandler": [
                    "var pid=this.getBills().down('#txtSearch').getValue();",
                    "var bill1=this.getBills().down('#cmbBill1').getValue();",
                    "var bill2=this.getBills().down('#cmbBill2').getValue();",
                    "var enc1=this.getBills().down('#cmbEnc1').getValue();",
                    "var enc2=this.getBills().down('#cmbEnc2').getValue();",
                    "",
                    "Ext.Msg.show({",
                    "    title:'Merge Bills?',",
                    "    message: 'Are you sure you want to MERGE the two Bills?',",
                    "    buttons: Ext.Msg.YESNOCANCEL,",
                    "    icon: Ext.Msg.QUESTION,",
                    "    fn: function(btn) {",
                    "        if (btn === 'yes') {",
                    "            Ext.Ajax.request({",
                    "                    url: '../../data/getDataFunctions.php?task=combineBills',",
                    "                    params: {",
                    "                        pid:pid,",
                    "                        bill1:bill1,",
                    "                        bill2:bill2,",
                    "                        enc1:enc1,",
                    "                        enc2:enc2,",
                    "                    }",
                    "                });",
                    "        } else if (btn === 'no') {",
                    "            console.log('No pressed');",
                    "        } else {",
                    "            console.log('Cancel pressed');",
                    "        }",
                    "    }",
                    "});",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "combineBills",
            "designerId": "a0b06708-d412-415c-b703-42a94557b9e5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field",
                    "e",
                    "options"
                ],
                "fn": "getPressedKey",
                "implHandler": [
                    "    if (e.getKey() == e.ENTER && field.getItemId()==='txtSearch') {",
                    "     //   Ext.Msg.alert('Test',field.getItemId());",
                    "       this.searchBills();",
                    "    }else if (e.getKey() == e.ENTER && field.getItemId()==='searchParam') {",
                    "     //   Ext.Msg.alert('Test',field.getItemId());",
                    "        this.searchItems();",
                    "    }else if (e.getKey() == e.ENTER && field.getItemId()==='txtSearchReceipt') {",
                    "     //   Ext.Msg.alert('Test',field.getItemId());",
                    "        this.searchReceipt();",
                    "    }else if (e.getKey() == e.ENTER && field.getItemId()==='txtSearchItems') {",
                    "     //   Ext.Msg.alert('Test',field.getItemId());",
                    "        this.findItems();",
                    "    }",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getPressedKey",
            "designerId": "2262e201-f2ae-4431-b81b-13eccad7bbdd"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "updateBillChanges",
                "implHandler": [
                    "var billStore=Ext.data.StoreManager.lookup('BillStore');",
                    "",
                    "var updatedRecords = this.getBills().getStore().getUpdatedRecords();",
                    "params=[];",
                    "Ext.each(updatedRecords,function(record){",
                    " params.push(record.data);",
                    "});",
                    "",
                    "",
                    "billStore.proxy.extraParams = {",
                    "    selectedCount:params.length,",
                    "    pid:this.getBills().down('#txtSearch').getValue()",
                    "};",
                    "",
                    "billStore.sync({",
                    "    success: function(response){",
                    "        var resp = Ext.JSON.decode(response.responseText);",
                    "        Ext.Msg.alert('Update','Successfully updated Bill');",
                    "        var billStore=Ext.data.StoreManager.lookup('BillStore');",
                    "        billStore.load({});",
                    "",
                    "    },",
                    "    failure:function(response){",
                    "        var resp = JSON.parse(response.responseText);",
                    "        Ext.Msg.alert('Error','Error Updating Bill');",
                    "",
                    "    }",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "updateBillChanges",
            "designerId": "be6707a7-2bb3-42e4-95a2-cd2187a7a177"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "view, rowIndex, colIndex, item, e, record, row"
                ],
                "fn": "deleteBillItem",
                "implHandler": [
                    "// var rec = button.up('grid').getViewModel().get('record');",
                    "// Ext.Msg.alert(\"Button clicked\", \"Hey! \" + record.get('ID'));",
                    "var ID=record.get('ID');",
                    "",
                    "Ext.Msg.show({",
                    "    title:'Delete Bill Item?',",
                    "    msg: 'Are you sure you want to delete',",
                    "    buttons: Ext.Msg.YESNOCANCEL,",
                    "    icon: Ext.Msg.QUESTION,",
                    "    fn: function(rec) {",
                    "        if (rec === \"yes\") {",
                    "            Ext.Ajax.request({",
                    "                url: '../../data/getDataFunctions.php?task=deleteBillItem',",
                    "                params: {",
                    "                    ID:record.get('ID'),",
                    "                    pid:record.get('Pid')",
                    "                },",
                    "                waitMsg: 'Deleting Item ...',",
                    "                success: function(response){",
                    "                    var resp = Ext.JSON.decode(response.responseText);",
                    "                    Ext.Msg.alert('Delete',resp.Error);",
                    "                    var billStore=Ext.data.StoreManager.lookup('BillStore');",
                    "                    billStore.load({});",
                    "",
                    "                },",
                    "                failure:function(response){",
                    "                    var resp = JSON.parse(response);",
                    "                    Ext.Msg.alert('Error',resp.Error);",
                    "",
                    "                    //                     Ext.Msg.alert('Error','There was a problem deleting the Part Locations, Contact System Administrator');",
                    "                }",
                    "            });",
                    "",
                    "        }",
                    "    }",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "deleteBillItem",
            "designerId": "ae598c24-060a-4087-ba4a-b787cae16509"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "previewInterimInvoice",
                "implHandler": [
                    "//reportswindow=Ext.create('Inpatient.view.InvoiceDetails', {});",
                    "var invoiceDetails=button.up('panel').down('#invoiceDetails');",
                    "let invoiceHeaderDetails=button.up('panel').down('#invoiceHeaderDetails');",
                    "",
                    "var pid=button.up('panel').down('#txtInvoicePid').getValue();",
                    "var billNumber=button.up('panel').down('#txtBillNumber').getValue();",
                    "",
                    "",
                    "//*********************************************************************",
                    "//Create the header template",
                    "//*********************************************************************",
                    "",
                    "var patientStore=Ext.data.StoreManager.lookup(\"EncounterDetailStore\");",
                    "",
                    "",
                    "var data1 = [];",
                    "patientStore.load({",
                    "    params: {",
                    "        pid:pid,",
                    "        bill_number:billNumber",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "          var tpl1=new Ext.XTemplate(",
                    "                 '<Table id=billTitles>',",
                    "               '<tpl for=\".\">',",
                    "                 '<tr><td align=right id=titles>Inpatient No</td><td align=left>{EncounterNr}</td><td align=right>Admission Date</td><td align=left>{AdmissionDate}</td><td>Invoice No</td><td>{BillNumber}</td></tr>',",
                    "                 '<tr><td align=right>PID</td><td align=left>{Pid}</td><td align=right>Discharge Date</td><td align=left>{DischargeDate}</td><td></td><td></td></tr>',",
                    "                 '<tr><td align=right>Names</td><td align=left>{FirstName} {LastName} {SurName}</td><td></td><td></td><td>Account No</td><td align=left>{}</td></tr>',",
                    "                 '<tr><td align=right>Date of Birth</td><td align=left>{DateBirth}</td><td  align=right>Ward</td><td align=left>{Ward}</td><td>Account Name</td><td align=left>{}</td></tr>',",
                    "                 '<tr><td align=right>Village</td><td align=left>{Village}</td><td align=right>Room/Bed No</td><td align=left>{RoomNo}</td><td></td><td></td></tr>',",
                    "              '</tpl>',",
                    "                 '</table>'",
                    "              );",
                    "            patientStore.each(function(record) {",
                    "            });",
                    "",
                    "            tpl1.overwrite(invoiceHeaderDetails.body,data1);",
                    "    },",
                    "    scope: this",
                    "});",
                    "",
                    "",
                    "//*******************************************************************",
                    "//End of Header template",
                    "//*******************************************************************",
                    "",
                    "",
                    "var billStore=Ext.data.StoreManager.lookup(\"Invoices\");",
                    "",
                    "var billSum=0;",
                    "var data = [];",
                    "billStore.load({",
                    "    params: {",
                    "        pid:pid,",
                    "        bill_number:billNumber",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "        var tpl=new Ext.XTemplate(",
                    "                '<Table id=billDetails>',",
                    "                '<tr><th>Date</th><th>Service Description</th><th>Ref No</th><th>Price</th><th>Qty</th><th>Total</th></tr>',",
                    "                '<tpl for=\".\">',",
                    "                    '<tr><td>{Bill_Date}</td>',",
                    "                    '<td>{Description}</td>',",
                    "                    '<td>{ID}</td>',",
                    "                    '<td align=right>{Price}</td>',",
                    "                    '<td>{Qty}</td>',",
                    "                    '<td align=right>{Total}</td></tr>',",
                    "                '</tpl>',",
                    "                '<tr><td colspan=2 class=totals>Totals</td><td class=totals></td><td class=totals> 0</td><td>{[this.getBillTotal() ]}</td></tr>',",
                    "                '</table>',",
                    "              {",
                    "                getBillTotal:function(){",
                    "                    return billSum.toFixed(2);",
                    "                }",
                    "              }",
                    "          );",
                    "",
                    "            billStore.each(function(record) {",
                    "                data.push(record.getData());",
                    "                 billSum += record.get('Total');",
                    "            });",
                    "",
                    "            tpl.overwrite(invoiceDetails.body,data);",
                    "    },",
                    "    scope: this",
                    "});",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "previewInterimInvoice",
            "designerId": "59b7139e-847d-41b7-ae75-0fa62b1fe7b5"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "interiminvoice",
                "selector": "interiminvoice",
                "xtype": "interiminvoice"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "interiminvoice",
            "designerId": "5ff8c1e0-60f3-4d29-8eca-8ab306477b9c"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "invoicedetails",
                "selector": "invoicedetails",
                "xtype": "invoicedetails"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "invoicedetails",
            "designerId": "3e947552-ca87-475d-81d4-3a284991aea1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field",
                    "the",
                    "eOpts"
                ],
                "fn": "getBillNumbers",
                "implHandler": [
                    "//var searchParam=this.getBills().down('#txtSearch').getValue();",
                    "var billStore2 =Ext.data.StoreManager.lookup('BillNumbersStore');",
                    "billStore2.load({",
                    "    params: {",
                    "        pid: field.getValue()",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "",
                    "    },",
                    "    scope: this",
                    "",
                    "});",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getBillNumbers",
            "designerId": "84eef08b-020a-4443-92ac-47f7ba76aa3c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "removeSelectedItems",
                "implHandler": [
                    "var grid=button.up('grid');",
                    "",
                    "var srecords=grid.getSelectionModel().getSelection();",
                    "",
                    "var selectedRowIndexes = [];",
                    "var pids='';",
                    "",
                    "Ext.iterate(srecords,function(record,index){",
                    "",
                    "    selectedRowIndexes.push(grid.getStore().indexOf(record));",
                    "",
                    "    if(grid.getSelectionModel().hasSelection()){",
                    "        pids=pids+record.get('ID')+\",\";",
                    "        Ext.Msg.show({",
                    "            title:'Delete Bill Items?',",
                    "            msg: 'Are you sure you want to delete',",
                    "            buttons: Ext.Msg.YESNOCANCEL,",
                    "            icon: Ext.Msg.QUESTION,",
                    "            fn: function(rec) {",
                    "                if (rec === \"yes\") {",
                    "                    Ext.Ajax.request({",
                    "                        url: '../../data/getDataFunctions.php?task=deleteBillItem',",
                    "                        params: {",
                    "                            ID:pids,",
                    "                            pid:record.get('Pid')",
                    "                        },",
                    "                        waitMsg: 'Deleting Item ...',",
                    "                        success: function(response){",
                    "                            var resp = Ext.JSON.decode(response.responseText);",
                    "                            Ext.Msg.alert('Delete',resp.Error);",
                    "                            var billStore=Ext.data.StoreManager.lookup('BillStore');",
                    "                            billStore.load({});",
                    "",
                    "                        },",
                    "                        failure:function(response){",
                    "                            var resp = JSON.parse(response);",
                    "                            Ext.Msg.alert('Error',resp.Error);",
                    "",
                    "                            //                     Ext.Msg.alert('Error','There was a problem deleting the Part Locations, Contact System Administrator');",
                    "                        }",
                    "                    });",
                    "",
                    "                }",
                    "            }",
                    "        });",
                    "",
                    "    }else{",
                    "         Ext.Msg.alert('Test','You have not Selected any Item to Remove');",
                    "    }",
                    "",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "removeSelectedItems",
            "designerId": "d9efab0a-924a-4021-b054-7dbf65502d7d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "removeSelectedReceipts",
                "implHandler": [
                    " var grid=button.up('grid');",
                    "",
                    "        var srecords=grid.getSelectionModel().getSelection();",
                    "",
                    "        var selectedRowIndexes = [];",
                    "        var pids='';",
                    "",
                    "        Ext.iterate(srecords,function(record,index){",
                    "",
                    "            selectedRowIndexes.push(grid.getStore().indexOf(record));",
                    "",
                    "            if(grid.getSelectionModel().hasSelection()){",
                    "                pids=pids+record.get('Sale_ID')+\",\";",
                    "                Ext.Msg.show({",
                    "                    title:'Delete Receipt Items?',",
                    "                    msg: 'Are you sure you want to delete',",
                    "                    buttons: Ext.Msg.YESNOCANCEL,",
                    "                    icon: Ext.Msg.QUESTION,",
                    "                    fn: function(rec) {",
                    "                        if (rec === \"yes\") {",
                    "                            Ext.Ajax.request({",
                    "                                url: '../../data/getDataFunctions.php?task=deleteReceiptItem',",
                    "                                params: {",
                    "                                    ID:pids,",
                    "                                    pid:record.get('Pid')",
                    "                                },",
                    "                                waitMsg: 'Deleting Receipt ...',",
                    "                                success: function(response){",
                    "                                    var resp = Ext.JSON.decode(response.responseText);",
                    "                                    Ext.Msg.alert('Delete',resp.Error);",
                    "                                    var receiptStore=Ext.data.StoreManager.lookup('ReceiptStore');",
                    "                                    receiptStore.load({});",
                    "",
                    "                                },",
                    "                                failure:function(response){",
                    "                                    var resp = JSON.parse(response);",
                    "                                    Ext.Msg.alert('Error',resp.Error);",
                    "",
                    "                                    //                     Ext.Msg.alert('Error','There was a problem deleting the Part Locations, Contact System Administrator');",
                    "                                }",
                    "                            });",
                    "",
                    "                        }",
                    "                    }",
                    "                });",
                    "",
                    "            }else{",
                    "                 Ext.Msg.alert('Test','You have not Selected any Item to Remove');",
                    "            }",
                    "",
                    "        });"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "removeSelectedReceipts",
            "designerId": "8d0034f3-3720-4e6d-a528-7e239f46e6f7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "updateReceipts",
                "implHandler": [
                    "",
                    "",
                    "var receiptStore=Ext.data.StoreManager.lookup('ReceiptStore');",
                    "",
                    "var updatedRecords = this.getReceipts().getStore().getUpdatedRecords();",
                    "params=[];",
                    "Ext.each(updatedRecords,function(record){",
                    " params.push(record.data);",
                    "});",
                    "",
                    "",
                    "receiptStore.proxy.extraParams = {",
                    "    selectedCount:params.length,",
                    "    pid:this.getReceipts().down('#txtSearchReceipt').getValue()",
                    "};",
                    "",
                    "Ext.Msg.alert('Update','Successfully updated Receipt');",
                    "",
                    "receiptStore.sync({",
                    "    success: function(response){",
                    "        var resp = Ext.JSON.decode(response.responseText);",
                    "        Ext.Msg.alert('Update','Successfully updated Receipt');",
                    "        var receiptStore=Ext.data.StoreManager.lookup('ReceiptStore');",
                    "        receiptStore.load({});",
                    "",
                    "    },",
                    "    failure:function(response){",
                    "        var resp = JSON.parse(response.responseText);",
                    "        Ext.Msg.alert('Error','Error Updating Receipt');",
                    "",
                    "    }",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "updateReceipts",
            "designerId": "5426ac9b-7293-4ed2-bfce-7377e4a80f9d"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "receipts",
                "selector": "receipts",
                "xtype": "receipts"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "receipts",
            "designerId": "a274087d-ed16-455c-afb4-d6416b1c5ae3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "textField",
                    "the",
                    "eOpts"
                ],
                "fn": "getEncounterDetails",
                "implHandler": [
                    "//Ext.Msg.alert('current Form',textField.getValue());",
                    "",
                    "",
                    "var pid=textField.getValue();",
                    "// var pnames='as';",
                    "Ext.Ajax.request({",
                    "    url: '../../data/getDataFunctions.php?task=getEncounter',",
                    "    params: {",
                    "        pid: pid",
                    "    },",
                    "    success: function(response){",
                    "        var encDetails= Ext.util.JSON.decode(response.responseText);",
                    "        pnames=encDetails.encounterNr[0].FirstName+\" \"+encDetails.encounterNr[0].LastName+\" \"+encDetails.encounterNr[0].SurName;",
                    "",
                    "        this.getInsurancecredit().down('#pname').setValue(pnames);",
                    "        this.getInsurancecredit().down('#admissionDate').setValue(encDetails.encounterNr[0].AdmissionDate);",
                    "        this.getInsurancecredit().down('#dischargeDate').setValue(encDetails.encounterNr[0].DischargeDate);",
                    "        this.getInsurancecredit().down('#releaseDate').setValue(encDetails.encounterNr[0].ReleaseDate);",
                    "        this.getInsurancecredit().down('#days').setValue(encDetails.encounterNr[0].BedDays);",
                    "        this.getInsurancecredit().down('#encounterNr').setValue(encDetails.encounterNr[0].EncounterNr);",
                    "        this.getInsurancecredit().down('#billNumber').setValue(encDetails.encounterNr[0].BillNumber);",
                    "",
                    "        var billnumberStore=Ext.data.StoreManager.lookup('BillNumbersStore');",
                    "        billnumberStore.load({",
                    "            params:{",
                    "                pid:pid",
                    "            }",
                    "        });",
                    "",
                    "        this.generateCreditNo();",
                    "        this.getBillAmount(pid,encDetails.encounterNr[0].BillNumber);",
                    "",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getEncounterDetails",
            "designerId": "83ce3c8c-b5e8-4020-9331-2d62caf4fc70"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "insurancecredit",
                "selector": "insurancecredit",
                "xtype": "insurancecredit"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "insurancecredit",
            "designerId": "af628ea1-5309-457b-b128-66fc36469b9d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "generateCreditNo",
                "implHandler": [
                    " // var pnames='as';",
                    "        Ext.Ajax.request({",
                    "            url: '../../data/getDataFunctions.php?task=getCreditNo',",
                    "            success: function(response){",
                    "                 var respText= Ext.util.JSON.decode(response.responseText);",
                    "                 if(respText.credits[0].creditNo==1){",
                    "                     creditNo=1001;",
                    "                 }else{",
                    "                     creditNo=respText.credits[0].creditNo;",
                    "                 }",
                    "",
                    "                this.getInsurancecredit().down('#creditNo').setValue(creditNo);",
                    "",
                    "            },",
                    "            scope: this",
                    "        });"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "generateCreditNo",
            "designerId": "feb10ae2-0a7f-4fb0-9cd9-0eeba939a522"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "pid",
                    "billNumber"
                ],
                "fn": "getBillAmount",
                "implHandler": [
                    "//var pid=this.getInsurancecredit().down('#txtPid2').getValue();",
                    "//var billNumber=this.getInsurancecredit().down('#billNumber').getValue();",
                    "",
                    "Ext.Ajax.request({",
                    "     url: '../../data/getDataFunctions.php?task=getTotalBill',",
                    "     params:{",
                    "         pid:pid,",
                    "         bill_number:billNumber",
                    "     },",
                    "     success: function(response){",
                    "         var respText= Ext.util.JSON.decode(response.responseText);",
                    "",
                    "         this.getInsurancecredit().down('#invoiceAmount').setValue(respText.invoiceAmount[0].amount);",
                    "",
                    "     },",
                    "     scope: this",
                    " });"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getBillAmount",
            "designerId": "e6b7e909-8cdc-4d55-9707-e289af20885a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "textField,the,eOpts"
                ],
                "fn": "getBalance",
                "implHandler": [
                    "     var invoiceAmount=this.getInsurancecredit().down('#invoiceAmount').getValue();",
                    "     var creditAmount=textField.getValue();",
                    "     var balance=parseInt(invoiceAmount-creditAmount);",
                    "",
                    "     this.getInsurancecredit().down('#balance').setValue(balance);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getBalance",
            "designerId": "13c835a9-ff47-49e4-9020-afc9cd4a955e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveInsuranceCredit",
                "implHandler": [
                    "var form = button.up('form'); // get the form panel",
                    "if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "    form.submit({",
                    "        success: function(form, action) {",
                    "            Ext.Msg.alert('Success', action.result.msg);",
                    "",
                    "            form.reset();",
                    "        },",
                    "        failure: function(form, action) {",
                    "            Ext.Msg.alert('Failed',  action.result.msg);",
                    "        }",
                    "    });",
                    "} else { // display error alert if the data is invalid",
                    "    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveInsuranceCredit",
            "designerId": "8d79392b-fb57-43cc-95e8-c4b24cfee0d4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "searchReceipt",
                "implHandler": [
                    "var searchParam=this.getReceipts().down('#txtSearchReceipt').getValue();",
                    "",
                    "var receiptStore =Ext.data.StoreManager.lookup('ReceiptStore');",
                    "receiptStore.load({",
                    "    params: {",
                    "        searchParam: searchParam",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "",
                    "    },",
                    "    scope: this",
                    "",
                    "});",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "searchReceipt",
            "designerId": "d29454c9-2e32-4308-b499-b669bef21ddb"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "textField",
                    "the",
                    "eOpts"
                ],
                "fn": "getEncounterDetails2",
                "implHandler": [
                    "        var pid=textField.getValue();",
                    "        // var pnames='as';",
                    "        Ext.Ajax.request({",
                    "            url: '../../data/getDataFunctions.php?task=getEncounter',",
                    "            params: {",
                    "                pid: pid",
                    "            },",
                    "            success: function(response){",
                    "                var encDetails= Ext.util.JSON.decode(response.responseText);",
                    "                pnames=encDetails.encounterNr[0].FirstName+\" \"+encDetails.encounterNr[0].LastName+\" \"+encDetails.encounterNr[0].SurName;",
                    "",
                    "                this.getNhifcredit().down('#pname').setValue(pnames);",
                    "                this.getNhifcredit().down('#admissionDate').setValue(encDetails.encounterNr[0].AdmissionDate);",
                    "                this.getNhifcredit().down('#dischargeDate').setValue(encDetails.encounterNr[0].DischargeDate);",
                    "                this.getNhifcredit().down('#releaseDate').setValue(encDetails.encounterNr[0].ReleaseDate);",
                    "                this.getNhifcredit().down('#days').setValue(encDetails.encounterNr[0].BedDays);",
                    "                this.getNhifcredit().down('#encounterNr').setValue(encDetails.encounterNr[0].EncounterNr);",
                    "                this.getNhifcredit().down('#billNumber').setValue(encDetails.encounterNr[0].BillNumber);",
                    "                this.getNhifcredit().down('#ward').setValue(encDetails.encounterNr[0].Ward);",
                    "",
                    "                var billnumberStore=Ext.data.StoreManager.lookup('BillNumbersStore');",
                    "                billnumberStore.load({",
                    "                    params:{",
                    "                        pid:pid",
                    "                    }",
                    "                });",
                    "",
                    "               this.generateNhifCreditNo();",
                    "               this.getBillAmount2(pid,encDetails.encounterNr[0].BillNumber);",
                    "",
                    "            },",
                    "            scope: this",
                    "        });"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getEncounterDetails2",
            "designerId": "ff541fda-e7d7-4a05-b1fa-53f4dc4d3fa4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "generateNhifCreditNo",
                "implHandler": [
                    "Ext.Ajax.request({",
                    "    url: '../../data/getDataFunctions.php?task=getNhifCreditNo',",
                    "    success: function(response){",
                    "        var respText= Ext.util.JSON.decode(response.responseText);",
                    "        if(respText.credits[0].creditNo==1){",
                    "            creditNo=1001;",
                    "        }else{",
                    "            creditNo=respText.credits[0].creditNo;",
                    "        }",
                    "",
                    "        this.getNhifcredit().down('#creditNo').setValue(creditNo);",
                    "",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "generateNhifCreditNo",
            "designerId": "0334b956-b549-4528-af4e-1c2896646de5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "pid",
                    "billNumber"
                ],
                "fn": "getBillAmount2",
                "implHandler": [
                    "//var pid=this.getNhifcredit().down('#txtPid3').getValue();",
                    "//var billNumber=this.getNhifcredit().down('#billNumber').getValue();",
                    "",
                    "Ext.Ajax.request({",
                    "    url: 'data/getDataFunctions.php?caller=getTotalBill',",
                    "    params:{",
                    "        pid:pid,",
                    "        bill_number:billNumber",
                    "    },",
                    "    success: function(response){",
                    "        var respText= Ext.util.JSON.decode(response.responseText);",
                    "",
                    "        this.getNhifcredit().down('#invoiceAmount').setValue(respText.invoiceAmount[0].amount);",
                    "",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getBillAmount2",
            "designerId": "9d497d17-4574-4796-a8ff-93a3b4c9e0c6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "comboField",
                    "newValue",
                    "oldValue",
                    "eOpts"
                ],
                "fn": "getNhifRates",
                "implHandler": [
                    "var pid=comboField.up('form').down('#txtNhifPid').getValue();",
                    "var billNumber=comboField.up('form').down('#billNumber').getValue();",
                    "",
                    "",
                    "Ext.Ajax.request({",
                    "    url: '../../data/getDataFunctions.php?task=getNhifRates',",
                    "    params:{",
                    "        rate:newValue",
                    "    },",
                    "    waitMsg: 'Waiting for Invoice Amount...',",
                    "    success: function(response){",
                    "        var respText= Ext.util.JSON.decode(response.responseText);",
                    "",
                    "        var rateCalc=respText.nhifRates[0].rateCalc;",
                    "        this.getNhifcredit().down('#creditPerDay').setValue(respText.nhifRates[0].RateValue);",
                    "        this.getNhifcredit().down('#rateCalc').setValue(rateCalc);",
                    "",
                    "        var rateValue;",
                    "        if(rateCalc==1){",
                    "            rateValue=respText.nhifRates[0].RateValue;",
                    "",
                    "        }else{",
                    "            var days=this.getNhifcredit().down('#days').getValue();",
                    "            var rates=respText.nhifRates[0].RateValue;",
                    "            rateValue=parseInt(rates * days);",
                    "        }",
                    "",
                    "        var invoiceValue=this.getInvoiceAmount(pid,billNumber);",
                    "",
                    "        this.getNhifcredit().down('#creditAmount').setValue(rateValue);",
                    "",
                    "        this.getNhifcredit().down('#invoiceAmount').setValue(invoiceValue);",
                    "",
                    "",
                    "        //var invoiceAmount= this.getNhifcredit().down('#invoiceAmount').getValue();",
                    "",
                    "       // var balance=parseInt(invoiceValue-rateValue);",
                    "//        Ext.Msg.alert('Test',balance);",
                    "",
                    "       // this.getNhifcredit().down('#balance').setValue('1000');",
                    "",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getNhifRates",
            "designerId": "def6f55b-e523-4f7c-af8e-0c379f13f1ea"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveNifCredit",
                "implHandler": [
                    "var form = button.up('form'); // get the form panel",
                    "if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "    form.submit({",
                    "        success: function(form, action) {",
                    "            Ext.Msg.alert('Success', action.result.msg);",
                    "",
                    "            form.reset();",
                    "        },",
                    "        failure: function(form, action) {",
                    "            Ext.Msg.alert('Failed',  action.result.msg);",
                    "        }",
                    "    });",
                    "} else { // display error alert if the data is invalid",
                    "    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveNifCredit",
            "designerId": "3fbd66b9-3516-4a6b-87f5-ea190089e8b7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "deleteRow",
                "implHandler": [
                    "var itemsGrid=button.up('form').down('#itemsGrid');",
                    "itemToDelete=itemsGrid.getView().getSelectionModel().getSelection();",
                    "itemsStore=Ext.data.StoreManager.lookup('DebitStore');",
                    "",
                    "itemsStore.remove(itemToDelete);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "deleteRow",
            "designerId": "587c1156-f747-4b1d-a7dc-7979931c1ab6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getDebitNo",
                "implHandler": [
                    "Ext.Ajax.request({",
                    "    url: '../../data/getDataFunctions.php?task=geNextTransNo&transType=8',",
                    "",
                    "    success: function(response){",
                    "        var respText= Ext.util.JSON.decode(response.responseText);",
                    "        var debitNo=respText.transNo;",
                    "",
                    "        this.getDebit().down('#debitNo').setValue(debitNo);",
                    "",
                    "         var d=new Date();",
                    "         this.getDebit().down('#debitDate').setValue(d);",
                    "",
                    "",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getDebitNo",
            "designerId": "f1c0d91f-a7ad-4486-a3a5-c38db16424bc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveVitals",
                "implHandler": [
                    "//Ext.Msg.alert('Test',button.getItemId());",
                    "",
                    "var form = button.up('panel').getForm(); // get the basic form",
                    "            if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "                form.submit({",
                    "                    success: function (form, action) {",
                    "                        Ext.Msg.alert('Thank you!', 'The Vitals has been saved Successfully.');",
                    "                        button.up('form').getForm().reset();",
                    "                        button.up('window').hide();",
                    "",
                    "                    },",
                    "                    failure: function (form, action) {",
                    "                        var jsonResp = Ext.decode(action.response.responseText);",
                    "",
                    "                        Ext.Msg.alert('Failed', 'Could not save Vitals. \\n Error=' + jsonResp.error);",
                    "                    }",
                    "                });",
                    "            } else { // display error alert if the data is invalid",
                    "                Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "            }"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveVitals",
            "designerId": "589832cd-6041-4238-bce1-534dd5073e5a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "view, rowIndex, colIndex, item, e, record, row"
                ],
                "fn": "openVitals",
                "implHandler": [
                    "var vitals=Ext.create('Inpatient.view.Vitals', {});",
                    "var vitalsWindow=Ext.create('Ext.window.Window', {",
                    "    title: 'Patients Vitals',",
                    "    resizable:false",
                    "});",
                    "",
                    "vitals.down('#pid').setValue(record.get('PID'));",
                    "vitals.down('#names').setValue(record.get('Names'));",
                    "vitals.down('#encounterNo').setValue(record.get('EncounterNo'));",
                    "vitals.down('#Dob').setValue(record.get('BirthDate'));",
                    "",
                    "vitalsWindow.add(vitals);",
                    "vitalsWindow.show();",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openVitals",
            "designerId": "97af6d1e-29f4-43ce-92d8-72e9b6a615aa"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "vitals",
                "selector": "vitals",
                "xtype": "vitals"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "vitals",
            "designerId": "ecf28278-5dc7-4b74-9809-0bb005c9113d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "searchItems",
                "implHandler": [
                    " var searchParam=this.getItemslist().down('#searchParam').getValue();",
                    "",
                    "        var itemsListStore =Ext.data.StoreManager.lookup('ItemsListStore');",
                    "        itemsListStore.load({",
                    "            params: {",
                    "                searchParam: searchParam",
                    "            },",
                    "            callback: function(records, operation, success) {",
                    "",
                    "            },",
                    "            scope: this",
                    "",
                    "        });"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "searchItems",
            "designerId": "2853fa5a-9310-4ec6-a6d7-c6b67bccb6fe"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "closewindow",
                "implHandler": [
                    "    button.up('window').close();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "closewindow",
            "designerId": "d46ed559-d401-4882-86d2-3ad597dabe23"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "view",
                    "rowIndex",
                    "colIndex",
                    "item",
                    "e",
                    "record",
                    "row"
                ],
                "fn": "openDischargeForm",
                "implHandler": [
                    "var discharge=Ext.create('Inpatient.view.Discharge', {});",
                    "var dischargeWindow=Ext.create('Ext.window.Window', {",
                    "    title: 'Discharge Patient',",
                    "    resizable:false",
                    "});",
                    "",
                    "var d=new Date();",
                    "",
                    "discharge.down('#pid').setValue(record.get('Pid'));",
                    "discharge.down('#names').setValue(record.get('Names'));",
                    "discharge.down('#encounterNo').setValue(record.get('EncounterNo'));",
                    "discharge.down('#Dob').setValue(record.get('BirthDate'));",
                    "discharge.down('#dischargeDate').setValue(d);",
                    "discharge.down('#dischargeTime').setValue(d);",
                    "",
                    "discharge.down('#wardNo').setValue(record.get('WardID'));",
                    "",
                    "dischargeWindow.add(discharge);",
                    "dischargeWindow.show();",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openDischargeForm",
            "designerId": "aebe29a2-8eba-4d3c-8831-4b3c630f7441"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "discharge",
                "implHandler": [
                    "// Ext.Msg.alert('Test',button.getItemId());",
                    "",
                    "var form = button.up('form').getForm(); // get the basic form",
                    "var ward_nr=button.up('form').down('#wardNo').getValue();",
                    "var pid=button.up('form').down('#pid').getValue();",
                    "var encounterNo=button.up('form').down('#encounterNo').getValue();",
                    "",
                    "if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "    Ext.Msg.show({",
                    "    title:'Discharge Patient?',",
                    "    message: 'Are you sure you want to Discharge this Patient?',",
                    "    buttons: Ext.Msg.YESNOCANCEL,",
                    "    icon: Ext.Msg.QUESTION,",
                    "    fn: function(btn) {",
                    "        if (btn === 'yes') {",
                    "            form.submit({",
                    "                params:{",
                    "                    pid:pid,",
                    "                    encounter_nr:encounterNo",
                    "                },",
                    "                success: function (form, action) {",
                    "                    Ext.Msg.alert('Thank you!', 'Patient Discharged Successfully.');",
                    "                    button.up('form').getForm().reset();",
                    "                    button.up('window').close();",
                    "",
                    "                    var occupancyStore =Ext.data.StoreManager.lookup('OccupancyStore');",
                    "                    var waitingListStore =Ext.data.StoreManager.lookup('WaitingListStore');",
                    "                    occupancyStore.load({",
                    "                        params:{",
                    "                            wardId:ward_nr",
                    "                        }",
                    "                    });",
                    "",
                    "                    waitingListStore.load({",
                    "                        params:{",
                    "                            wardNo:ward_nr",
                    "                        }",
                    "                    });",
                    "",
                    "                },",
                    "                failure: function (form, action) {",
                    "                    var jsonResp = Ext.decode(action.response.responseText);",
                    "",
                    "                    Ext.Msg.alert('Failed', 'Could not Discharge patient \\n Error=' + jsonResp.error);",
                    "                }",
                    "                });",
                    "        } else if (btn === 'no') {",
                    "             button.up('form').getForm().reset();",
                    "             button.up('window').close();",
                    "        } else {",
                    "            console.log('Cancel pressed');",
                    "        }",
                    "    }",
                    "});",
                    "",
                    "} else { // display error alert if the data is invalid",
                    "       Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "discharge",
            "designerId": "c3aaafe9-d237-4f0c-a3a6-bc283c736699"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component, eOpts"
                ],
                "fn": "getWaitingPatient",
                "implHandler": [
                    "component.getEl().on('click', function(e, t) {",
                    "    Ext.Msg.alert('Test',t.Pid);",
                    "//     e.stopEvent();",
                    "//     Ext.Msg.alert('Test','link ' + t.text + ' clicked');",
                    "}, null, {delegate: 'a'}",
                    ");"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getWaitingPatient",
            "designerId": "6c54cbbb-c10e-4ee9-a4bb-240124b60c94"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "gridpanel",
                    "record",
                    "item",
                    "index",
                    "e",
                    "options"
                ],
                "fn": "openAssignWindow",
                "implHandler": [
                    "        var assignGrid=Ext.create('Inpatient.view.AssignBeds', {});",
                    "        var assignWindow=Ext.create('Ext.window.Window', {",
                    "            title: 'Assign Beds',",
                    "            resizable:false",
                    "        });",
                    "",
                    "",
                    "        assignGrid.down('#pid').setValue(record.get('Pid'));",
                    "        assignGrid.down('#names').setValue(record.get('Names'));",
                    "        assignGrid.down('#encounterNo').setValue(record.get('Encounter_Nr'));",
                    "        assignGrid.down('#dob').setValue(record.get('Dob'));",
                    "        assignGrid.down('#wardno').setValue(record.get('WardNo'));",
                    "        assignGrid.down('#sex').setValue(record.get('Sex'));",
                    "        assignGrid.down('#admissiondate').setValue(record.get('AdmissionDate'));",
                    "",
                    "        assignWindow.add(assignGrid);",
                    "        assignWindow.show();",
                    "",
                    "       // Ext.Msg.alert(record.get('Encounter_Nr'));"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openAssignWindow",
            "designerId": "bcbeed19-84d1-4841-ac39-1468acb68681"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "view, rowIndex, colIndex, item, e, record, row"
                ],
                "fn": "assignBed",
                "implHandler": [
                    "if(record.get('Pid')===''){",
                    "    var pid=view.up('grid').down('#pid').getValue();",
                    "    var encNo=view.up('grid').down('#encounterNo').getValue();",
                    "    var str=record.get('RoomNo');",
                    "    var room=str.split(\" \");",
                    "    var ward_nr=view.up('grid').down('#wardno').getValue();",
                    "    var bed=record.get('BedNo');",
                    "    Ext.Msg.alert('Test',room[1]+\",\"+record.get('BedNo')+\",\"+pid+\",\"+ward_nr);",
                    "",
                    "    Ext.Ajax.request({",
                    "        url: '../../data/getDataFunctions.php?task=assignBed&pid='+pid+\"&encNr=\"+encNo+\"&room=\"+room[1]+\"&bed=\"+bed+\"&wardNo=\"+ward_nr,",
                    "",
                    "        success: function(response){",
                    "           var occupancyStore =Ext.data.StoreManager.lookup('OccupancyStore');",
                    "           var waitingListStore =Ext.data.StoreManager.lookup('WaitingListStore');",
                    "           occupancyStore.load({",
                    "               params:{",
                    "                    wardId:ward_nr",
                    "               }",
                    "           });",
                    "",
                    "           waitingListStore.load({",
                    "               params:{",
                    "                    wardNo:ward_nr",
                    "               }",
                    "           });",
                    "",
                    "            view.up('window').close();",
                    "",
                    "",
                    "        },",
                    "        scope: this",
                    "    });",
                    "}",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "assignBed",
            "designerId": "b69583a5-6bb1-47da-817a-74058cb50e2c"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "invoicespanel",
                "selector": "invoicespanel"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string"
            },
            "name": "invoicespanel",
            "designerId": "592538ee-e219-4bb1-9479-6ad62d8f0f16"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "textField, the, eOpts"
                ],
                "fn": "getPatientName",
                "implHandler": [
                    "var pid=textField.getValue();",
                    "        // var pnames='as';",
                    "Ext.Ajax.request({",
                    "    url: '../../data/getDataFunctions.php?task=getEncounter',",
                    "    params: {",
                    "        pid: pid",
                    "    },",
                    "    success: function(response){",
                    "        var encDetails= Ext.util.JSON.decode(response.responseText);",
                    "        pnames=encDetails.encounterNr[0].FirstName+\" \"+encDetails.encounterNr[0].LastName+\" \"+encDetails.encounterNr[0].SurName;",
                    "",
                    "        textField.up('panel').down('#txtPatientName').setValue(pnames);",
                    "        textField.up('panel').down('#encNr').setValue(encDetails.encounterNr[0].EncounterNr);",
                    "        textField.up('panel').down('#txtBillNumber').setValue(encDetails.encounterNr[0].BillNumber);",
                    "",
                    "    },",
                    "    scope: this",
                    "});",
                    "",
                    "// var billnumberStore=Ext.data.StoreManager.lookup('BillNumbersStore');",
                    "// billnumberStore.load({",
                    "//     params:{",
                    "//         pid:pid",
                    "//     }",
                    "// });"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getPatientName",
            "designerId": "0b43947e-ea74-4b31-bf1b-5639b9ce3a14"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "view",
                    "rowIndex",
                    "colIndex",
                    "item",
                    "e",
                    "record",
                    "row"
                ],
                "fn": "openNotes",
                "implHandler": [
                    "    var notes=Ext.create('Inpatient.view.IPNotes', {});",
                    "    var notesWindow=Ext.create('Ext.window.Window', {",
                    "        title: 'Patients Notes',",
                    "        resizable:false",
                    "    });",
                    "",
                    "    this.getPatientDetails(record.get('Pid'));",
                    "",
                    "    this.getPatientdetails().down('#pid').setValue(record.get('Pid'));",
                    "    this.getPatientdetails().down('#encounterNo').setValue(record.get('EncounterNo'));",
                    "    this.getPatientdetails().down('#names').setValue(record.get('Names'));",
                    "    this.getPatientdetails().down('#dob').setValue(record.get('BirthDate'));",
                    "    this.getPatientdetails().down('#sex').setValue(record.get('Sex'));",
                    "    this.getPatientdetails().down('#paymode').setValue(record.get('PaymentMode'));",
                    "    this.getPatientdetails().down('#wardno').setValue(record.get('WardID'));",
                    "    this.getPatientdetails().down('#roomno').setValue(record.get('RoomNo'));",
                    "    this.getPatientdetails().down('#bedno').setValue(record.get('BedNo'));",
                    "    this.getPatientdetails().down('#admissiondate').setValue(record.get('AdmissionDate'));",
                    "",
                    "var notesStore =Ext.data.StoreManager.lookup('NotesStore');",
                    "notesStore.load({",
                    "    params:{",
                    "        encNr:record.get('EncounterNo')",
                    "    }",
                    "});",
                    "",
                    "    notesWindow.add(notes);",
                    "    notesWindow.show();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openNotes",
            "designerId": "568aab7e-3f19-44f2-85a6-5c222f4a0719"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "ipnotes",
                "selector": "ipnotes",
                "xtype": "ipnotes"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "ipnotes",
            "designerId": "e85cbb52-be19-4abd-b4d5-6c98596672a5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveNotes",
                "implHandler": [
                    "",
                    "var form = button.up('panel').getForm(); // get the basic form",
                    "var encounterNo=button.up('panel').down('#encounterNo').getValue();",
                    "var locationNr=button.up('panel').down('#wardno').getValue();",
                    "if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "    form.submit({",
                    "        params:{",
                    "          encounterNo:encounterNo,",
                    "          locationNr:locationNr",
                    "        },",
                    "        success: function (form, action) {",
                    "            Ext.Msg.alert('Thank you!', 'The Notes has been saved Successfully.');",
                    "            button.up('form').getForm().reset();",
                    "            button.up('window').hide();",
                    "",
                    "        },",
                    "        failure: function (form, action) {",
                    "            var jsonResp = Ext.decode(action.response.responseText);",
                    "",
                    "            Ext.Msg.alert('Failed', 'Could not save Notes. \\n Error=' + jsonResp.error);",
                    "        }",
                    "    });",
                    "} else { // display error alert if the data is invalid",
                    "    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveNotes",
            "designerId": "61126d78-3298-43ea-9ca9-05e95d3bd9f3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "pid"
                ],
                "fn": "getPatientDetails",
                "implHandler": [
                    "var encDetails='';",
                    "Ext.Ajax.request({",
                    "    url: '../../data/getDataFunctions.php?task=getEncounter',",
                    "    params: {",
                    "        pid: pid",
                    "    },",
                    "    success: function(response){",
                    "        var encDetails= Ext.util.JSON.decode(response.responseText);",
                    "    },",
                    "    scope: this",
                    "});",
                    "",
                    "return encDetails;"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getPatientDetails",
            "designerId": "ac5599cd-01cb-472a-be76-3ec5a0a77b38"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "patientdetails",
                "selector": "patientdetails",
                "xtype": "patientdetails"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "patientdetails",
            "designerId": "a1dec801-033e-4cb9-820e-4f26ec4a18f4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "openDoctorsNotes",
                "implHandler": [
                    "//var sid=record.get('UrlAppend');",
                    "var pid=button.up('panel').down('#pid').getValue();",
                    "var encounterNr=button.up('panel').down('#encounterNo').getValue();",
                    "",
                    "",
                    "var urlholder=\"reports/doctors_notes.php?pid=\"+pid+\"&encounterNr=\"+encounterNr;",
                    "invwin=window.open(urlholder,\"width=650,height=600,menubar=no,resizable=yes,scrollbars=yes\");"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openDoctorsNotes",
            "designerId": "1c4869b1-a5de-433e-9c9e-0a837268429e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "openNursesNotes",
                "implHandler": [
                    "//var sid=record.get('UrlAppend');",
                    "var pid=button.up('panel').down('#pid').getValue();",
                    "var encounterNr=button.up('panel').down('#encounterNo').getValue();",
                    "",
                    "",
                    "var urlholder=\"reports/nurses_cardex.php?pid=\"+pid+\"&encounterNr=\"+encounterNr;",
                    "invwin=window.open(urlholder,\"width=650,height=600,menubar=no,resizable=yes,scrollbars=yes\");"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openNursesNotes",
            "designerId": "6ff842c2-1e7a-4403-a704-2b32911e55a5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "previewInvoice",
                "implHandler": [
                    "var invoiceDetails=button.up('panel').down('#invoiceDetails');",
                    "let invoiceHeaderDetails=button.up('panel').down('#invoiceHeaderDetails');",
                    "",
                    "var pid=button.up('panel').down('#txtInvoicePid').getValue();",
                    "var bill_number=button.up('panel').down('#txtBillNumber').getValue();",
                    "var includeReceipt=button.up('panel').down('#includeReceipt').getValue();",
                    "var includeNhif=button.up('panel').down('#includeNhif').getValue();",
                    "var invoiceType=button.up('panel').down('#invoiceType').getValue();",
                    "var encNr=button.up('panel').down('#encNr').getValue();",
                    "",
                    "Ext.Ajax.request({",
                    "    url: '../../data/getDataFunctions.php?task=generateInvoice',",
                    "    params: {",
                    "        pid: pid,",
                    "        bill_number:bill_number,",
                    "        includeReceipt:includeReceipt,",
                    "        includeNhif:includeNhif,",
                    "        invoiceType:invoiceType,",
                    "        encNr:encNr",
                    "    },",
                    "    success: function(response){",
                    "        var encDetails= response.responseText;",
                    "            var div = Ext.fly('invoiceDetails');",
                    "                   var htmlList = encDetails;",
                    "",
                    "                   div.update(htmlList);",
                    "",
                    "    },",
                    "    scope: this",
                    "});",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "previewInvoice",
            "designerId": "f75a9ef8-a682-4a54-b4b4-5b4357f7f96d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "printInvoices",
                "implHandler": [
                    "var pid=button.up('panel').down('#txtInvoicePid').getValue();",
                    "var bill_number=button.up('panel').down('#txtBillNumber').getValue();",
                    "var includeReceipt=button.up('panel').down('#includeReceipt').getValue();",
                    "var includeNhif=button.up('panel').down('#includeNhif').getValue();",
                    "var invoiceType=button.up('panel').down('#invoiceType').getValue();",
                    "var encNr=button.up('panel').down('#encNr').getValue();",
                    "",
                    "",
                    "",
                    "var urlholder=\"reports/detail_invoice_pdf.php?pid=\"+pid+\"&billNumber=\"+bill_number+\"&encNr=\"+encNr+\"&receipt=1\";",
                    "invwin=window.open(urlholder,\"transwin<?php echo $sid ?>\",\"width=650,height=600,menubar=no,resizable=yes,scrollbars=yes\");"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "printInvoices",
            "designerId": "ad28ca86-49be-41a2-9802-b3000449fbf7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "mnu"
                ],
                "fn": "openPanel",
                "implHandler": [
                    "var selectedPanel=mnu.getItemId();",
                    "//Ext.Msg.alert('Test',selectedPanel);",
                    "var formsContainer=Ext.create(\"Inpatient.view.\"+selectedPanel,{});",
                    "var centerContainer=this.getMainpanel().down(\"container[region=center]\");",
                    "centerContainer.removeAll();",
                    "centerContainer.add(formsContainer);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openPanel",
            "designerId": "88703478-6202-4af7-bb1e-4e641dc0bc44"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "mainpanel",
                "selector": "mainpanel",
                "xtype": "mainpanel"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "mainpanel",
            "designerId": "62be0c26-151d-409c-bbad-e763d4229238"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "prescripionform",
                "selector": "prescripionform",
                "xtype": "prescripionform"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "prescripionform",
            "designerId": "a0040851-fdfc-497b-baf4-1caff3a140f6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "view",
                    "rowIndex",
                    "colIndex",
                    "item",
                    "e",
                    "record",
                    "row"
                ],
                "fn": "openPrescription",
                "implHandler": [
                    "var prescription=Ext.create('Inpatient.view.PrescriptionForm', {});",
                    "var prescriptionWindow=Ext.create('Ext.window.Window', {",
                    "    title: 'Create Prescription',",
                    "    resizable:false",
                    "});",
                    "",
                    "var d=new Date();",
                    "",
                    "prescription.down('#Pid').setValue(record.get('Pid'));",
                    "prescription.down('#Names').setValue(record.get('Names'));",
                    "prescription.down('#EncounterNo').setValue(record.get('EncounterNo'));",
                    "prescription.down('#PrescribeDate').setValue(new Date());",
                    "// prescription.down('#dischargeDate').setValue(d);",
                    "// prescription.down('#dischargeTime').setValue(d);",
                    "",
                    "// discharge.down('#wardNo').setValue(record.get('WardID'));",
                    "",
                    "prescriptionWindow.add(prescription);",
                    "prescriptionWindow.show();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openPrescription",
            "designerId": "c2f695db-2996-4f8e-acde-f2a5ded0bdec"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "dosage",
                "selector": "dosage",
                "xtype": "dosage"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "dosage",
            "designerId": "6e29e028-bef1-41cd-9683-f27e52f7fd55"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "view",
                    "rowIndex",
                    "colIndex",
                    "item",
                    "e",
                    "record",
                    "row"
                ],
                "fn": "openTransferWindow",
                "implHandler": [
                    "var tranferPanel=Ext.create('Inpatient.view.PatientTransfer', {});",
                    "var transferWindow=Ext.create('Ext.window.Window', {",
                    "    title: 'Patient Transfer',",
                    "    resizable:false",
                    "});",
                    "",
                    "this.getPatientDetails(record.get('Pid'));",
                    "",
                    "this.getPatientdetails().down('#pid').setValue(record.get('Pid'));",
                    "this.getPatientdetails().down('#encounterNo').setValue(record.get('EncounterNo'));",
                    "this.getPatientdetails().down('#names').setValue(record.get('Names'));",
                    "this.getPatientdetails().down('#dob').setValue(record.get('BirthDate'));",
                    "this.getPatientdetails().down('#sex').setValue(record.get('Sex'));",
                    "this.getPatientdetails().down('#paymode').setValue(record.get('PaymentMode'));",
                    "this.getPatientdetails().down('#wardno').setValue(record.get('WardID'));",
                    "this.getPatientdetails().down('#roomno').setValue(record.get('RoomNo'));",
                    "this.getPatientdetails().down('#bedno').setValue(record.get('BedNo'));",
                    "this.getPatientdetails().down('#admissiondate').setValue(record.get('AdmissionDate'));",
                    "",
                    "transferWindow.add(tranferPanel);",
                    "transferWindow.show();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openTransferWindow",
            "designerId": "9c84d6d5-a30f-44c1-be04-0f673a859979"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "paienttransfer",
                "selector": "patienttransfer",
                "xtype": "patienttransfer"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "paienttransfer",
            "designerId": "0525fc49-4249-4b1a-ade9-32dbe9e93811"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "radio",
                    "newValue",
                    "oldValue",
                    "eOpts"
                ],
                "fn": "activateWardsList",
                "implHandler": [
                    "if(radio.up('form').down('#transBed').hidden===false){",
                    "    radio.up('form').down('#transBed').hide();",
                    "    radio.up('form').down('#treansferBed').checked=false;",
                    "}",
                    "",
                    "if(newValue===true){",
                    "    var transPanel=radio.up('form').down('#transWard').show();",
                    "    console.log(radio.id);",
                    "}else{",
                    "    var transPanel=radio.up('form').down('#transWard').hide();",
                    "    console.log(radio.id);",
                    "}",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "activateWardsList",
            "designerId": "8910f0e7-9af7-4797-9e20-41233736f283"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "radio",
                    "newValue",
                    "oldValue",
                    "eOpts"
                ],
                "fn": "activateBedList",
                "implHandler": [
                    "if(radio.up('form').down('#transWard').hidden===false){",
                    "    radio.up('form').down('#transWard').hide();",
                    "    radio.up('form').down('#treansferWard').checked=false;",
                    "}",
                    "",
                    "if(newValue===true){",
                    "    var transPanel=radio.up('form').down('#transBed').show();",
                    "    console.log(radio.id);",
                    "}else{",
                    "     var transPanel=radio.up('form').down('#transBed').hide();",
                    "    console.log(radio.id);",
                    "}",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "activateBedList",
            "designerId": "c3272251-80be-458f-8fbf-0564a1687737"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "findItems",
                "implHandler": [
                    "var searchParam=this.getServiceslist().down('#txtSearchItems').getValue();",
                    "",
                    "var serviceListStore =Ext.data.StoreManager.lookup('ServiceListStore');",
                    "serviceListStore.load({",
                    "    params: {",
                    "        searchParam: searchParam",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "",
                    "    },",
                    "    scope: this",
                    "",
                    "});"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "findItems",
            "designerId": "23a049df-0de4-487e-abf6-8e09006f2288"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "getServiceList",
                "implHandler": [
                    "var serviceList=Ext.create('Inpatient.view.ServicesList', {});",
                    "var serviceListWindow=Ext.create('Ext.window.Window', {",
                    "    title: 'Services List',",
                    "    resizable:true,",
                    "    minWidth:300,",
                    "    minHeight:300",
                    "});",
                    "",
                    "serviceListWindow.add(serviceList);",
                    "serviceListWindow.show();",
                    "serviceList.down('#sourceID').setValue('Orders');"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getServiceList",
            "designerId": "917e338e-cfd5-4806-81f2-d9baf942b525"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "serviceslist",
                "selector": "serviceslist",
                "xtype": "serviceslist"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "serviceslist",
            "designerId": "41b4ec30-181a-4b28-aa9d-5b5245156394"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field",
                    "newValue",
                    "oldValue",
                    "eOpts"
                ],
                "fn": "filterItems",
                "implHandler": [
                    "//Ext.Msg.alert('Test',newValue);",
                    "var grid = field.up('grid');",
                    "grid.store.clearFilter();",
                    "if (newValue) {",
                    "    var matcher = new RegExp(Ext.String.escapeRegex(newValue), \"i\");",
                    "    grid.store.filter({",
                    "        filterFn: function(item) {",
                    "            return matcher.test(item.get('item_description')) ||",
                    "                matcher.test(item.get('partcode'));",
                    "        }",
                    "    });",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "filterItems",
            "designerId": "368794c3-2e31-4aa2-951a-9892aaf78b71"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "gridpanel",
                    "record",
                    "item",
                    "index",
                    "e",
                    "options"
                ],
                "fn": "addSelectedService",
                "implHandler": [
                    "var store =Ext.data.StoreManager.lookup('ServiceListStore');",
                    "var store1 =Ext.data.StoreManager.lookup('DebitStore');",
                    "store.remove(record);",
                    "store1.add(record);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "addSelectedService",
            "designerId": "21d71c66-25b0-40b5-a74b-1ce5231270f5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getCreditNo",
                "implHandler": [
                    "Ext.Ajax.request({",
                    "    url: '../../data/getDataFunctions.php?task=geNextTransNo&transType=9',",
                    "",
                    "    success: function(response){",
                    "        var respText= Ext.util.JSON.decode(response.responseText);",
                    "        var transNo=respText.transNo;",
                    "",
                    "        this.getCredit().down('#creditNo').setValue(transNo);",
                    "",
                    "         var d=new Date();",
                    "         this.getCredit().down('#creditDate').setValue(d);",
                    "",
                    "",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getCreditNo",
            "designerId": "33d86496-4d6f-426a-b54d-024981795228"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "pid",
                    "billNumber"
                ],
                "fn": "getInvoiceAmount",
                "implHandler": [
                    "Ext.Ajax.request({",
                    "     url: '../../data/getDataFunctions.php?task=getTotalBill',",
                    "     params:{",
                    "         pid:pid,",
                    "         bill_number:billNumber",
                    "     },",
                    "     success: function(response){",
                    "         var respText= Ext.util.JSON.decode(response.responseText);",
                    "",
                    "         this.getNhifcredit().down('#invoiceAmount').setValue(respText.invoiceAmount[0].amount);",
                    "",
                    "     },",
                    "     scope: this",
                    " });"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getInvoiceAmount",
            "designerId": "02a3bcc4-d816-4e79-a3cb-1a2cc0c9ccd7"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "nhifcredits",
                "selector": "nhifcredits",
                "xtype": "nhifcredits"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "nhifcredits",
            "designerId": "10d6290d-9683-4192-9699-b12ca6a3db51"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "previewNhifList",
                "implHandler": [
                    "var searchParam=this.getNhifcredits().down('#searchParam').getValue();",
                    "var startDate=Ext.Date.format(new Date(this.getNhifcredits().down('#startDate').getValue()), 'Y-m-d');",
                    "var endDate=Ext.Date.format(new Date(this.getNhifcredits().down('#endDate').getValue()), 'Y-m-d');",
                    "",
                    "var nhifListStore =Ext.data.StoreManager.lookup('NhifCreditStore');",
                    "nhifListStore.load({",
                    "    params: {",
                    "        searchParam: searchParam,",
                    "        startDate:startDate,",
                    "        endDate:endDate",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "",
                    "    },",
                    "    scope: this",
                    "",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "previewNhifList",
            "designerId": "3b11aee2-ca04-4338-b4ab-7964f6ec93d4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "exportToExcel",
                "implHandler": [
                    "var mypanel=button.up('panel').getItemId();",
                    "//Ext.Msg.alert('Panel',mypanel.getItemId());",
                    "var searchParam=this.getNhifcredits().down('#searchParam').getValue();",
                    "var startDate=Ext.Date.format(new Date(this.getNhifcredits().down('#startDate').getValue()), 'Y-m-d');",
                    "var endDate=Ext.Date.format(new Date(this.getNhifcredits().down('#endDate').getValue()), 'Y-m-d');",
                    "",
                    "if(mypanel==='NhifCredits'){",
                    "    var urlholder=\"reports/exportNhif.php?searchParam=\"+searchParam+\"&startDate=\"+startDate+\"&endDate=\"+endDate;",
                    "        invwin=window.open(urlholder,\"width=650,height=600,menubar=no,resizable=yes,scrollbars=yes\");",
                    "",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "exportToExcel",
            "designerId": "4f7bf868-1dc8-4893-8b21-20a7eb44c29c"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "invoiceslist",
                "selector": "invoiceslist",
                "xtype": "invoiceslist"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "invoiceslist",
            "designerId": "b3cc17e5-df79-4276-801f-cb15eb1e80bc"
        }
    ]
}