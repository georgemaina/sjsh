/*
 * File: app/controller/Inpatient.js
 * Date: Wed Aug 12 2020 16:56:58 GMT+0300 (E. Africa Standard Time)
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Inpatient.controller.Inpatient', {
    extend: 'Ext.app.Controller',
    alias: 'controller.inpatient',

    models: [
        'BillModel',
        'DebitDetails',
        'ItemsList',
        'EncounterNumbers',
        'EncounterDetails',
        'BillNumbers',
        'ReceiptModel',
        'InsuranceCompanies',
        'NhifRates',
        'Wards',
        'OccupancyList',
        'NotesModel',
        'NhifCredits',
        'PendingBills'
    ],
    stores: [
        'BillStore',
        'ItemsListStore',
        'DebitStore',
        'EncounterDetailStore',
        'EncounterNosStore',
        'BillNumbersStore',
        'Invoices',
        'ReceiptStore',
        'InsuranceCompaniesStore',
        'NhifRateStore',
        'OccupancyStore',
        'NotesStore',
        'WardsListStore',
        'ServiceListStore',
        'NhifCreditStore',
        'PendingBills'
    ],
    views: [
        'Bills',
        'Debit',
        'NhifCredit',
        'ChargeBeds',
        'FinaliseInvoice',
        'InterimInvoice',
        'Receipts',
        'InsuranceCredit',
        'WardOccupancy',
        'Vitals',
        'Discharge',
        'InvoicePanel',
        'PatientDetails',
        'AssignBeds',
        'IPNotes',
        'MainPanel',
        'PrescriptionForm',
        'ItemsList',
        'Dosage',
        'PatientTransfer',
        'ServicesList',
        'Credit',
        'NhifCredits',
        'InvoicesList'
    ],

    refs: {
        debit: {
            selector: 'debit',
            xtype: 'debit'
        },
        credit: {
            selector: 'credit',
            xtype: 'credit'
        },
        bills: {
            selector: 'bills',
            xtype: 'bills'
        },
        chargebeds: {
            selector: 'chargebeds',
            xtype: 'chargebeds'
        },
        itemslist: {
            selector: 'itemslist',
            xtype: 'itemslist'
        },
        nhifcredit: {
            selector: 'nhifcredit',
            xtype: 'nhifcredit'
        },
        finaliseinvoice: {
            selector: 'finaliseinvoice',
            xtype: 'finaliseinvoice'
        },
        interiminvoice: {
            selector: 'interiminvoice',
            xtype: 'interiminvoice'
        },
        invoicedetails: {
            selector: 'invoicedetails',
            xtype: 'invoicedetails'
        },
        receipts: {
            selector: 'receipts',
            xtype: 'receipts'
        },
        insurancecredit: {
            selector: 'insurancecredit',
            xtype: 'insurancecredit'
        },
        vitals: {
            selector: 'vitals',
            xtype: 'vitals'
        },
        invoicespanel: 'invoicespanel',
        ipnotes: {
            selector: 'ipnotes',
            xtype: 'ipnotes'
        },
        patientdetails: {
            selector: 'patientdetails',
            xtype: 'patientdetails'
        },
        mainpanel: {
            selector: 'mainpanel',
            xtype: 'mainpanel'
        },
        prescripionform: {
            selector: 'prescripionform',
            xtype: 'prescripionform'
        },
        dosage: {
            selector: 'dosage',
            xtype: 'dosage'
        },
        paienttransfer: {
            selector: 'patienttransfer',
            xtype: 'patienttransfer'
        },
        serviceslist: {
            selector: 'serviceslist',
            xtype: 'serviceslist'
        },
        nhifcredits: {
            selector: 'nhifcredits',
            xtype: 'nhifcredits'
        },
        invoiceslist: {
            selector: 'invoiceslist',
            xtype: 'invoiceslist'
        }
    },

    init: function(application) {
        this.control({
            '#cmdItemsList':{
                click:this.getItemsList
            },
            '#itemsList':{
                itemdblclick:this.addSelectedItem
            },
            '#serviceList':{
                itemdblclick:this.addSelectedService
            },
            '#cmdAddRow':{
                click:this.addRow
            },
            '#cmdSaveDebits':{
                click:this.saveDebits
            },
            '#txtPid':{
                blur:this.getEncounter
            },
            '#cmdSearchBills':{
                click:this.searchBills
            },
            '#cmdCombineBills':{
                click:this.combineBills
            },
            '#txtSearch':{
                specialkey:this.getPressedKey
            },
            '#cmdUpdateBill':{
                click:this.updateBillChanges
            },
            '#deleteItem':{
                click:this.deleteBillItem
            },
            'bills actioncolumn[id=deletebill2]':{
                click:this.deleteBillItem
            },
            '#cmdPreviewInterim':{
                click:this.previewInterimInvoice
            },
            '#txtSearchInterim':{
                blur:this.getBillNumbers
            },
            '#cmdDeleteSelected':{
                click:this.removeSelectedItems
            },
            '#cmdDeleteReceipts':{
                click:this.removeSelectedReceipts
            },
            '#cmdUpdateReceipts':{
                click:this.updateReceipts
            },
            '#txtPid2':{
                blur:this.getEncounterDetails
            },
            '#creditAmount':{
                blur:this.getBalance
            },
            '#cmdSave':{
                click:this.saveInsuranceCredit
            },
            '#cmdSearchReceipt':{
                click:this.searchReceipt
            },
            '#txtNhifPid':{
                blur:this.getEncounterDetails2
            },
            '#nhifClientType':{
                change:this.getNhifRates
            },
            '#cmdSaveNhif':{
                click:this.saveNifCredit
            },
            '#cmdDeleteRow':{
                click:this.deleteRow
            },
            '#SaveVitals':{
                click:this.saveVitals
            },
            'wardoccupancy actioncolumn[id=openVitals]':{
                click:this.openVitals
            },
            '#cmdSearchItems':{
                click:this.searchItems
            },
            '#searchParam':{
               specialkey:this.getPressedKey
            },
            '#cmdClose':{
                click:this.closewindow
            },
            'wardoccupancy actioncolumn[id=discharge]':{
                click:this.openDischargeForm
            },
            'wardoccupancy actioncolumn[id=prescribe]':{
                click:this.openPrescription
            },
            'wardoccupancy actioncolumn[id=transferPatient]':{
                click:this.openTransferWindow
            },
            '#saveDischarge':{
                click:this.discharge
            },
            '#waitingList':{
                itemdblclick:this.openAssignWindow
            },
            '#cmdAssign':{
                click:this.assignBed
            },
            'assignbeds actioncolumn[id=assignToBed]':{
                click:this.assignBed
            },
            '#cmdPreviewInvoice':{
                click:this.previewInvoice
            },
            '#txtInvoicePid':{
                blur:this.getPatientName
            },
            '#txtSearchReceipt':{
                specialkey:this.getPressedKey
            },
            'wardoccupancy actioncolumn[id=notes]':{
                click:this.openNotes
            },
            '#cmdSaveNotes':{
                click:this.saveNotes
            },
            '#cmdDoctorsNotes':{
                click:this.openDoctorsNotes
            },
            '#cmdNursesNotes':{
                click:this.openNursesNotes
            },
            '#cmdPrintInvoice':{
                click:this.printInvoices
            },
            '#DashBoard':{
                click:this.openPanel
            },
            '#WardOccupancy':{
                click:this.openPanel
            },
            '#Bills':{
                click:this.openPanel
            },
            '#Debit':{
                click:this.openPanel
            },
            '#Credit':{
                click:this.openPanel
            },
            '#NhifCredit':{
                click:this.openPanel
            },
            '#InsuranceCredit':{
                click:this.openPanel
            },
            '#FinaliseInvoice':{
                click:this.openPanel
            },
            '#InvoicePanel':{
                click:this.openPanel
            },
            '#InvoicesList':{
                click:this.openPanel
            },
            '#NhifCredits':{
                click:this.openPanel
            },
            '#OccupancyList':{
                click:this.openPanel
            },
            '#AdmDis':{
                click:this.openPanel
            },
            '#treansferWard':{
                change:this.activateWardsList
            },
            '#treansferBed':{
                change:this.activateBedList
            },
            '#txtSearchItems':{
                specialkey:this.getPressedKey,
                change:this.filterItems
            },
            '#cmdServiceList':{
                click:this.getServiceList
            },
            '#cmdPreviewNhif':{
                click:this.previewNhifList
            },
            '#cmdExport':{
                click:this.exportToExcel
            },
            'cmdPrint':{
                click:this.printPdf
            }
        });
    },

    getItemsList: function(button) {
        var itemsList=Ext.create('Inpatient.view.ItemsList', {});
        var itemsListWindow=Ext.create('Ext.window.Window', {
                    title: 'Items List',
                    resizable:true,
                    minWidth:300,
                    minHeight:300
                });

        itemsListWindow.add(itemsList);
        itemsListWindow.show();
        itemsList.down('#sourceID').setValue('Orders');
    },

    addSelectedItem: function(gridpanel, record, item, index, e, options) {
        var sourceID=this.getItemslist().down('#sourceID').getValue();
        if(sourceID=='Orders'){
            var store =Ext.data.StoreManager.lookup('ItemslistStore');
            var store1 =Ext.data.StoreManager.lookup('OrderStocksStore');
            store.remove(record);
            store1.add(record);
        }else{
            var counter=this.getPrescripionform().down("#counter").getValue();
            var dosage=Ext.create("Inpatient.view.Dosage",{});
            dosage.itemId=record.get('partcode');


            dosage.down('#partCode').setValue(record.get('partcode'));
            dosage.down('#description').setValue(record.get('item_description'));
            dosage.down('#qty').setValue(record.get('qty'));
            dosage.down('#unitCost').setValue(record.get('unit_price'));
            dosage.down('#dose').setValue(1);
            dosage.down('#itemNumber').setValue(counter);

            var i=counter;
            dosage.down('#partCode').name='partCode'+ i;
            dosage.down('#description').name='description'+ i;
            dosage.down('#dose').name='dose'+ i ;
            dosage.down('#timesperday').name='timesperday'+ i;
            dosage.down('#days').name='days'+ i ;
            dosage.down('#total').name='total'+ i ;
            dosage.down('#comment').name='comment'+ i;


            newVar=parseInt(counter)+1;

            this.getPrescripionform().down('#dosageList').add(dosage);
            this.getPrescripionform().down("#counter").setValue(newVar);
        }

    },

    addRow: function(button) {
         var invoice_item = new Inpatient.model.ItemsList({
             PartCode: 'wes',
             Description: 'sds',
             Category: 'sds',
             Price:'12'
         });
    },

    saveDebits: function(button) {
        var form = button.up('form').getForm(); // get the basic form

        var debitStore =Ext.data.StoreManager.lookup('DebitStore');
        var debitRecord = debitStore.getRange();

        var pid=this.getDebit().down('#txtPid').getValue();
        var debitDate=this.getDebit().down('#debitDate').getValue();
        var debitno=this.getDebit().down('#debitNo').getValue();
        var billNumber=this.getDebit().down('#billNumber').getValue();
        var encounterNo=this.getDebit().down('#encounterNo').getValue();


        var gridData = Array();

        Ext.each(debitRecord, function (record) {
            gridData.push(record.data);
        });

               if (form.isValid()) { // make sure the form contains valid data before submitting
                    form.submit({
                        params:{
                            pid:pid,
                            debitDate:debitDate,
                            debitNo:debitno,
                            billNumber:billNumber,
                            encounterNo:encounterNo,
                            gridData: Ext.util.JSON.encode(gridData)
                        },
                        success: function(form, action) {
                              Ext.Msg.alert("Debits","Debit Saved Successfully");
                              form.reset();
                              debitStore.load({});

                        },
                        failure: function(form, action) {
                            Ext.Msg.alert('Failed', 'Could not save debtor. Error='+action.result.errors.clientNo);
                        }
                    });
                } else { // display error alert if the data is invalid
                    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
                }
    },

    getEncounter: function(textfield, The, eOpts) {
        // Ext.Msg.alert('Test',textfield.up('panel').down('#txtSource').getValue());
        var strSource=textfield.up('panel').down('#txtSource').getValue();
        var pid=textfield.up('panel').down('#txtPid').getValue();

        Ext.Ajax.request({
            url: '../../data/getDataFunctions.php?task=getEncounter',
            params: {
                pid: pid
            },
            success: function(response){

                var encDetails= Ext.util.JSON.decode(response.responseText);

                pnames=encDetails.encounterNr[0].FirstName+" "+encDetails.encounterNr[0].LastName+" "+encDetails.encounterNr[0].SurName;
                //  Ext.ComponentQuery.query("#pname")[0].setValue(pnames);
                textfield.up('panel').down('#pname').setValue(pnames);
                textfield.up('panel').down('#billNumber').setValue(encDetails.encounterNr[0].BillNumber);
                textfield.up('panel').down('#encounterNo').setValue(encDetails.encounterNr[0].EncounterNr);

                if(strSource==='debit'){
                     textfield.up('panel').down('#debitDate').setValue(encDetails.encounterNr[0].CurrDate);
                     this.getDebitNo();
                }else if(strSource==='credit'){
                    textfield.up('panel').down('#creditDate').setValue(encDetails.encounterNr[0].CurrDate);
                    this.getCreditNo();
                }

            },
            scope:this
        });
    },

    searchBills: function(button) {
        var searchParam=this.getBills().down('#txtSearch').getValue();
        var billNo=this.getBills().down('#cmbBill1').getValue();
        var billStore =Ext.data.StoreManager.lookup('BillStore');
        billStore.load({
            params: {
                pid: searchParam,
                bill_number:billNo
            },
            callback: function(records, operation, success) {

            },
            scope: this

        });

        var billStore2 =Ext.data.StoreManager.lookup('BillNumbersStore');
                    billStore2.load({
                        params: {
                            pid: searchParam
                        },
                        callback: function(records, operation, success) {

                        },
                        scope: this

                    });


    },

    combineBills: function(button) {
        var pid=this.getBills().down('#txtSearch').getValue();
        var bill1=this.getBills().down('#cmbBill1').getValue();
        var bill2=this.getBills().down('#cmbBill2').getValue();
        var enc1=this.getBills().down('#cmbEnc1').getValue();
        var enc2=this.getBills().down('#cmbEnc2').getValue();

        Ext.Msg.show({
            title:'Merge Bills?',
            message: 'Are you sure you want to MERGE the two Bills?',
            buttons: Ext.Msg.YESNOCANCEL,
            icon: Ext.Msg.QUESTION,
            fn: function(btn) {
                if (btn === 'yes') {
                    Ext.Ajax.request({
                            url: '../../data/getDataFunctions.php?task=combineBills',
                            params: {
                                pid:pid,
                                bill1:bill1,
                                bill2:bill2,
                                enc1:enc1,
                                enc2:enc2,
                            }
                        });
                } else if (btn === 'no') {
                    console.log('No pressed');
                } else {
                    console.log('Cancel pressed');
                }
            }
        });




    },

    getPressedKey: function(field, e, options) {
            if (e.getKey() == e.ENTER && field.getItemId()==='txtSearch') {
             //   Ext.Msg.alert('Test',field.getItemId());
               this.searchBills();
            }else if (e.getKey() == e.ENTER && field.getItemId()==='searchParam') {
             //   Ext.Msg.alert('Test',field.getItemId());
                this.searchItems();
            }else if (e.getKey() == e.ENTER && field.getItemId()==='txtSearchReceipt') {
             //   Ext.Msg.alert('Test',field.getItemId());
                this.searchReceipt();
            }else if (e.getKey() == e.ENTER && field.getItemId()==='txtSearchItems') {
             //   Ext.Msg.alert('Test',field.getItemId());
                this.findItems();
            }

    },

    updateBillChanges: function(button) {
        var billStore=Ext.data.StoreManager.lookup('BillStore');

        var updatedRecords = this.getBills().getStore().getUpdatedRecords();
        params=[];
        Ext.each(updatedRecords,function(record){
         params.push(record.data);
        });


        billStore.proxy.extraParams = {
            selectedCount:params.length,
            pid:this.getBills().down('#txtSearch').getValue()
        };

        billStore.sync({
            success: function(response){
                var resp = Ext.JSON.decode(response.responseText);
                Ext.Msg.alert('Update','Successfully updated Bill');
                var billStore=Ext.data.StoreManager.lookup('BillStore');
                billStore.load({});

            },
            failure:function(response){
                var resp = JSON.parse(response.responseText);
                Ext.Msg.alert('Error','Error Updating Bill');

            }
        });
    },

    deleteBillItem: function(view, rowIndex, colIndex, item, e, record, row) {
        // var rec = button.up('grid').getViewModel().get('record');
        // Ext.Msg.alert("Button clicked", "Hey! " + record.get('ID'));
        var ID=record.get('ID');

        Ext.Msg.show({
            title:'Delete Bill Item?',
            msg: 'Are you sure you want to delete',
            buttons: Ext.Msg.YESNOCANCEL,
            icon: Ext.Msg.QUESTION,
            fn: function(rec) {
                if (rec === "yes") {
                    Ext.Ajax.request({
                        url: '../../data/getDataFunctions.php?task=deleteBillItem',
                        params: {
                            ID:record.get('ID'),
                            pid:record.get('Pid')
                        },
                        waitMsg: 'Deleting Item ...',
                        success: function(response){
                            var resp = Ext.JSON.decode(response.responseText);
                            Ext.Msg.alert('Delete',resp.Error);
                            var billStore=Ext.data.StoreManager.lookup('BillStore');
                            billStore.load({});

                        },
                        failure:function(response){
                            var resp = JSON.parse(response);
                            Ext.Msg.alert('Error',resp.Error);

                            //                     Ext.Msg.alert('Error','There was a problem deleting the Part Locations, Contact System Administrator');
                        }
                    });

                }
            }
        });
    },

    previewInterimInvoice: function(button) {
        //reportswindow=Ext.create('Inpatient.view.InvoiceDetails', {});
        var invoiceDetails=button.up('panel').down('#invoiceDetails');
        let invoiceHeaderDetails=button.up('panel').down('#invoiceHeaderDetails');

        var pid=button.up('panel').down('#txtInvoicePid').getValue();
        var billNumber=button.up('panel').down('#txtBillNumber').getValue();


        //*********************************************************************
        //Create the header template
        //*********************************************************************

        var patientStore=Ext.data.StoreManager.lookup("EncounterDetailStore");


        var data1 = [];
        patientStore.load({
            params: {
                pid:pid,
                bill_number:billNumber
            },
            callback: function(records, operation, success) {
                  var tpl1=new Ext.XTemplate(
                         '<Table id=billTitles>',
                       '<tpl for=".">',
                         '<tr><td align=right id=titles>Inpatient No</td><td align=left>{EncounterNr}</td><td align=right>Admission Date</td><td align=left>{AdmissionDate}</td><td>Invoice No</td><td>{BillNumber}</td></tr>',
                         '<tr><td align=right>PID</td><td align=left>{Pid}</td><td align=right>Discharge Date</td><td align=left>{DischargeDate}</td><td></td><td></td></tr>',
                         '<tr><td align=right>Names</td><td align=left>{FirstName} {LastName} {SurName}</td><td></td><td></td><td>Account No</td><td align=left>{}</td></tr>',
                         '<tr><td align=right>Date of Birth</td><td align=left>{DateBirth}</td><td  align=right>Ward</td><td align=left>{Ward}</td><td>Account Name</td><td align=left>{}</td></tr>',
                         '<tr><td align=right>Village</td><td align=left>{Village}</td><td align=right>Room/Bed No</td><td align=left>{RoomNo}</td><td></td><td></td></tr>',
                      '</tpl>',
                         '</table>'
                      );
                    patientStore.each(function(record) {
                    });

                    tpl1.overwrite(invoiceHeaderDetails.body,data1);
            },
            scope: this
        });


        //*******************************************************************
        //End of Header template
        //*******************************************************************


        var billStore=Ext.data.StoreManager.lookup("Invoices");

        var billSum=0;
        var data = [];
        billStore.load({
            params: {
                pid:pid,
                bill_number:billNumber
            },
            callback: function(records, operation, success) {
                var tpl=new Ext.XTemplate(
                        '<Table id=billDetails>',
                        '<tr><th>Date</th><th>Service Description</th><th>Ref No</th><th>Price</th><th>Qty</th><th>Total</th></tr>',
                        '<tpl for=".">',
                            '<tr><td>{Bill_Date}</td>',
                            '<td>{Description}</td>',
                            '<td>{ID}</td>',
                            '<td align=right>{Price}</td>',
                            '<td>{Qty}</td>',
                            '<td align=right>{Total}</td></tr>',
                        '</tpl>',
                        '<tr><td colspan=2 class=totals>Totals</td><td class=totals></td><td class=totals> 0</td><td>{[this.getBillTotal() ]}</td></tr>',
                        '</table>',
                      {
                        getBillTotal:function(){
                            return billSum.toFixed(2);
                        }
                      }
                  );

                    billStore.each(function(record) {
                        data.push(record.getData());
                         billSum += record.get('Total');
                    });

                    tpl.overwrite(invoiceDetails.body,data);
            },
            scope: this
        });








    },

    getBillNumbers: function(field, the, eOpts) {
        //var searchParam=this.getBills().down('#txtSearch').getValue();
        var billStore2 =Ext.data.StoreManager.lookup('BillNumbersStore');
        billStore2.load({
            params: {
                pid: field.getValue()
            },
            callback: function(records, operation, success) {

            },
            scope: this

        });


    },

    removeSelectedItems: function(button) {
        var grid=button.up('grid');

        var srecords=grid.getSelectionModel().getSelection();

        var selectedRowIndexes = [];
        var pids='';

        Ext.iterate(srecords,function(record,index){

            selectedRowIndexes.push(grid.getStore().indexOf(record));

            if(grid.getSelectionModel().hasSelection()){
                pids=pids+record.get('ID')+",";
                Ext.Msg.show({
                    title:'Delete Bill Items?',
                    msg: 'Are you sure you want to delete',
                    buttons: Ext.Msg.YESNOCANCEL,
                    icon: Ext.Msg.QUESTION,
                    fn: function(rec) {
                        if (rec === "yes") {
                            Ext.Ajax.request({
                                url: '../../data/getDataFunctions.php?task=deleteBillItem',
                                params: {
                                    ID:pids,
                                    pid:record.get('Pid')
                                },
                                waitMsg: 'Deleting Item ...',
                                success: function(response){
                                    var resp = Ext.JSON.decode(response.responseText);
                                    Ext.Msg.alert('Delete',resp.Error);
                                    var billStore=Ext.data.StoreManager.lookup('BillStore');
                                    billStore.load({});

                                },
                                failure:function(response){
                                    var resp = JSON.parse(response);
                                    Ext.Msg.alert('Error',resp.Error);

                                    //                     Ext.Msg.alert('Error','There was a problem deleting the Part Locations, Contact System Administrator');
                                }
                            });

                        }
                    }
                });

            }else{
                 Ext.Msg.alert('Test','You have not Selected any Item to Remove');
            }

        });
    },

    removeSelectedReceipts: function(button) {
         var grid=button.up('grid');

                var srecords=grid.getSelectionModel().getSelection();

                var selectedRowIndexes = [];
                var pids='';

                Ext.iterate(srecords,function(record,index){

                    selectedRowIndexes.push(grid.getStore().indexOf(record));

                    if(grid.getSelectionModel().hasSelection()){
                        pids=pids+record.get('Sale_ID')+",";
                        Ext.Msg.show({
                            title:'Delete Receipt Items?',
                            msg: 'Are you sure you want to delete',
                            buttons: Ext.Msg.YESNOCANCEL,
                            icon: Ext.Msg.QUESTION,
                            fn: function(rec) {
                                if (rec === "yes") {
                                    Ext.Ajax.request({
                                        url: '../../data/getDataFunctions.php?task=deleteReceiptItem',
                                        params: {
                                            ID:pids,
                                            pid:record.get('Pid')
                                        },
                                        waitMsg: 'Deleting Receipt ...',
                                        success: function(response){
                                            var resp = Ext.JSON.decode(response.responseText);
                                            Ext.Msg.alert('Delete',resp.Error);
                                            var receiptStore=Ext.data.StoreManager.lookup('ReceiptStore');
                                            receiptStore.load({});

                                        },
                                        failure:function(response){
                                            var resp = JSON.parse(response);
                                            Ext.Msg.alert('Error',resp.Error);

                                            //                     Ext.Msg.alert('Error','There was a problem deleting the Part Locations, Contact System Administrator');
                                        }
                                    });

                                }
                            }
                        });

                    }else{
                         Ext.Msg.alert('Test','You have not Selected any Item to Remove');
                    }

                });
    },

    updateReceipts: function(button) {


        var receiptStore=Ext.data.StoreManager.lookup('ReceiptStore');

        var updatedRecords = this.getReceipts().getStore().getUpdatedRecords();
        params=[];
        Ext.each(updatedRecords,function(record){
         params.push(record.data);
        });


        receiptStore.proxy.extraParams = {
            selectedCount:params.length,
            pid:this.getReceipts().down('#txtSearchReceipt').getValue()
        };

        Ext.Msg.alert('Update','Successfully updated Receipt');

        receiptStore.sync({
            success: function(response){
                var resp = Ext.JSON.decode(response.responseText);
                Ext.Msg.alert('Update','Successfully updated Receipt');
                var receiptStore=Ext.data.StoreManager.lookup('ReceiptStore');
                receiptStore.load({});

            },
            failure:function(response){
                var resp = JSON.parse(response.responseText);
                Ext.Msg.alert('Error','Error Updating Receipt');

            }
        });
    },

    getEncounterDetails: function(textField, the, eOpts) {
        //Ext.Msg.alert('current Form',textField.getValue());


        var pid=textField.getValue();
        // var pnames='as';
        Ext.Ajax.request({
            url: '../../data/getDataFunctions.php?task=getEncounter',
            params: {
                pid: pid
            },
            success: function(response){
                var encDetails= Ext.util.JSON.decode(response.responseText);
                pnames=encDetails.encounterNr[0].FirstName+" "+encDetails.encounterNr[0].LastName+" "+encDetails.encounterNr[0].SurName;

                this.getInsurancecredit().down('#pname').setValue(pnames);
                this.getInsurancecredit().down('#admissionDate').setValue(encDetails.encounterNr[0].AdmissionDate);
                this.getInsurancecredit().down('#dischargeDate').setValue(encDetails.encounterNr[0].DischargeDate);
                this.getInsurancecredit().down('#releaseDate').setValue(encDetails.encounterNr[0].ReleaseDate);
                this.getInsurancecredit().down('#days').setValue(encDetails.encounterNr[0].BedDays);
                this.getInsurancecredit().down('#encounterNr').setValue(encDetails.encounterNr[0].EncounterNr);
                this.getInsurancecredit().down('#billNumber').setValue(encDetails.encounterNr[0].BillNumber);

                var billnumberStore=Ext.data.StoreManager.lookup('BillNumbersStore');
                billnumberStore.load({
                    params:{
                        pid:pid
                    }
                });

                this.generateCreditNo();
                this.getBillAmount(pid,encDetails.encounterNr[0].BillNumber);

            },
            scope: this
        });
    },

    generateCreditNo: function() {
         // var pnames='as';
                Ext.Ajax.request({
                    url: '../../data/getDataFunctions.php?task=getCreditNo',
                    success: function(response){
                         var respText= Ext.util.JSON.decode(response.responseText);
                         if(respText.credits[0].creditNo==1){
                             creditNo=1001;
                         }else{
                             creditNo=respText.credits[0].creditNo;
                         }

                        this.getInsurancecredit().down('#creditNo').setValue(creditNo);

                    },
                    scope: this
                });
    },

    getBillAmount: function(pid, billNumber) {
        //var pid=this.getInsurancecredit().down('#txtPid2').getValue();
        //var billNumber=this.getInsurancecredit().down('#billNumber').getValue();

        Ext.Ajax.request({
             url: '../../data/getDataFunctions.php?task=getTotalBill',
             params:{
                 pid:pid,
                 bill_number:billNumber
             },
             success: function(response){
                 var respText= Ext.util.JSON.decode(response.responseText);

                 this.getInsurancecredit().down('#invoiceAmount').setValue(respText.invoiceAmount[0].amount);

             },
             scope: this
         });
    },

    getBalance: function(textField,the,eOpts) {
             var invoiceAmount=this.getInsurancecredit().down('#invoiceAmount').getValue();
             var creditAmount=textField.getValue();
             var balance=parseInt(invoiceAmount-creditAmount);

             this.getInsurancecredit().down('#balance').setValue(balance);
    },

    saveInsuranceCredit: function(button) {
        var form = button.up('form'); // get the form panel
        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function(form, action) {
                    Ext.Msg.alert('Success', action.result.msg);

                    form.reset();
                },
                failure: function(form, action) {
                    Ext.Msg.alert('Failed',  action.result.msg);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    searchReceipt: function(button) {
        var searchParam=this.getReceipts().down('#txtSearchReceipt').getValue();

        var receiptStore =Ext.data.StoreManager.lookup('ReceiptStore');
        receiptStore.load({
            params: {
                searchParam: searchParam
            },
            callback: function(records, operation, success) {

            },
            scope: this

        });


    },

    getEncounterDetails2: function(textField, the, eOpts) {
                var pid=textField.getValue();
                // var pnames='as';
                Ext.Ajax.request({
                    url: '../../data/getDataFunctions.php?task=getEncounter',
                    params: {
                        pid: pid
                    },
                    success: function(response){
                        var encDetails= Ext.util.JSON.decode(response.responseText);
                        pnames=encDetails.encounterNr[0].FirstName+" "+encDetails.encounterNr[0].LastName+" "+encDetails.encounterNr[0].SurName;

                        this.getNhifcredit().down('#pname').setValue(pnames);
                        this.getNhifcredit().down('#admissionDate').setValue(encDetails.encounterNr[0].AdmissionDate);
                        this.getNhifcredit().down('#dischargeDate').setValue(encDetails.encounterNr[0].DischargeDate);
                        this.getNhifcredit().down('#releaseDate').setValue(encDetails.encounterNr[0].ReleaseDate);
                        this.getNhifcredit().down('#days').setValue(encDetails.encounterNr[0].BedDays);
                        this.getNhifcredit().down('#encounterNr').setValue(encDetails.encounterNr[0].EncounterNr);
                        this.getNhifcredit().down('#billNumber').setValue(encDetails.encounterNr[0].BillNumber);
                        this.getNhifcredit().down('#ward').setValue(encDetails.encounterNr[0].Ward);

                        var billnumberStore=Ext.data.StoreManager.lookup('BillNumbersStore');
                        billnumberStore.load({
                            params:{
                                pid:pid
                            }
                        });

                       this.generateNhifCreditNo();
                       this.getBillAmount2(pid,encDetails.encounterNr[0].BillNumber);

                    },
                    scope: this
                });
    },

    generateNhifCreditNo: function() {
        Ext.Ajax.request({
            url: '../../data/getDataFunctions.php?task=getNhifCreditNo',
            success: function(response){
                var respText= Ext.util.JSON.decode(response.responseText);
                if(respText.credits[0].creditNo==1){
                    creditNo=1001;
                }else{
                    creditNo=respText.credits[0].creditNo;
                }

                this.getNhifcredit().down('#creditNo').setValue(creditNo);

            },
            scope: this
        });
    },

    getBillAmount2: function(pid, billNumber) {
        //var pid=this.getNhifcredit().down('#txtPid3').getValue();
        //var billNumber=this.getNhifcredit().down('#billNumber').getValue();

        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?caller=getTotalBill',
            params:{
                pid:pid,
                bill_number:billNumber
            },
            success: function(response){
                var respText= Ext.util.JSON.decode(response.responseText);

                this.getNhifcredit().down('#invoiceAmount').setValue(respText.invoiceAmount[0].amount);

            },
            scope: this
        });
    },

    getNhifRates: function(comboField, newValue, oldValue, eOpts) {
        var pid=comboField.up('form').down('#txtNhifPid').getValue();
        var billNumber=comboField.up('form').down('#billNumber').getValue();


        Ext.Ajax.request({
            url: '../../data/getDataFunctions.php?task=getNhifRates',
            params:{
                rate:newValue
            },
            waitMsg: 'Waiting for Invoice Amount...',
            success: function(response){
                var respText= Ext.util.JSON.decode(response.responseText);

                var rateCalc=respText.nhifRates[0].rateCalc;
                this.getNhifcredit().down('#creditPerDay').setValue(respText.nhifRates[0].RateValue);
                this.getNhifcredit().down('#rateCalc').setValue(rateCalc);

                var rateValue;
                if(rateCalc==1){
                    rateValue=respText.nhifRates[0].RateValue;

                }else{
                    var days=this.getNhifcredit().down('#days').getValue();
                    var rates=respText.nhifRates[0].RateValue;
                    rateValue=parseInt(rates * days);
                }

                var invoiceValue=this.getInvoiceAmount(pid,billNumber);

                this.getNhifcredit().down('#creditAmount').setValue(rateValue);

                this.getNhifcredit().down('#invoiceAmount').setValue(invoiceValue);


                //var invoiceAmount= this.getNhifcredit().down('#invoiceAmount').getValue();

               // var balance=parseInt(invoiceValue-rateValue);
        //        Ext.Msg.alert('Test',balance);

               // this.getNhifcredit().down('#balance').setValue('1000');

            },
            scope: this
        });
    },

    saveNifCredit: function(button) {
        var form = button.up('form'); // get the form panel
        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function(form, action) {
                    Ext.Msg.alert('Success', action.result.msg);

                    form.reset();
                },
                failure: function(form, action) {
                    Ext.Msg.alert('Failed',  action.result.msg);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    deleteRow: function(button) {
        var itemsGrid=button.up('form').down('#itemsGrid');
        itemToDelete=itemsGrid.getView().getSelectionModel().getSelection();
        itemsStore=Ext.data.StoreManager.lookup('DebitStore');

        itemsStore.remove(itemToDelete);
    },

    getDebitNo: function() {
        Ext.Ajax.request({
            url: '../../data/getDataFunctions.php?task=geNextTransNo&transType=8',

            success: function(response){
                var respText= Ext.util.JSON.decode(response.responseText);
                var debitNo=respText.transNo;

                this.getDebit().down('#debitNo').setValue(debitNo);

                 var d=new Date();
                 this.getDebit().down('#debitDate').setValue(d);


            },
            scope: this
        });
    },

    saveVitals: function(button) {
        //Ext.Msg.alert('Test',button.getItemId());

        var form = button.up('panel').getForm(); // get the basic form
                    if (form.isValid()) { // make sure the form contains valid data before submitting
                        form.submit({
                            success: function (form, action) {
                                Ext.Msg.alert('Thank you!', 'The Vitals has been saved Successfully.');
                                button.up('form').getForm().reset();
                                button.up('window').hide();

                            },
                            failure: function (form, action) {
                                var jsonResp = Ext.decode(action.response.responseText);

                                Ext.Msg.alert('Failed', 'Could not save Vitals. \n Error=' + jsonResp.error);
                            }
                        });
                    } else { // display error alert if the data is invalid
                        Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
                    }
    },

    openVitals: function(view, rowIndex, colIndex, item, e, record, row) {
        var vitals=Ext.create('Inpatient.view.Vitals', {});
        var vitalsWindow=Ext.create('Ext.window.Window', {
            title: 'Patients Vitals',
            resizable:false
        });

        vitals.down('#pid').setValue(record.get('PID'));
        vitals.down('#names').setValue(record.get('Names'));
        vitals.down('#encounterNo').setValue(record.get('EncounterNo'));
        vitals.down('#Dob').setValue(record.get('BirthDate'));

        vitalsWindow.add(vitals);
        vitalsWindow.show();

    },

    searchItems: function(button) {
         var searchParam=this.getItemslist().down('#searchParam').getValue();

                var itemsListStore =Ext.data.StoreManager.lookup('ItemsListStore');
                itemsListStore.load({
                    params: {
                        searchParam: searchParam
                    },
                    callback: function(records, operation, success) {

                    },
                    scope: this

                });
    },

    closewindow: function(button) {
            button.up('window').close();
    },

    openDischargeForm: function(view, rowIndex, colIndex, item, e, record, row) {
        var discharge=Ext.create('Inpatient.view.Discharge', {});
        var dischargeWindow=Ext.create('Ext.window.Window', {
            title: 'Discharge Patient',
            resizable:false
        });

        var d=new Date();

        discharge.down('#pid').setValue(record.get('Pid'));
        discharge.down('#names').setValue(record.get('Names'));
        discharge.down('#encounterNo').setValue(record.get('EncounterNo'));
        discharge.down('#Dob').setValue(record.get('BirthDate'));
        discharge.down('#dischargeDate').setValue(d);
        discharge.down('#dischargeTime').setValue(d);

        discharge.down('#wardNo').setValue(record.get('WardID'));

        dischargeWindow.add(discharge);
        dischargeWindow.show();

    },

    discharge: function(button) {
        // Ext.Msg.alert('Test',button.getItemId());

        var form = button.up('form').getForm(); // get the basic form
        var ward_nr=button.up('form').down('#wardNo').getValue();
        var pid=button.up('form').down('#pid').getValue();
        var encounterNo=button.up('form').down('#encounterNo').getValue();

        if (form.isValid()) { // make sure the form contains valid data before submitting
            Ext.Msg.show({
            title:'Discharge Patient?',
            message: 'Are you sure you want to Discharge this Patient?',
            buttons: Ext.Msg.YESNOCANCEL,
            icon: Ext.Msg.QUESTION,
            fn: function(btn) {
                if (btn === 'yes') {
                    form.submit({
                        params:{
                            pid:pid,
                            encounter_nr:encounterNo
                        },
                        success: function (form, action) {
                            Ext.Msg.alert('Thank you!', 'Patient Discharged Successfully.');
                            button.up('form').getForm().reset();
                            button.up('window').close();

                            var occupancyStore =Ext.data.StoreManager.lookup('OccupancyStore');
                            var waitingListStore =Ext.data.StoreManager.lookup('WaitingListStore');
                            occupancyStore.load({
                                params:{
                                    wardId:ward_nr
                                }
                            });

                            waitingListStore.load({
                                params:{
                                    wardNo:ward_nr
                                }
                            });

                        },
                        failure: function (form, action) {
                            var jsonResp = Ext.decode(action.response.responseText);

                            Ext.Msg.alert('Failed', 'Could not Discharge patient \n Error=' + jsonResp.error);
                        }
                        });
                } else if (btn === 'no') {
                     button.up('form').getForm().reset();
                     button.up('window').close();
                } else {
                    console.log('Cancel pressed');
                }
            }
        });

        } else { // display error alert if the data is invalid
               Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    getWaitingPatient: function(component, eOpts) {
        component.getEl().on('click', function(e, t) {
            Ext.Msg.alert('Test',t.Pid);
        //     e.stopEvent();
        //     Ext.Msg.alert('Test','link ' + t.text + ' clicked');
        }, null, {delegate: 'a'}
        );
    },

    openAssignWindow: function(gridpanel, record, item, index, e, options) {
                var assignGrid=Ext.create('Inpatient.view.AssignBeds', {});
                var assignWindow=Ext.create('Ext.window.Window', {
                    title: 'Assign Beds',
                    resizable:false
                });


                assignGrid.down('#pid').setValue(record.get('Pid'));
                assignGrid.down('#names').setValue(record.get('Names'));
                assignGrid.down('#encounterNo').setValue(record.get('Encounter_Nr'));
                assignGrid.down('#dob').setValue(record.get('Dob'));
                assignGrid.down('#wardno').setValue(record.get('WardNo'));
                assignGrid.down('#sex').setValue(record.get('Sex'));
                assignGrid.down('#admissiondate').setValue(record.get('AdmissionDate'));

                assignWindow.add(assignGrid);
                assignWindow.show();

               // Ext.Msg.alert(record.get('Encounter_Nr'));
    },

    assignBed: function(view, rowIndex, colIndex, item, e, record, row) {
        if(record.get('Pid')===''){
            var pid=view.up('grid').down('#pid').getValue();
            var encNo=view.up('grid').down('#encounterNo').getValue();
            var str=record.get('RoomNo');
            var room=str.split(" ");
            var ward_nr=view.up('grid').down('#wardno').getValue();
            var bed=record.get('BedNo');
            Ext.Msg.alert('Test',room[1]+","+record.get('BedNo')+","+pid+","+ward_nr);

            Ext.Ajax.request({
                url: '../../data/getDataFunctions.php?task=assignBed&pid='+pid+"&encNr="+encNo+"&room="+room[1]+"&bed="+bed+"&wardNo="+ward_nr,

                success: function(response){
                   var occupancyStore =Ext.data.StoreManager.lookup('OccupancyStore');
                   var waitingListStore =Ext.data.StoreManager.lookup('WaitingListStore');
                   occupancyStore.load({
                       params:{
                            wardId:ward_nr
                       }
                   });

                   waitingListStore.load({
                       params:{
                            wardNo:ward_nr
                       }
                   });

                    view.up('window').close();


                },
                scope: this
            });
        }

    },

    getPatientName: function(textField, the, eOpts) {
        var pid=textField.getValue();
                // var pnames='as';
        Ext.Ajax.request({
            url: '../../data/getDataFunctions.php?task=getEncounter',
            params: {
                pid: pid
            },
            success: function(response){
                var encDetails= Ext.util.JSON.decode(response.responseText);
                pnames=encDetails.encounterNr[0].FirstName+" "+encDetails.encounterNr[0].LastName+" "+encDetails.encounterNr[0].SurName;

                textField.up('panel').down('#txtPatientName').setValue(pnames);
                textField.up('panel').down('#encNr').setValue(encDetails.encounterNr[0].EncounterNr);
                textField.up('panel').down('#txtBillNumber').setValue(encDetails.encounterNr[0].BillNumber);

            },
            scope: this
        });

        // var billnumberStore=Ext.data.StoreManager.lookup('BillNumbersStore');
        // billnumberStore.load({
        //     params:{
        //         pid:pid
        //     }
        // });
    },

    openNotes: function(view, rowIndex, colIndex, item, e, record, row) {
            var notes=Ext.create('Inpatient.view.IPNotes', {});
            var notesWindow=Ext.create('Ext.window.Window', {
                title: 'Patients Notes',
                resizable:false
            });

            this.getPatientDetails(record.get('Pid'));

            this.getPatientdetails().down('#pid').setValue(record.get('Pid'));
            this.getPatientdetails().down('#encounterNo').setValue(record.get('EncounterNo'));
            this.getPatientdetails().down('#names').setValue(record.get('Names'));
            this.getPatientdetails().down('#dob').setValue(record.get('BirthDate'));
            this.getPatientdetails().down('#sex').setValue(record.get('Sex'));
            this.getPatientdetails().down('#paymode').setValue(record.get('PaymentMode'));
            this.getPatientdetails().down('#wardno').setValue(record.get('WardID'));
            this.getPatientdetails().down('#roomno').setValue(record.get('RoomNo'));
            this.getPatientdetails().down('#bedno').setValue(record.get('BedNo'));
            this.getPatientdetails().down('#admissiondate').setValue(record.get('AdmissionDate'));

        var notesStore =Ext.data.StoreManager.lookup('NotesStore');
        notesStore.load({
            params:{
                encNr:record.get('EncounterNo')
            }
        });

            notesWindow.add(notes);
            notesWindow.show();
    },

    saveNotes: function(button) {

        var form = button.up('panel').getForm(); // get the basic form
        var encounterNo=button.up('panel').down('#encounterNo').getValue();
        var locationNr=button.up('panel').down('#wardno').getValue();
        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                  encounterNo:encounterNo,
                  locationNr:locationNr
                },
                success: function (form, action) {
                    Ext.Msg.alert('Thank you!', 'The Notes has been saved Successfully.');
                    button.up('form').getForm().reset();
                    button.up('window').hide();

                },
                failure: function (form, action) {
                    var jsonResp = Ext.decode(action.response.responseText);

                    Ext.Msg.alert('Failed', 'Could not save Notes. \n Error=' + jsonResp.error);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    getPatientDetails: function(pid) {
        var encDetails='';
        Ext.Ajax.request({
            url: '../../data/getDataFunctions.php?task=getEncounter',
            params: {
                pid: pid
            },
            success: function(response){
                var encDetails= Ext.util.JSON.decode(response.responseText);
            },
            scope: this
        });

        return encDetails;
    },

    openDoctorsNotes: function(button) {
        //var sid=record.get('UrlAppend');
        var pid=button.up('panel').down('#pid').getValue();
        var encounterNr=button.up('panel').down('#encounterNo').getValue();


        var urlholder="reports/doctors_notes.php?pid="+pid+"&encounterNr="+encounterNr;
        invwin=window.open(urlholder,"width=650,height=600,menubar=no,resizable=yes,scrollbars=yes");
    },

    openNursesNotes: function(button) {
        //var sid=record.get('UrlAppend');
        var pid=button.up('panel').down('#pid').getValue();
        var encounterNr=button.up('panel').down('#encounterNo').getValue();


        var urlholder="reports/nurses_cardex.php?pid="+pid+"&encounterNr="+encounterNr;
        invwin=window.open(urlholder,"width=650,height=600,menubar=no,resizable=yes,scrollbars=yes");
    },

    previewInvoice: function(button) {
        var invoiceDetails=button.up('panel').down('#invoiceDetails');
        let invoiceHeaderDetails=button.up('panel').down('#invoiceHeaderDetails');

        var pid=button.up('panel').down('#txtInvoicePid').getValue();
        var bill_number=button.up('panel').down('#txtBillNumber').getValue();
        var includeReceipt=button.up('panel').down('#includeReceipt').getValue();
        var includeNhif=button.up('panel').down('#includeNhif').getValue();
        var invoiceType=button.up('panel').down('#invoiceType').getValue();
        var encNr=button.up('panel').down('#encNr').getValue();

        Ext.Ajax.request({
            url: '../../data/getDataFunctions.php?task=generateInvoice',
            params: {
                pid: pid,
                bill_number:bill_number,
                includeReceipt:includeReceipt,
                includeNhif:includeNhif,
                invoiceType:invoiceType,
                encNr:encNr
            },
            success: function(response){
                var encDetails= response.responseText;
                    var div = Ext.fly('invoiceDetails');
                           var htmlList = encDetails;

                           div.update(htmlList);

            },
            scope: this
        });

    },

    printInvoices: function(button) {
        var pid=button.up('panel').down('#txtInvoicePid').getValue();
        var bill_number=button.up('panel').down('#txtBillNumber').getValue();
        var includeReceipt=button.up('panel').down('#includeReceipt').getValue();
        var includeNhif=button.up('panel').down('#includeNhif').getValue();
        var invoiceType=button.up('panel').down('#invoiceType').getValue();
        var encNr=button.up('panel').down('#encNr').getValue();



        var urlholder="reports/detail_invoice_pdf.php?pid="+pid+"&billNumber="+bill_number+"&encNr="+encNr+"&receipt=1";
        invwin=window.open(urlholder,"transwin<?php echo $sid ?>","width=650,height=600,menubar=no,resizable=yes,scrollbars=yes");
    },

    openPanel: function(mnu) {
        var selectedPanel=mnu.getItemId();
        //Ext.Msg.alert('Test',selectedPanel);
        var formsContainer=Ext.create("Inpatient.view."+selectedPanel,{});
        var centerContainer=this.getMainpanel().down("container[region=center]");
        centerContainer.removeAll();
        centerContainer.add(formsContainer);
    },

    openPrescription: function(view, rowIndex, colIndex, item, e, record, row) {
        var prescription=Ext.create('Inpatient.view.PrescriptionForm', {});
        var prescriptionWindow=Ext.create('Ext.window.Window', {
            title: 'Create Prescription',
            resizable:false
        });

        var d=new Date();

        prescription.down('#Pid').setValue(record.get('Pid'));
        prescription.down('#Names').setValue(record.get('Names'));
        prescription.down('#EncounterNo').setValue(record.get('EncounterNo'));
        prescription.down('#PrescribeDate').setValue(new Date());
        // prescription.down('#dischargeDate').setValue(d);
        // prescription.down('#dischargeTime').setValue(d);

        // discharge.down('#wardNo').setValue(record.get('WardID'));

        prescriptionWindow.add(prescription);
        prescriptionWindow.show();
    },

    openTransferWindow: function(view, rowIndex, colIndex, item, e, record, row) {
        var tranferPanel=Ext.create('Inpatient.view.PatientTransfer', {});
        var transferWindow=Ext.create('Ext.window.Window', {
            title: 'Patient Transfer',
            resizable:false
        });

        this.getPatientDetails(record.get('Pid'));

        this.getPatientdetails().down('#pid').setValue(record.get('Pid'));
        this.getPatientdetails().down('#encounterNo').setValue(record.get('EncounterNo'));
        this.getPatientdetails().down('#names').setValue(record.get('Names'));
        this.getPatientdetails().down('#dob').setValue(record.get('BirthDate'));
        this.getPatientdetails().down('#sex').setValue(record.get('Sex'));
        this.getPatientdetails().down('#paymode').setValue(record.get('PaymentMode'));
        this.getPatientdetails().down('#wardno').setValue(record.get('WardID'));
        this.getPatientdetails().down('#roomno').setValue(record.get('RoomNo'));
        this.getPatientdetails().down('#bedno').setValue(record.get('BedNo'));
        this.getPatientdetails().down('#admissiondate').setValue(record.get('AdmissionDate'));

        transferWindow.add(tranferPanel);
        transferWindow.show();
    },

    activateWardsList: function(radio, newValue, oldValue, eOpts) {
        if(radio.up('form').down('#transBed').hidden===false){
            radio.up('form').down('#transBed').hide();
            radio.up('form').down('#treansferBed').checked=false;
        }

        if(newValue===true){
            var transPanel=radio.up('form').down('#transWard').show();
            console.log(radio.id);
        }else{
            var transPanel=radio.up('form').down('#transWard').hide();
            console.log(radio.id);
        }

    },

    activateBedList: function(radio, newValue, oldValue, eOpts) {
        if(radio.up('form').down('#transWard').hidden===false){
            radio.up('form').down('#transWard').hide();
            radio.up('form').down('#treansferWard').checked=false;
        }

        if(newValue===true){
            var transPanel=radio.up('form').down('#transBed').show();
            console.log(radio.id);
        }else{
             var transPanel=radio.up('form').down('#transBed').hide();
            console.log(radio.id);
        }

    },

    findItems: function() {
        var searchParam=this.getServiceslist().down('#txtSearchItems').getValue();

        var serviceListStore =Ext.data.StoreManager.lookup('ServiceListStore');
        serviceListStore.load({
            params: {
                searchParam: searchParam
            },
            callback: function(records, operation, success) {

            },
            scope: this

        });
    },

    getServiceList: function(button) {
        var serviceList=Ext.create('Inpatient.view.ServicesList', {});
        var serviceListWindow=Ext.create('Ext.window.Window', {
            title: 'Services List',
            resizable:true,
            minWidth:300,
            minHeight:300
        });

        serviceListWindow.add(serviceList);
        serviceListWindow.show();
        serviceList.down('#sourceID').setValue('Orders');
    },

    filterItems: function(field, newValue, oldValue, eOpts) {
        //Ext.Msg.alert('Test',newValue);
        var grid = field.up('grid');
        grid.store.clearFilter();
        if (newValue) {
            var matcher = new RegExp(Ext.String.escapeRegex(newValue), "i");
            grid.store.filter({
                filterFn: function(item) {
                    return matcher.test(item.get('item_description')) ||
                        matcher.test(item.get('partcode'));
                }
            });
        }
    },

    addSelectedService: function(gridpanel, record, item, index, e, options) {
        var store =Ext.data.StoreManager.lookup('ServiceListStore');
        var store1 =Ext.data.StoreManager.lookup('DebitStore');
        store.remove(record);
        store1.add(record);
    },

    getCreditNo: function() {
        Ext.Ajax.request({
            url: '../../data/getDataFunctions.php?task=geNextTransNo&transType=9',

            success: function(response){
                var respText= Ext.util.JSON.decode(response.responseText);
                var transNo=respText.transNo;

                this.getCredit().down('#creditNo').setValue(transNo);

                 var d=new Date();
                 this.getCredit().down('#creditDate').setValue(d);


            },
            scope: this
        });
    },

    getInvoiceAmount: function(pid, billNumber) {
        Ext.Ajax.request({
             url: '../../data/getDataFunctions.php?task=getTotalBill',
             params:{
                 pid:pid,
                 bill_number:billNumber
             },
             success: function(response){
                 var respText= Ext.util.JSON.decode(response.responseText);

                 this.getNhifcredit().down('#invoiceAmount').setValue(respText.invoiceAmount[0].amount);

             },
             scope: this
         });
    },

    previewNhifList: function(button) {
        var searchParam=this.getNhifcredits().down('#searchParam').getValue();
        var startDate=Ext.Date.format(new Date(this.getNhifcredits().down('#startDate').getValue()), 'Y-m-d');
        var endDate=Ext.Date.format(new Date(this.getNhifcredits().down('#endDate').getValue()), 'Y-m-d');

        var nhifListStore =Ext.data.StoreManager.lookup('NhifCreditStore');
        nhifListStore.load({
            params: {
                searchParam: searchParam,
                startDate:startDate,
                endDate:endDate
            },
            callback: function(records, operation, success) {

            },
            scope: this

        });
    },

    exportToExcel: function(button) {
        var mypanel=button.up('panel').getItemId();
        //Ext.Msg.alert('Panel',mypanel.getItemId());
        var searchParam=this.getNhifcredits().down('#searchParam').getValue();
        var startDate=Ext.Date.format(new Date(this.getNhifcredits().down('#startDate').getValue()), 'Y-m-d');
        var endDate=Ext.Date.format(new Date(this.getNhifcredits().down('#endDate').getValue()), 'Y-m-d');

        if(mypanel==='NhifCredits'){
            var urlholder="reports/exportNhif.php?searchParam="+searchParam+"&startDate="+startDate+"&endDate="+endDate;
                invwin=window.open(urlholder,"width=650,height=600,menubar=no,resizable=yes,scrollbars=yes");

        }
    }

});
