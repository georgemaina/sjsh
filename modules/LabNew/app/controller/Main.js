/*
 * File: app/controller/Main.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.2.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.2.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Lab.controller.Main', {
    extend: 'Ext.app.Controller',
    alias: 'controller.main',

    models: [
        'PatientsList',
        'LabParams',
        'PendingTests',
        'StaffList',
        'Specimens',
        'PatientStatus',
        'LabResults',
        'LabTests'
    ],
    stores: [
        'PatientsListStore',
        'LabParamsStore',
        'PendingTestsStore',
        'StaffList',
        'SpecimenStore',
        'PatientStatusStore',
        'LabResultsStore',
        'LabTestsStore'
    ],
    views: [
        'MainView',
        'WorkFlows',
        'Patientlists',
        'PendingResults',
        'FullHaemogram',
        'ResultsForm',
        'Urinalysis',
        'StoolOCParasite',
        'UsersForm',
        'AncProfile',
        'LabResultsGrid',
        'LabResults',
        'LaboratoryParams',
        'ParamsForm',
        'EditResults',
        'LaboratoryStaff',
        'ReportsForm',
        'NewStaff',
        'AllLabTests'
    ],

    refs: {
        pendingresults: {
            selector: 'pendingresults',
            xtype: 'pendingresults'
        },
        workflows: {
            selector: 'workflows',
            xtype: 'workflows'
        },
        viewport: {
            selector: 'viewport',
            xtype: 'mainview'
        },
        fullhaemogram: {
            selector: 'fullhaemogram',
            xtype: 'fullhaemogram'
        },
        stoolocparasite: {
            selector: 'stoolocparasite',
            xtype: 'stoolocparasite'
        },
        resultsform: {
            selector: 'resultsform',
            xtype: 'resultsform'
        },
        urinalysis: {
            selector: 'urinalysis',
            xtype: 'urinalysis'
        },
        labparamsform: {
            selector: 'labparamsform',
            xtype: 'labparamsform'
        },
        ancprofile: {
            selector: 'ancprofile',
            xtype: 'ancprofile'
        },
        labresults: {
            selector: 'labresults',
            xtype: 'labresults'
        },
        laboratoryparams: {
            selector: 'laboratoryparams',
            xtype: 'laboratoryparams'
        },
        paramsform: {
            selector: 'paramsform',
            xtype: 'paramsform'
        },
        editresults: {
            selector: 'editresults',
            xtype: 'editresults'
        },
        laboratorystaff: {
            selector: 'laboratorystaff',
            xtype: 'laboratorystaff'
        },
        reportsform: {
            selector: 'reportsform',
            xtype: 'reportsform'
        },
        alllabtests: {
            selector: 'alllabtests',
            xtype: 'alllabtests'
        }
    },

    init: function(application) {
        this.control({
            '#mnuPending':{
                click:this.openPendinglist
            },
            '#patientsGrid':{
                itemclick:this.getSelectedPatient
            },
            '#mnuWorkflow':{
                click:this.openWorkFlow
            },
            '#btnSpecimenCollection':{
                afterrender:this.collectSpecimen
            },
            '#cmdClose':{
                click:this.close
            },
            '#cmdSaveSpecimen':{
                click:this.saveSpecimenCollection
            },
            '#btnSpecimenReceived':{
                afterrender:this.receiveSpecimen
            },
            '#cmdSaveReceiver':{
                click:this.saveSpecimenReceive
            },
            '#btnEnterResults':{
                afterrender:this.enterResults
            },
            '#cmdSaveResults':{
                click:this.saveLabResults
            },
            '#mnuResults':{
                click:this.openResultsPanel
            },
            '#btnVerifyResults':{
                afterrender:this.openVerifyResults
            },
            '#cmdVerifyResults':{
                click:this.verifyResults
            },
            '#btnApproveResults':{
                afterrender:this.openApproveResults
            },
            '#cmdApproveResults':{
                click:this.approveResults
            },
            '#mnuStaff':{
                click:this.openStaffList
            },
            '#mnuLabParams':{
                click:this.openLabParams
            },
            '#cmdNewParams':{
                click:this.openParamsForm
            },
            '#mnuEditResult':{
                click:this.openEditResults
            },
            '#cmdEditResults':{
                click:this.openResultsForm
            },
            '#cmdNewStaff':{
                click:this.openNewStaff
            },
            '#cmdSaveStaff':{
                click:this.saveStaff
            },
            '#staffListGrid':{
                itemClick:this.loadStaffDetails
            },
            '#mnuReportForm':{
                click:this.openReportForm
            },
            '#cmdPrintReport':{
                click:this.printLabReport
            },
            '#resultsGlid actioncolumn[id=addSamples]':{
                click:this.addSamples
            },
            '#fullHaemogram':{
                afterrender:this.loadParamValues
            },
            '#cmdSaveLabRights':{
                click:this.updateUserRights
            },
            '#mnuLabTests':{
                click:this.openLabTests
            }
        });
    },

    openPendinglist: function() {
        pendingResults=Ext.create("Lab.view.PendingResults",{});
        centerContainer=this.getViewport().down("#mainDetails");
        title=this.getViewport().down("#mainTitle");
        centerContainer.removeAll();

        centerContainer.add(pendingResults);
        title.down('#title').setValue('Pending Laboratory Requests');

    },

    getSelectedPatient: function(gridpanel, record, item, index, e, options) {

        if(record.get('LabNo')!==''){
          //   var columns = grid.getView().headerCt.getGridColumns();
            //Ext.Msg.alert('Test','ward No is '+gridpanel.up('panel').up('panel').getItemId());
            var currPanel=gridpanel.up('panel').up('panel').getItemId();

            if(currPanel==='workflows'){
                this.getWorkflows().down('#pid').setValue(record.get('Pid'));
                this.getWorkflows().down('#encounterno').setValue(record.get('EncounterNo'));
                this.getWorkflows().down('#fileno').setValue(record.get('FileNo'));
                this.getWorkflows().down('#names').setValue(record.get('Names'));
                this.getWorkflows().down('#sex').setValue(record.get('Sex'));
                this.getWorkflows().down('#dob').setValue(record.get('Dob'));
                this.getWorkflows().down('#createid').setValue(record.get('CreateID'));
                this.getWorkflows().down('#labno').setValue(record.get('LabNo'));
                this.getWorkflows().down('#priority').setValue(record.get('Priority'));
                this.getWorkflows().down('#paymode').setValue(record.get('PayMode'));

                var pendingTests=Ext.data.StoreManager.lookup("PendingTestsStore");
                     pendingTests.load({
                        params: {
                            labNo:record.get('LabNo')
                        },
                        callback: function(records, operation, success) {

                        },
                        scope: this
                    });

            var statusPanel=this.getWorkflows().down("#statusPanel");
            var patientStatus=Ext.data.StoreManager.lookup("PatientStatusStore");
            var data = [];

            patientStatus.load({
                params: {
                    labNo:record.get('LabNo')
                },
                callback: function(records, operation, success) {
                    var tpl=new Ext.XTemplate(
                        '<Table id=pendingtests>',
                        '<tr><td colspan=3 class=titles>Status of Lab Tests</td></tr>',
                        '<tr>',
                        '<th>UpdateTime</th>',
                        '<th>Status</th><th>InputBy</th></tr>',
                        '<tpl for=".">',
                        '<tr>',
                        '<td style="width:120px;"><div>{UpdateTime}</div></td>',
                        '<td style="width:150px;">{Status}</td><td>{InputBy}</td>',
                        '</tr>',
                        '</tpl>',
                        '</table>'
                    );


                    patientStatus.each(function(record) {
                        data.push(record.getData());
                    });

                    tpl.overwrite(statusPanel.body,data);
                },
                scope: this
            });

            }else if(currPanel==='LabResults'){
                this.getLabresults().down('#pid').setValue(record.get('Pid'));
                this.getLabresults().down('#encounterno').setValue(record.get('EncounterNo'));
                this.getLabresults().down('#fileno').setValue(record.get('FileNo'));
                this.getLabresults().down('#names').setValue(record.get('Names'));
                this.getLabresults().down('#sex').setValue(record.get('Sex'));
                this.getLabresults().down('#dob').setValue(record.get('Dob'));
                this.getLabresults().down('#createid').setValue(record.get('CreateID'));
                this.getLabresults().down('#labno').setValue(record.get('LabNo'));
                this.getLabresults().down('#priority').setValue(record.get('Priority'));
                this.getLabresults().down('#paymode').setValue(record.get('PayMode'));
                this.getLabresults(record.get('LabNo'));

                    var resultsPanel=this.getLabresults().down("#resultsPanel");
                    var resultsStore=Ext.data.StoreManager.lookup("LabResultsStore");
                    var data = [];

                    resultsStore.load({
                        params: {
                            labNo:record.get('LabNo')
                        },
                        callback: function(records, operation, success) {
                            var tpl=new Ext.XTemplate(
                                '<Table id=pendingtests>',
                                '<tr><td colspan=3 class=titles>Laboratory Results</td></tr>',
                                '<tr>',
                                '<th>TestName</th>',
                                '<th>ResultName</th><th>ResultsValue</th><th>LowerRange</th><th>UpperRange</th></tr>',
                                '<tpl for=".">',
                                '<tr>',
                                '<td style="width:120px;"><div>{TestName}</div></td>',
                                '<td>{ResultName}</td><td>{ResultsValue}</td><td>{LowerRange}</td><td>{UpperRange}</td>',
                                '</tr>',
                                '</tpl>',
                                '</table>'
                            );


                            resultsStore.each(function(record) {
                                data.push(record.getData());
                            });

                            tpl.overwrite(resultsPanel.body,data);
                        },
                        scope: this
                    });

            }else if(currPanel==='EditResults'){
                var labno=record.get('LabNo');
                var resultsStore=Ext.data.StoreManager.lookup("LabResultsStore");
                resultsStore.load({
                    params:{
                        labNo:labno
                    },
                    callback: function(records, operation, success) {

                    }
                });

                var pendingStore=Ext.data.StoreManager.lookup("PendingTestsStore");
                pendingStore.load({
                    params:{
                        labNo:labno
                    },
                    callback: function(records, operation, success) {

                    }
                });
            }else{
                this.getPendingresults().down('#pid').setValue(record.get('Pid'));
                this.getPendingresults().down('#encounterno').setValue(record.get('EncounterNo'));
                this.getPendingresults().down('#fileno').setValue(record.get('FileNo'));
                this.getPendingresults().down('#names').setValue(record.get('Names'));
                this.getPendingresults().down('#sex').setValue(record.get('Sex'));
                this.getPendingresults().down('#dob').setValue(record.get('Dob'));
                this.getPendingresults().down('#createid').setValue(record.get('CreateID'));
                this.getPendingresults().down('#labno').setValue(record.get('LabNo'));
                this.getPendingresults().down('#priority').setValue(record.get('Priority'));
                this.getPendingresults().down('#paymode').setValue(record.get('PayMode'));
                this.loadPendingTests(record.get('LabNo'));
            }

        }
    },

    loadPendingTests: function(labNo) {

        var resultsPanel=this.getPendingresults().down("#testStatus");
        var pendingTests=Ext.data.StoreManager.lookup("PendingTestsStore");
        var data = [];

        pendingTests.load({
            params: {
                labNo:labNo
            },
            callback: function(records, operation, success) {
                var tpl=new Ext.XTemplate(
                    '<Table id=pendingtests>',
                    '<tr><td colspan=4 class=titles>Pending Lab Tests</td></tr>',
                    '<tr>',
                    '<th>Description</th>',
                    '<th>Status</th></tr>',
                    '<tpl for=".">',
                    '<tr>',
                    '<td style="width:150px;"><div class=content>{Description}</div></td>',
                    '<td>{TestStatus}</td>',
                    '</tr>',
                    '</tpl>',
                    '</table>'
                );



                pendingTests.each(function(record) {
                    data.push(record.getData());
                });

                tpl.overwrite(resultsPanel.body,data);
            },
            scope: this
        });
    },

    openWorkFlow: function() {
        var workFlow=Ext.create("Lab.view.WorkFlows",{});
        centerContainer=this.getViewport().down("#mainDetails");
        title=this.getViewport().down("#mainTitle");
        centerContainer.removeAll();

        centerContainer.add(workFlow);
        title.down('#title').setValue('LABORATORY MODULE:  Workflows form');


    },

    collectSpecimen: function(component, eOpts) {
        var specimen=Ext.create("Lab.view.SpecimenCollection",{});

        component.getEl().on('click', function() {
          Ext.Ajax.request(
             {
                 // waitMsg: 'Saving changes...',
                 url: '../../data/getDataFunctions.php?task=checkUserAccess',
                 params: {
                     activity: 'TakeSamples'
                 },
                 success: function(response, options) {
                     //return true;
                      var strErr=Ext.decode(response.responseText);
                         //Ext.Msg.alert('Response',strErr.Resp);
                        if(strErr.Resp==='Access'){
                            var containterWindows=Ext.create('Ext.window.Window', {
                                title:"Speciment Collection",
                                resizable:false,
                                closable:true
                            });

                            specimen.down('#encNr').setValue(component.up('panel').down('#encounterno').getValue());
                            specimen.down('#labNo').setValue(component.up('panel').down('#labno').getValue());
                            containterWindows.add(specimen);
                            containterWindows.show();
                        }else{
                             Ext.Msg.alert('Access Denied','Sorry! You are not allowed to Collect Specimen');
                        }

                 },
                 failure: function(response, options) {
                     Ext.Msg.alert('Access Denied','Sorry! You are not allowed to Collect Specimen');
                 }
             }
         );


        });
    },

    close: function(button) {
        button.up('window').hide();
    },

    saveSpecimenCollection: function(button) {
        var form = button.up('panel').getForm(); // get the basic form

        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function (form, action) {
                    Ext.Msg.alert('Thank you!', 'The lab Specimen Collected Successfully.');
                    button.up('form').getForm().reset();
                    button.up('window').close();


                },
                failure: function (form, action) {
                    var jsonResp = Ext.decode(action.response.responseText);
                    this.getWorkflows().down('#btnSpecimenCollection').setSrc('resources/images/specime_collection_done.png');
                    Ext.Msg.alert('Failed', 'There was a problem Saving Sample Collection. \n Error=' + jsonResp.error);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    receiveSpecimen: function(component, eOpts) {
        var specimen=Ext.create("Lab.view.SpecimenReceived",{});
        component.getEl().on('click', function() {
        Ext.Ajax.request(
             {
                 // waitMsg: 'Saving changes...',
                 url: '../../data/getDataFunctions.php?task=checkUserAccess',
                 params: {
                     activity: 'ReceiveSamples'
                 },
                 success: function(response, options) {
                     //return true;
                      var strErr=Ext.decode(response.responseText);
                        // Ext.Msg.alert('Response',strErr.Resp);
                        if(strErr.Resp==='Access'){
                            var containterWindows=Ext.create('Ext.window.Window', {
                                title:"Speciment Received",
                                resizable:false,
                                closable:true
                            });
                            specimen.down('#encNr').setValue(component.up('panel').down('#encounterno').getValue());
                            specimen.down('#labNo').setValue(component.up('panel').down('#labno').getValue());

                            containterWindows.add(specimen);
                            containterWindows.show();
                        }else{
                             Ext.Msg.alert('Access Denied','Sorry! You are not allowed to Collect Specimen');
                        }

                 },
                 failure: function(response, options) {
                     Ext.Msg.alert('Access Denied','Sorry! You are not allowed to Collect Specimen');
                 }
             }
         );
        });

    },

    saveSpecimenReceive: function(button) {
        var form = button.up('panel').getForm(); // get the basic form

        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function (form, action) {
                    Ext.Msg.alert('Thank you!', 'Sample Received Successfully.');
                    button.up('form').getForm().reset();
                    button.up('window').close();


                },
                failure: function (form, action) {
                    var jsonResp = Ext.decode(action.response.responseText);

                    Ext.Msg.alert('Failed', 'Problem saving sample received form. \n Error=' + jsonResp.error);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    enterResults: function(component, eOpts) {
        var grid=component.up('panel').up('panel').down('#resultsGlid');
        //var restCrl=component.up('panel').up('panel').down('#resultFields');
        // var ctrls2;
        var results=Ext.create("Lab.view.ResultsForm",{});
        //var fullHaemogram=Ext.create("Lab.view.FullHaemogram",{});
        var StoolOCParasite=Ext.create("Lab.view.FullHaemogram",{});
        var Urinalysis=Ext.create("Lab.view.Urinalysis",{});
        var AncProfile=Ext.create("Lab.view.AncProfile",{});


        var restCrl=results.down('#resultsControl');

        component.getEl().on('click', function() {
            Ext.Ajax.request(
             {
                 // waitMsg: 'Saving changes...',
                 url: '../../data/getDataFunctions.php?task=checkUserAccess',
                 params: {
                     activity: 'EnterResults'
                 },
                 success: function(response, options) {
                     //return true;
                      var strErr=Ext.decode(response.responseText);
                        // Ext.Msg.alert('Response',strErr.Resp);
                        if(strErr.Resp==='Access'){
                           var containterWindows=Ext.create('Ext.window.Window', {
                                title:'Results Entry',
                                resizable:false,
                                closable:false
                            });
                            containterWindows.add(results);
                            containterWindows.show();
                            restCrl.removeAll();
                            grid.getStore().each(function(record) {
                                if(record.get('InputType')==='input_box'){
                                    restCrl.add(new Ext.form.TextField({
                                        fieldLabel: record.get('Description'),
                                        name: record.get('PartCode')
                                    }));
                                }

                               if(record.get('InputType')==='group_field'){
                                    console.log(record.get('Label'));
                                   restCrl.add(Ext.create("Lab.view."+record.get('Label'),{}));
                               }
                            });



                            results.down('#pid').setValue(component.up('panel').down('#pid').getValue());
                            results.down('#encounterno').setValue(component.up('panel').down('#encounterno').getValue());
                            results.down('#fileno').setValue(component.up('panel').down('#fileno').getValue());
                            results.down('#names').setValue(component.up('panel').down('#names').getValue());
                            results.down('#sex').setValue(component.up('panel').down('#sex').getValue());
                            results.down('#dob').setValue(component.up('panel').down('#dob').getValue());
                            results.down('#createid').setValue(component.up('panel').down('#createid').getValue());
                            results.down('#labno').setValue(component.up('panel').down('#labno').getValue());
                            results.down('#priority').setValue(component.up('panel').down('#priority').getValue());

                             results.down('#encNr').setValue(component.up('panel').down('#encounterno').getValue());
                             results.down('#labNo').setValue(component.up('panel').down('#labno').getValue());
                        //     results.down('#paymode').setValue(component.up('panel').down('#paymode').getValue());
                        }else{
                             Ext.Msg.alert('Access Denied','Sorry! You are not allowed to Enter Results');
                        }

                 },
                 failure: function(response, options) {
                     Ext.Msg.alert('Access Denied','Sorry! You are not allowed to Enter Results');
                 }
             }
         );


        });

    },

    saveLabResults: function(button) {
        var form = button.up('panel').getForm(); // get the basic form

        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function (form, action) {
                    Ext.Msg.alert('Thank you!', 'Saved lab Results Successfully.');
                    button.up('form').getForm().reset();
                    button.up('window').close();


                },
                failure: function (form, action) {
                    var jsonResp = Ext.decode(action.response.responseText);

                    Ext.Msg.alert('Failed', 'There was a problem Saving Lab results. \n Error=' + jsonResp.error);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    openResultsPanel: function() {
        var results=Ext.create("Lab.view.LabResults",{});
        centerContainer=this.getViewport().down("#mainDetails");
        title=this.getViewport().down("#mainTitle");
        centerContainer.removeAll();

        centerContainer.add(results);
        title.down('#title').setValue('LABORATORY MODULE:  Laboratory Results');

    },

    openVerifyResults: function(component, eOpts) {
        component.getEl().on('click', function() {

            Ext.Ajax.request(
             {
                 // waitMsg: 'Saving changes...',
                 url: '../../data/getDataFunctions.php?task=checkUserAccess',
                 params: {
                     activity: 'VerifyResults'
                 },
                 success: function(response, options) {
                     //return true;
                      var strErr=Ext.decode(response.responseText);
                         //Ext.Msg.alert('Response',strErr.Resp);
                        if(strErr.Resp==='Access'){
                            var results=Ext.create("Lab.view.LabResultsGrid",{});
                            var resultsStore=Ext.data.StoreManager.lookup("LabResultsStore");

                            var labNo=component.up('panel').down('#labno').getValue();
                            var encNr=component.up('panel').down('#encounterno').getValue();

                            resultsStore.load({
                                params: {
                                    labNo:labNo
                                },
                                callback: function(records, operation, success) {

                                },
                                scope: this
                            });

                            //Ext.Msg.alert('Labno',component.up('panel').down('#labno').getValue());
                            var containterWindows=Ext.create('Ext.window.Window', {
                                title:"Check Results for Verification",
                                resizable:false,
                                closable:true
                            });

                            containterWindows.add(results);
                            containterWindows.show();

                            results.down('#labNo').setValue(labNo);
                            results.down('#encNr').setValue(encNr);
                        }else{
                             Ext.Msg.alert('Access Denied','Sorry! You are not allowed to Verify Results');
                        }

                 },
                 failure: function(response, options) {
                     Ext.Msg.alert('Access Denied','Sorry! You are not allowed to Verify Results');
                 }
             }
         );




        });
    },

    verifyResults: function(button) {
        var labNo=button.up('grid').down('#labNo').getValue();
        var encNr=button.up('grid').down('#encNr').getValue();

        Ext.Ajax.request(
             {
                 // waitMsg: 'Saving changes...',
                 url: '../../data/getDataFunctions.php?task=verifyResults',
                 params: {
                     labNo: labNo,
                     encNr: encNr,
                 },
                 success: function(response, options) {
                     var strResp=Ext.decode(response.responseText);
                     Ext.Msg.alert('Success','results successfully Verified');
                     button.up('window').close();

                 },
                 failure: function(response, options) {
                     var strErr=Ext.decode(response.responseText);
                     Ext.MessageBox.alert('Error', 'There was a Problem Verifying results please try again or contact System Admin...'+strErr);

                 }
             }
         );
    },

    openApproveResults: function(component, eOpts) {
         component.getEl().on('click', function() {

             Ext.Ajax.request(
             {
                 // waitMsg: 'Saving changes...',
                 url: '../../data/getDataFunctions.php?task=checkUserAccess',
                 params: {
                     activity: 'ApproveResults'
                 },
                 success: function(response, options) {
                     //return true;
                      var strErr=Ext.decode(response.responseText);
                        // Ext.Msg.alert('Response',strErr.Resp);
                        if(strErr.Resp==='Access'){
                             var approveForm=Ext.create("Lab.view.ApproveResults",{});

                                var labNo=component.up('panel').down('#labno').getValue();
                                var encNr=component.up('panel').down('#encounterno').getValue();

                                 //Ext.Msg.alert('Labno',component.up('panel').down('#labno').getValue());
                                 var containterWindows=Ext.create('Ext.window.Window', {
                                     title:"Approve Results",
                                     resizable:false,
                                     closable:true
                                 });

                                 containterWindows.add(approveForm);
                                 containterWindows.show();

                                 approveForm.down('#labNo').setValue(labNo);
                                 approveForm.down('#encNr').setValue(encNr);
                        }else{
                            Ext.Msg.alert('Access Denied','Sorry! You are not allowed to Approve Results');
                        }

                 },
                 failure: function(response, options) {
                     Ext.Msg.alert('Access Denied','Sorry! You are not allowed to Approve Results');
                 }
             }
         );


         });
    },

    approveResults: function(button) {
        var form = button.up('panel').getForm(); // get the basic form

        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function (form, action) {
                    Ext.Msg.alert('Thank you!', 'Results Approved Successfully.');
                    button.up('form').getForm().reset();
                    button.up('window').close();


                },
                failure: function (form, action) {
                    var jsonResp = Ext.decode(action.response.responseText);

                    Ext.Msg.alert('Failed', 'There was a problem Approving Lab results. \n Error=' + jsonResp.error);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    openStaffList: function() {
        var staffList=Ext.create("Lab.view.LaboratoryStaff",{});
        centerContainer=this.getViewport().down("#mainDetails");
        title=this.getViewport().down("#mainTitle");
        centerContainer.removeAll();

        centerContainer.add(staffList);
        title.down('#title').setValue('LABORATORY MODULE:  Laboratory Staff List');
    },

    openLabParams: function() {
        var labParams=Ext.create("Lab.view.LaboratoryParams",{});
        centerContainer=this.getViewport().down("#mainDetails");
        title=this.getViewport().down("#mainTitle");
        centerContainer.removeAll();

        var labParamStore=Ext.data.StoreManager.lookup('LabParamsStore');

        labParamStore.load({
        //     params: {
        //         labNo:labNo
        //     },
            callback: function(records, operation, success) {

            },
            scope: this
        });

        centerContainer.add(labParams);
        title.down('#title').setValue('LABORATORY MODULE:  Laboratory Parameters');
    },

    openParamsForm: function(button) {
        var paramsForm=Ext.create("Lab.view.ParamsForm",{});
        var containterWindows=Ext.create('Ext.window.Window', {
            title:"Create Laboratory Parameters",
            resizable:false,
            closable:true
        });

        containterWindows.add(paramsForm);
        containterWindows.show();

    },

    openEditResults: function() {
        var editresults=Ext.create("Lab.view.EditResults",{});
        centerContainer=this.getViewport().down("#mainDetails");
        title=this.getViewport().down("#mainTitle");
        centerContainer.removeAll();
        centerContainer.add(editresults);
        title.down('#title').setValue('LABORATORY MODULE:  Edit Laboratory Results');
    },

    openResultsForm: function(button) {
        var grid=button.up('grid').up('panel').down('#resultsGrid');
        var results=Ext.create("Lab.view.ResultsForm",{});
        var fullHaemogram=Ext.create("Lab.view.FullHaemogram",{});
        var StoolOCParasite=Ext.create("Lab.view.StoolOCParasite",{});
        var Urinalysis=Ext.create("Lab.view.Urinalysis",{});
        var AncProfile=Ext.create("Lab.view.AncProfile",{});

        var restCrl=results.down('#resultsControl');

        var containterWindows=Ext.create('Ext.window.Window', {
            title:'Results Entry',
            resizable:false,
            closable:false
        });
        containterWindows.add(results);
        containterWindows.show();
        restCrl.removeAll();

        grid.getStore().each(function(record) {
            if(record.get('InputType')==='input_box'){
                restCrl.add(new Ext.form.TextField({
                    fieldLabel: record.get('Description'),
                    name: record.get('PartCode')
                }));
            }

            if(record.get('InputType')==='group_field'){
                console.log(record.get('Label'));
                restCrl.add(Ext.create("Lab.view."+record.get('Label'),{}));
            }

            results.down('#encounterno').setValue(record.get('EncounterNo'));
            results.down('#labNo').setValue(record.get('LabNo'));

            results.getForm().loadRecord(record);

        });



        //results.down('#pid').setValue(button.up('grid').up('panel').down('#pid').getValue());
        // results.down('#encounterno').setValue(button.up('grid').up('panel').down('#encounterno').getValue());
        // results.down('#fileno').setValue(button.up('grid').up('panel').down('#fileno').getValue());
        // results.down('#names').setValue(button.up('panel').down('#names').getValue());
        // results.down('#sex').setValue(button.up('panel').down('#sex').getValue());
        // results.down('#dob').setValue(button.up('panel').down('#dob').getValue());
        // results.down('#createid').setValue(button.up('panel').down('#createid').getValue());
        // results.down('#labno').setValue(button.up('panel').down('#labno').getValue());
        // results.down('#priority').setValue(button.up('panel').down('#priority').getValue());
        // results.down('#encNr').setValue(button.up('panel').down('#encounterno').getValue());
        // results.down('#labNo').setValue(button.up('panel').down('#labno').getValue());

    },

    openNewStaff: function(click) {
        var newUser=Ext.create("Lab.view.NewStaff",{});
        var containterWindows=Ext.create('Ext.window.Window', {
            title:"Create New Staff",
            resizable:false,
            closable:true
        });

        containterWindows.add(newUser);
        containterWindows.show();
    },

    saveStaff: function(button) {
        var form = button.up('panel').getForm(); // get the basic form

        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function (form, action) {
                    Ext.Msg.alert('Thank you!', 'Saved Staff Members Successfully.');
                    button.up('form').getForm().reset();
                    button.up('window').close();

                    var staffList=Ext.data.StoreManager.lookup("StaffList");
                    staffList.load({});

                },
                failure: function (form, action) {
                    var jsonResp = Ext.decode(action.response.responseText);

                    Ext.Msg.alert('Failed', 'There was a problem Saving Staff Members. \n Error=' + jsonResp.error);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    loadStaffDetails: function(gridpanel, record, item, index, e, options) {
        //Ext.msg.alert('Test',this.getLaboratorystaff().down('#staffListForm').getItemId());
        this.getLaboratorystaff().down('#staffListForm').getForm().loadRecord(record);
    },

    checkUserAccess: function(TakeSamples) {
        Ext.Ajax.request(
             {
                 // waitMsg: 'Saving changes...',
                 url: '../../data/getDataFunctions.php?task=checkUserAccess',
                 params: {
                     activity: TakeSamples
                 },
                 success: function(response, options) {
                      var strErr=Ext.decode(response.responseText);
                         //Ext.Msg.alert('Response',strErr.Resp);
                        if(strErr.Resp==='Access'){
                           return 'Access';
                        }else{
                           return 'Denied';
                        }
                 },
                 failure: function(response, options) {
                     return 'false';
                 }
             }
         );
    },

    openReportForm: function() {
        var reportsForm=Ext.create("Lab.view.ReportsForm",{});
        centerContainer=this.getViewport().down("#mainDetails");
        title=this.getViewport().down("#mainTitle");
        centerContainer.removeAll();
        centerContainer.add(reportsForm);
        title.down('#title').setValue('LABORATORY MODULE:  Laboratory Requests & Reports Form');
    },

    printLabReport: function(button) {
        var labNo = button.up('panel').down('#labno').getValue();
        var encNr = button.up('panel').down('#encounterno').getValue();
        var pid = button.up('panel').down('#pid').getValue();

        // alert(accountNo);
        window.open('reports/LabReport.php?labNo='+labNo+'&encounterno='+encNr+'&pid='+pid,"Laboratory Reports",
                    "menubar=yes,toolbar=yes,width=600,height=600,location=yes,resizable=no,scrollbars=yes,status=yes");
    },

    addSamples: function(view, rowIndex, colIndex, item, e, record, row) {
        Ext.Msg.alert('Test',record.get('LabNo'));
    },

    loadParamValues: function(component, eOpts) {
                var haemoStore=Ext.data.StoreManager.lookup("FullHaemogramStore");
                var data = [];
                 var form = component.up('form').getForm();
                haemoStore.load({
                    callback: function(records, operation, success) {

                        haemoStore.each(function(record) {

                               form.getFields().each(function(item){
                                   var str=item.getName();
                                   var res = str.split("_");
                                   if(res[1]=== record.get('results') && res[0]==='lower'){
                                       item.setRawValue(record.get('normal'));
                                   }
                                   if(res[1]=== record.get('results') && res[0]==='upper'){
                                       item.setRawValue(record.get('ranges'));
                                   }


                                });
                             data.push(record.getData());
                        });


                    },
                    scope: this
                });
    },

    updateUserRights: function(button) {
        var form = button.up('panel').getForm(); // get the basic form

        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function (form, action) {
                    Ext.Msg.alert('Thank you!', 'Permissions Updated Successfully.');
                    button.up('form').getForm().reset();
                    button.up('window').close();


                },
                failure: function (form, action) {
                    var jsonResp = Ext.decode(action.response.responseText);

                    Ext.Msg.alert('Failed', 'There was a problem Updating Permissions. \n Error=' + jsonResp.error);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }

    },

    openLabTests: function() {
        var labTests=Ext.create("Lab.view.AllLabTests",{});
        centerContainer=this.getViewport().down("#mainDetails");
        title=this.getViewport().down("#mainTitle");
        centerContainer.removeAll();
        centerContainer.add(labTests);
        title.down('#title').setValue('LABORATORY MODULE:  Laboratory Tests List');
    }

});
