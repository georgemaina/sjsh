/*
 * File: app/controller/Main.js
 *
 * This file was generated by Sencha Architect version 4.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.2.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.2.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('hha.controller.Main', {
    extend: 'Ext.app.Controller',

    models: [
        'PatientsModel',
        'Encounters',
        'PrescriptionsModel',
        'TreatmentRegister'
    ],
    stores: [
        'PatientsListStore',
        'EncountersStore',
        'PrescriptionsStore',
        'TreatmentRegisterStore'
    ],
    views: [
        'PatientsList',
        'HhaMain',
        'InitialEncounter',
        'SharedPanel',
        'ContinuationCare',
        'TreatmentRegister',
        'SyncData'
    ],

    refs: {
        viewport: {
            selector: 'hhamain',
            xtype: 'hhamain'
        },
        patientslist: {
            selector: 'patientslist',
            xtype: 'patientslist'
        },
        initialencounter: {
            selector: 'initialencounter',
            xtype: 'initialencounter'
        },
        continuationcare: {
            selector: 'continuationcare',
            xtype: 'continuationcare'
        },
        treatmentregister: {
            selector: 'treatmentregister',
            xtype: 'treatmentregister'
        },
        syncdata: {
            selector: 'syncdata',
            xtype: 'syncdata'
        }
    },

    init: function(application) {
        this.control({
            '#mnuInitialEncounter':{
                click:this.openInitialEncounter
            },
            '#mnuContinuationCare':{
                click:this.openContinuationCare
            },
            '#cmdInitialEncounter': {
                click: this.saveInitialEncounter
            },
            '#cmdContiniousCare': {
                click: this.saveContiniousCare
            },
            '#mnuPatientsList':{
                click: this.openPatientsList
            },
            '#encountersGrid':{
                itemclick:this.loadEncounterDetails
            },
            '#BPFirstReading1':{
                change:this.setVitalsID
            },
            '#BPFirstReading2':{
                change:this.setVitalsID
            },
            '#DrugAllergies':{
                change:this.setQuestionID
            },
            '#Observations':{
                change:this.setQuestionID
            },
            '#BPInitial1':{
                change:this.setInitialVitalsID
            },
            '#Smoking':{
                change:this.setInitialQuestions
            },
            '#mnuTreatmentRegister':{
                click:this.openTreatmentRegister
            },
            '#txtHeight':{
                change:this.calculateBMI
            },
            '#txtWeight':{
                change:this.calculateBMI
            },
            '#AddPrescription':{
                click:this.AddPrescription
            },
            '#cmdSearch':{
                click:this.searchEncounter
            },
            '#txtSearch':{
                change:this.searchEncounter
            },
            '#cmdExport':{
                click:this.exportRegister
            },
            '#cmdSearchRegister':{
                click:this.searchRegister
            },
            '#mnuSyncdata':{
                click:this.openSyncWindow
            },
            '#cmdPreviewJson':{
                click:this.previewJson
            },
            '#cmdSendJson':{
                click:this.sendJson
            }
        });
    },

    openPatientsList: function(item) {
        treatRegister = Ext.create('hha.view.PatientsList', {});
        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll();

        center_container.add(treatRegister);
    },

    openInitialEncounter: function(item) {
        initialEncounter = Ext.create('hha.view.InitialEncounter', {});
        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll();

        center_container.add(initialEncounter);

        this.getViewport().down('#FormID').setValue('Initial');


    },

    openContinuationCare: function(item) {
        continCare = Ext.create('hha.view.ContinuationCare', {});
        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll();

        center_container.add(continCare);

        this.getViewport().down('#FormID').setValue('Continue');
    },

    loadEncounterDetails: function(gridpanel, record, item, index, e, eOpts) {
        formID=this.getViewport().down('#FormID').getValue();
        if(formID==='Initial'){
            var initialForm=this.getInitialencounter().loadRecord(record);
        }else if(formID==='Continue'){
            var initialForm=this.getContinuationcare().loadRecord(record);
        }

        var prescStore=Ext.data.StoreManager.lookup('PrescriptionsStore');
        prescStore.load({
            params:{
                EncounterNo:record.get('EncounterNo')
            }

        });



    },

    saveInitialEncounter: function(button) {
        var form = button.up('panel').getForm(); // get the basic form
        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function(form, action) {
                    Ext.Msg.alert('Success', 'Saved new Encounter successfully.');



                },
                failure: function(form, action) {
                    var jsonResp = Ext.decode(action.response.responseText);

                    Ext.Msg.alert('Failed', 'Could not save initial Encounter.  Error='+jsonResp.error);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    saveContiniousCare: function(button) {
        var form = button.up('panel').getForm(); // get the basic form
        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function(form, action) {
                    Ext.Msg.alert('Success', 'Saved new Encounter successfully.');

                },
                failure: function(form, action) {
                    var jsonResp = Ext.decode(action.response.responseText);

                    Ext.Msg.alert('Failed', 'Could not save Encounter. \n Error='+jsonResp.error);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    setVitalsID: function() {
        formID=this.getViewport().down('#FormID').getValue();
        if(formID==='Initial'){
            this.getInitialencounter().down('#Vitals').setValue('1');
        }else if(formID==='Continue'){
            this.getContinuationcare().down('#Vitals').setValue('3');
        }


    },

    setQuestionID: function(field, newValue, oldValue, eOpts) {
        this.getContinuationcare().down('#Questions').setValue('4');
    },

    setInitialVitalsID: function() {
        this.getInitialencounter().down('#Vitals').setValue('1');
    },

    setInitialQuestions: function() {
         this.getInitialencounter().down('#Questions').setValue('2');
    },

    openTreatmentRegister: function(item) {
        treatmentregister = Ext.create('hha.view.TreatmentRegister', {});
        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll();

        center_container.add(treatmentregister);

        //this.getViewport().down('#FormID').setValue('Initial');

    },

    calculateBMI: function() {
        formID=this.getViewport().down('#FormID').getValue();
        if(formID==='Initial'){
            var height=this.getInitialencounter().down('#txtHeight').getValue()/100;
            var weight=this.getInitialencounter().down('#txtWeight').getValue();

            var bmi=weight/(height*height);

            this.getInitialencounter().down('#txtBMI').setValue(Ext.util.Format.round(bmi,2));
        }else if(formID==='Continue'){
            var height=this.getContinuationcare().down('#txtHeight').getValue()/100;
            var weight=this.getContinuationcare().down('#txtWeight').getValue();

            var bmi=weight/(height*height);

            this.getContinuationcare().down('#txtBMI').setValue(Ext.util.Format.round(bmi,2));
        }

    },

    AddPrescription: function(button) {
        var pid=this.getInitialencounter().down('#PID').getValue();
        var encounterNo=this.getInitialencounter().down('#EncounterNo').getValue();
        var drugcode=this.getInitialencounter().down('#DrugCode').getValue();
        var description=this.getInitialencounter().down('#DrugName').getValue();
        var presStat=this.getInitialencounter().down('#PrescriptionStatus').getValue();
        var strength=this.getInitialencounter().down('#Strength').getValue();
        var frequency=this.getInitialencounter().down('#Frequency').getValue();

        Ext.Ajax.request({
                url: 'data/getDatafunctions.php?task=addPrescription',
                params: {
                    PID:pid,
                    EncNo:encounterNo,
                    DrugCode:drugcode,
                    Desription:description,
                    PrescriptionStatus:presStat,
                    Strength:strength,
                    Frequency:frequency
                },
                waitMsg: 'Creating Prescription ...',
                success: function(response){
                    var text = response.responseText;
                    Ext.Msg.alert('Prescription','Prescription Successfully Added');
                    var prescStore=Ext.data.StoreManager.lookup('PrescriptionsStore');
                    prescStore.load({});

                },
                failure:function(response){
        //             var resp = JSON.parseJSON(response);
                    Ext.Msg.alert('Error','There was a problem Adding Prescription, Contact System Administrator');
                }
            });

    },

    searchEncounter: function(button) {
        var searchParam=this.getViewport().down('#txtSearch').getValue();

        //Ext.Msg.alert('Test',searchParam);

        var encStore=Ext.data.StoreManager.lookup('EncountersStore');
        encStore.load({
            params:{
                searchParam:searchParam
            }

        });
    },

    exportRegister: function(button) {
        var strDate1=Ext.Date.format(new Date(this.getTreatmentregister().down('#StartDate').getValue()), 'Y-m-d');
        var strDate2=Ext.Date.format(new Date(this.getTreatmentregister().down('#EndDate').getValue()), 'Y-m-d');

        window.open('data/exportRegister2.php?strDate1='+strDate1+'&strDate2='+strDate2+'&single=false',"Reports",
                    "menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,scrollbars=yes,status=yes");
    },

    searchRegister: function(button) {
        var strDate1=Ext.Date.format(new Date(this.getTreatmentregister().down('#StartDate').getValue()), 'Y-m-d');
        var strDate2=Ext.Date.format(new Date(this.getTreatmentregister().down('#EndDate').getValue()), 'Y-m-d');

        var treatmentStore=Ext.data.StoreManager.lookup('TreatmentRegisterStore');
        treatmentStore.load({
            params:{
                StartDate:strDate1,
                EndDate:strDate2
            }
        });
    },

    openSyncWindow: function(item) {
        syncData = Ext.create('hha.view.SyncData', {});
        var syncWin=Ext.create('Ext.window.Window', {
            title: 'Data Syncronisation Window',
            resizable:true,
            animCollapse: true,
            collapsible: true,
            tools: [
            {
                xtype: 'tool',
                type: 'minimize'
            },
            {
                xtype: 'tool',
                type: 'maximize'
            }
            ]
        });

        syncWin.add(syncData);
        syncWin.show();
    },

    previewJson: function(button) {
        var strDate1=Ext.Date.format(new Date(this.getSyncdata().down('#StartDate').getValue()), 'Y-m-d');
        var strDate2=Ext.Date.format(new Date(this.getSyncdata().down('#EndDate').getValue()), 'Y-m-d');

        var text='';

        Ext.Ajax.request({

            url: 'data/getDatafunctions.php?task=getDataToSync',
            params: {
                StartDate:strDate1,
                EndDate:strDate2
            },
            waitMsg: 'Deleting User ...',
            success: function(response){
                text = response.responseText;
               // Ext.Msg.alert('Error',text);
                //this.getSyncdata().down('#JsonData').setValue(text);
                button.up('form').getForm().findField('JsonData').setValue(text);

            },
            failure:function(response){
                var resp = JSON.parseJSON(response);
                Ext.Msg.alert('Error','There was a problem deleting the User, Contact System Administrator');
            }
        });

    },

    sendJson: function(button) {
        var strDate1=Ext.Date.format(new Date(this.getSyncdata().down('#StartDate').getValue()), 'Y-m-d');
        var strDate2=Ext.Date.format(new Date(this.getSyncdata().down('#EndDate').getValue()), 'Y-m-d');

        var jsonData=this.getSyncdata().down('#JsonData').getValue();

        Ext.Ajax.request({

            url: 'data/getDatafunctions.php?task=syncData',
            params: {
                jsonData:jsonData
            },
            waitMsg: 'Deleting User ...',
            success: function(response){
                text = response.responseText;
                Ext.Msg.alert('Error',text);
                //         //this.getSyncdata().down('#JsonData').setValue(text);
                //         button.up('form').getForm().findField('JsonData').setValue(text);

            },
            failure:function(response){
                var resp = response.responseText;
                Ext.Msg.alert('Problem Sending Data','Error:'+resp);
            }
        });

    }

});
